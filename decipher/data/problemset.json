[
{"p_id": "1430", "p_index": "G", "p_title": "G. Yet Another DAG Problem", "p_time_limit": "2 seconds", "p_memory_limit": "1024 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given a directed acyclic graph (a directed graph that does not contain cycles) of $$$n$$$ vertices and $$$m$$$ arcs. The $$$i$$$-th arc leads from the vertex $$$x_i$$$ to the vertex $$$y_i$$$ and has the weight $$$w_i$$$.</p><p>Your task is to select an integer $$$a_v$$$ for each vertex $$$v$$$, and then write a number $$$b_i$$$ on each arcs $$$i$$$ such that $$$b_i = a_{x_i} - a_{y_i}$$$. You must select the numbers so that:</p><ul> <li> all $$$b_i$$$ are positive; </li><li> the value of the expression $$$\\sum \\limits_{i = 1}^{m} w_i b_i$$$ is the lowest possible. </li></ul><p>It can be shown that for any directed acyclic graph with non-negative $$$w_i$$$, such a way to choose numbers exists.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le 18$$$; $$$0 \\le m \\le \\dfrac{n(n - 1)}{2}$$$).</p><p>Then $$$m$$$ lines follow, the $$$i$$$-th of them contains three integers $$$x_i$$$, $$$y_i$$$ and $$$w_i$$$ ($$$1 \\le x_i, y_i \\le n$$$, $$$1 \\le w_i \\le 10^5$$$, $$$x_i \\ne y_i$$$) \u2014 the description of the $$$i$$$-th arc.</p><p>It is guaranteed that the lines describe $$$m$$$ arcs of a directed acyclic graph without multiple arcs between the same pair of vertices.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print $$$n$$$ integers $$$a_1$$$, $$$a_2$$$, ..., $$$a_n$$$ ($$$0 \\le a_v \\le 10^9$$$), which must be written on the vertices so that all $$$b_i$$$ are positive, and the value of the expression $$$\\sum \\limits_{i = 1}^{m} w_i b_i$$$ is the lowest possible. If there are several answers, print any of them. It can be shown that the answer always exists, and at least one of the optimal answers satisfies the constraints $$$0 \\le a_v \\le 10^9$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3 2\n2 1 4\n1 3 2\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1 2 0\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n5 4\n1 2 1\n2 3 1\n1 3 6\n4 5 8\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n43 42 41 1337 1336\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n5 5\n1 2 1\n2 3 1\n3 4 1\n1 5 1\n5 4 10\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n4 3 2 1 2\n</pre></div>"], "p_note": []},
{"p_id": "1426", "p_index": "B", "p_title": "B. Symmetric Matrix", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Masha has $$$n$$$ types of tiles of size $$$2 \\times 2$$$. Each cell of the tile contains one integer. Masha has an <span class=\"tex-font-style-bf\">infinite number</span> of tiles of each type.</p><p>Masha decides to construct the square of size $$$m \\times m$$$ consisting of the given tiles. This square also has to be a <span class=\"tex-font-style-it\">symmetric with respect to the main diagonal matrix</span>, and each cell of this square has to be covered with exactly one tile cell, and also sides of tiles should be parallel to the sides of the square. All placed tiles cannot intersect with each other. Also, each tile should lie inside the square. See the picture in Notes section for better understanding.</p><p>Symmetric with respect to the main diagonal matrix is such a square $$$s$$$ that for each pair $$$(i, j)$$$ the condition $$$s[i][j] = s[j][i]$$$ holds. I.e. it is true that the element written in the $$$i$$$-row and $$$j$$$-th column equals to the element written in the $$$j$$$-th row and $$$i$$$-th column.</p><p>Your task is to determine if Masha can construct a square of size $$$m \\times m$$$ which is a symmetric matrix and consists of tiles she has. Masha can use any number of tiles of each type she has to construct the square. Note that she <span class=\"tex-font-style-bf\">can not</span> rotate tiles, she can only place them in the orientation they have in the input.</p><p>You have to answer $$$t$$$ independent test cases.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 100$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The first line of the test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 100$$$, $$$1 \\le m \\le 100$$$) \u2014 the number of types of tiles and the size of the square Masha wants to construct.</p><p>The next $$$2n$$$ lines of the test case contain descriptions of tiles types. Types of tiles are written one after another, each type is written on two lines. </p><p>The first line of the description contains two positive (greater than zero) integers not exceeding $$$100$$$ \u2014 the number written in the top left corner of the tile and the number written in the top right corner of the tile of the current type. The second line of the description contains two positive (greater than zero) integers not exceeding $$$100$$$ \u2014 the number written in the bottom left corner of the tile and the number written in the bottom right corner of the tile of the current type.</p><p>It is forbidden to rotate tiles, it is only allowed to place them in the orientation they have in the input.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case print the answer: \"<span class=\"tex-font-style-tt\">YES</span>\" (without quotes) if Masha can construct the square of size $$$m \\times m$$$ which is a symmetric matrix. Otherwise, print \"<span class=\"tex-font-style-tt\">NO</span>\" (withtout quotes).</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nYES\nNO\nYES\nNO\nYES\nYES\n</pre></div>"], "p_note": ["<p>The first test case of the input has three types of tiles, they are shown on the picture below.</p>", "<p>Masha can construct, for example, the following square of size $$$4 \\times 4$$$ which is a symmetric matrix:</p>"]},
{"p_id": "1425", "p_index": "I", "p_title": "I. Impressive Harvesting of The Orchard", "p_time_limit": "7 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Mr. Chanek has an orchard structured as a rooted ternary tree with $$$N$$$ vertices numbered from $$$1$$$ to $$$N$$$. The root of the tree is vertex $$$1$$$. $$$P_i$$$ denotes the parent of vertex $$$i$$$, for $$$(2 \\le i \\le N)$$$. Interestingly, the height of the tree is not greater than $$$10$$$. Height of a tree is defined to be the largest distance from the root to a vertex in the tree.</p><p>There exist a bush on each vertex of the tree. Initially, all bushes have fruits. Fruits will not grow on bushes that currently already have fruits. The bush at vertex $$$i$$$ will grow fruits after $$$A_i$$$ days since its last harvest.</p><p>Mr. Chanek will visit his orchard for $$$Q$$$ days. In day $$$i$$$, he will harvest all bushes that have fruits on the subtree of vertex $$$X_i$$$. For each day, determine the sum of distances from every harvested bush to $$$X_i$$$, and the number of harvested bush that day. Harvesting a bush means collecting <span class=\"tex-font-style-bf\">all</span> fruits on the bush.</p><p>For example, if Mr. Chanek harvests all fruits on subtree of vertex $$$X$$$, and harvested bushes $$$[Y_1, Y_2, \\dots, Y_M]$$$, the sum of distances is $$$\\sum_{i = 1}^M \\text{distance}(X, Y_i)$$$</p><p>$$$\\text{distance}(U, V)$$$ in a tree is defined to be the number of edges on the simple path from $$$U$$$ to $$$V$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains two integers $$$N$$$ and $$$Q$$$ $$$(1 \\le N,\\ Q,\\le 5 \\cdot 10^4)$$$, which denotes the number of vertices and the number of days Mr. Chanek visits the orchard.</p><p>The second line contains $$$N$$$ integers $$$A_i$$$ $$$(1 \\le A_i \\le 5 \\cdot 10^4)$$$, which denotes the fruits growth speed on the bush at vertex $$$i$$$, for $$$(1 \\le i \\le N)$$$.</p><p>The third line contains $$$N-1$$$ integers $$$P_i$$$ $$$(1 \\le P_i \\le N, P_i \\ne i)$$$, which denotes the parent of vertex $$$i$$$ in the tree, for $$$(2 \\le i \\le N)$$$. It is guaranteed that each vertex can be the parent of at most $$$3$$$ other vertices. It is also guaranteed that the height of the tree is not greater than $$$10$$$.</p><p>The next $$$Q$$$ lines contain a single integer $$$X_i$$$ $$$(1 \\le X_i \\le N)$$$, which denotes the start of Mr. Chanek's visit on day $$$i$$$, for $$$(1 \\le i \\le Q)$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output $$$Q$$$ lines, line $$$i$$$ gives the sum of distances from the harvested bushes to $$$X_i$$$, and the number of harvested bushes.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n2 3\n1 2\n1\n2\n1\n1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0 1\n0 1\n1 2\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n5 3\n2 1 1 3 2\n1 2 2 1\n1\n1\n1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n6 5\n3 2\n4 4\n</pre></div>"], "p_note": ["<p>For the first example:</p>", "<p>For the second example, Mr. Chanek always starts at vertex $$$1$$$. The bushes which Mr. Chanek harvests on day one, two, and three are $$$[1, 2, 3, 4, 5], [2, 3], [1, 2, 3, 5]$$$, respectively.</p>"]},
{"p_id": "1426", "p_index": "A", "p_title": "A. Floor Number", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Vasya goes to visit his classmate Petya. Vasya knows that Petya's apartment number is $$$n$$$. </p><p>There is only one entrance in Petya's house and the distribution of apartments is the following: the first floor contains $$$2$$$ apartments, every other floor contains $$$x$$$ apartments each. Apartments are numbered starting from one, from the first floor. I.e. apartments on the first floor have numbers $$$1$$$ and $$$2$$$, apartments on the second floor have numbers from $$$3$$$ to $$$(x + 2)$$$, apartments on the third floor have numbers from $$$(x + 3)$$$ to $$$(2 \\cdot x + 2)$$$, and so on.</p><p>Your task is to find the number of floor on which Petya lives. Assume that the house is always high enough to fit at least $$$n$$$ apartments.</p><p>You have to answer $$$t$$$ independent test cases.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The only line of the test case contains two integers $$$n$$$ and $$$x$$$ ($$$1 \\le n, x \\le 1000$$$) \u2014 the number of Petya's apartment and the number of apartments on each floor of the house except the first one (there are two apartments on the first floor).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print the answer: the number of floor on which Petya lives.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n7 3\n1 5\n22 5\n987 13\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n3\n1\n5\n77\n</pre></div>"], "p_note": ["<p>Consider the first test case of the example: the first floor contains apartments with numbers $$$1$$$ and $$$2$$$, the second one contains apartments with numbers $$$3$$$, $$$4$$$ and $$$5$$$, the third one contains apartments with numbers $$$6$$$, $$$7$$$ and $$$8$$$. Therefore, Petya lives on the third floor.</p>", "<p>In the second test case of the example, Petya lives in the apartment $$$1$$$ which is on the first floor.</p>"]},
{"p_id": "1426", "p_index": "C", "p_title": "C. Increase and Copy", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Initially, you have the array $$$a$$$ consisting of one element $$$1$$$ ($$$a = [1]$$$).</p><p>In one move, you can do one of the following things:</p><ul> <li> Increase some (<span class=\"tex-font-style-bf\">single</span>) element of $$$a$$$ by $$$1$$$ (choose some $$$i$$$ from $$$1$$$ to the current length of $$$a$$$ and increase $$$a_i$$$ by one); </li><li> Append the copy of some (<span class=\"tex-font-style-bf\">single</span>) element of $$$a$$$ to the end of the array (choose some $$$i$$$ from $$$1$$$ to the current length of $$$a$$$ and append $$$a_i$$$ to the end of the array). </li></ul><p>For example, consider the sequence of five moves:</p><ol> <li> You take the first element $$$a_1$$$, append its copy to the end of the array and get $$$a = [1, 1]$$$. </li><li> You take the first element $$$a_1$$$, increase it by $$$1$$$ and get $$$a = [2, 1]$$$. </li><li> You take the second element $$$a_2$$$, append its copy to the end of the array and get $$$a = [2, 1, 1]$$$. </li><li> You take the first element $$$a_1$$$, append its copy to the end of the array and get $$$a = [2, 1, 1, 2]$$$. </li><li> You take the fourth element $$$a_4$$$, increase it by $$$1$$$ and get $$$a = [2, 1, 1, 3]$$$. </li></ol><p>Your task is to find the <span class=\"tex-font-style-bf\">minimum</span> number of moves required to obtain the array with the sum at least $$$n$$$.</p><p>You have to answer $$$t$$$ independent test cases.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The only line of the test case contains one integer $$$n$$$ ($$$1 \\le n \\le 10^9$$$) \u2014 the lower bound on the sum of the array.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print the answer: the <span class=\"tex-font-style-bf\">minimum</span> number of moves required to obtain the array with the sum at least $$$n$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n5\n1\n5\n42\n1337\n1000000000\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0\n3\n11\n72\n63244\n</pre></div>"], "p_note": []},
{"p_id": "1426", "p_index": "D", "p_title": "D. Non-zero Segments", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Kolya got an integer array $$$a_1, a_2, \\dots, a_n$$$. The array can contain both positive and negative integers, but Kolya doesn't like $$$0$$$, so the array doesn't contain any zeros.</p><p>Kolya doesn't like that the sum of some subsegments of his array can be $$$0$$$. The subsegment is some consecutive segment of elements of the array. </p><p>You have to help Kolya and change his array in such a way that it doesn't contain any subsegments with the sum $$$0$$$. To reach this goal, you can insert any integers between any pair of adjacent elements of the array (integers can be really any: positive, negative, $$$0$$$, any by absolute value, even such a huge that they can't be represented in most standard programming languages).</p><p>Your task is to find the minimum number of integers you have to insert into Kolya's array in such a way that the resulting array doesn't contain any subsegments with the sum $$$0$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$n$$$ ($$$2 \\le n \\le 200\\,000$$$) \u2014 the number of elements in Kolya's array.</p><p>The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$-10^{9} \\le a_i \\le 10^{9}, a_i \\neq 0$$$) \u2014 the description of Kolya's array.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print the minimum number of integers you have to insert into Kolya's array in such a way that the resulting array doesn't contain any subsegments with the sum $$$0$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n1 -5 3 2\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n5\n4 -2 3 -9 2\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n9\n-1 1 -1 1 -1 1 1 -1 -1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n6\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n8\n16 -5 -11 -15 10 5 4 -4\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n3\n</pre></div>"], "p_note": ["<p>Consider the first example. There is only one subsegment with the sum $$$0$$$. It starts in the second element and ends in the fourth element. It's enough to insert one element so the array doesn't contain any subsegments with the sum equal to zero. For example, it is possible to insert the integer $$$1$$$ between second and third elements of the array.</p>", "<p>There are no subsegments having sum $$$0$$$ in the second example so you don't need to do anything.</p>"]},
{"p_id": "1425", "p_index": "H", "p_title": "H. Huge Boxes of Animal Toys", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Chaneka has a hobby of playing with animal toys. Every toy has a different fun value, a real number. Chaneka has four boxes to store the toys with specification: </p><ul> <li> The first box stores toys with fun values in range of $$$(-\\infty,-1]$$$. </li><li> The second box stores toys with fun values in range of $$$(-1, 0)$$$. </li><li> The third box stores toys with fun values in range of $$$(0, 1)$$$. </li><li> The fourth box stores toys with fun value in range of $$$[1, \\infty)$$$. </li></ul><p>Chaneka has $$$A$$$, $$$B$$$, $$$C$$$, $$$D$$$ toys in the first, second, third, and fourth box, respectively. One day she decides that she only wants one toy, a super toy. So she begins to create this super toy by sewing all the toys she has.</p><p>While the number of toys Chaneka has is more than 1, she takes two different toys randomly and then sews them together, creating a new toy. The fun value of this new toy is equal to the multiplication of fun values of the sewn toys. She then puts this new toy in the appropriate box. She repeats this process until she only has one toy. This last toy is the super toy, and the box that stores this toy is the special box.</p><p>As an observer, you only know the number of toys in each box initially but do not know their fun values. You also don't see the sequence of Chaneka's sewing. Determine which boxes can be the special box after Chaneka found her super toy.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line has an integer $$$T$$$ $$$(1 \\le T \\le 5 \\cdot 10^4)$$$, the number of test cases.</p><p>Every case contains a line with four space-separated integers $$$A$$$ $$$B$$$ $$$C$$$ $$$D$$$ $$$(0 \\le A, B, C, D \\le 10^6, A + B + C + D &gt; 0)$$$, which denotes the number of toys in the first, second, third, and fourth box, respectively.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each case, print four space-separated strings. Each string represents the possibility that the first, second, third, and fourth box can be the special box from left to right.</p><p>For each box, print \"Ya\" (Without quotes, Indonesian for yes) if that box can be the special box. Print \"Tidak\" (Without quotes, Indonesian for No) otherwise.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n1 2 0 1\n0 1 0 0\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nYa Ya Tidak Tidak\nTidak Ya Tidak Tidak\n</pre></div>"], "p_note": ["<p>For the first case, here is a scenario where the first box is the special box: </p>", "<p>The sewing sequence: </p>", "<p>Here is a scenario where the second box ends up being the special box: </p>", "<p>The sewing sequence: </p>"]},
{"p_id": "1425", "p_index": "F", "p_title": "F. Flamingoes of Mystery", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">This is an interactive problem. You have to use a <span class=\"tex-font-style-tt\">flush</span> operation right after printing each line. For example, in C++ you should use the function <span class=\"tex-font-style-tt\">fflush(stdout)</span>, in Java \u2014 <span class=\"tex-font-style-tt\">System.out.flush()</span>, in Pascal \u2014 <span class=\"tex-font-style-tt\">flush(output)</span> and in Python \u2014 <span class=\"tex-font-style-tt\">sys.stdout.flush()</span>.</span></p><p>Mr. Chanek wants to buy a flamingo to accompany his chickens on his farm. Before going to the pet shop, Mr. Chanek stops at an animal festival to have fun. It turns out there is a carnival game with a flamingo as the prize.</p><p>There are $$$N$$$ mysterious cages, which are numbered from $$$1$$$ to $$$N$$$. Cage $$$i$$$ has $$$A_i$$$ $$$(0 \\le A_i \\le 10^3)$$$ flamingoes inside $$$(1 \\le i \\le N)$$$. However, the game master keeps the number of flamingoes inside a secret. To win the flamingo, Mr. Chanek must guess the number of flamingoes in each cage.</p><p>Coincidentally, Mr. Chanek has $$$N$$$ coins. Each coin can be used to ask once, what is the total number of flamingoes inside cages numbered $$$L$$$ to $$$R$$$ inclusive? With $$$L &lt; R$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>Use standard input to read the responses of your questions.</p><p>Initially, the judge will give an integer $$$N$$$ $$$(3 \\le N \\le 10^3)$$$, the number of cages, and the number of coins Mr. Chanek has.</p><p>For each of your questions, the jury will give an integer that denotes the number of flamingoes from cage $$$L$$$ to $$$R$$$ inclusive.</p><p>If your program does not guess the flamingoes or ask other questions, you will get \"Wrong Answer\". Of course, if your program asks more questions than the allowed number, your program will get \"Wrong Answer\".</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>To ask questions, your program must use standard output.</p><p>Then, you can ask at most $$$N$$$ questions. Questions are asked in the format \"? L R\", ($$$1 \\le L &lt; R \\le N$$$). </p><p>To guess the flamingoes, print a line that starts with \"!\" followed by $$$N$$$ integers where the $$$i$$$-th integer denotes the number of flamingo in cage $$$i$$$. After answering, your program must terminate or will receive the \"idle limit exceeded\" verdict. You can only guess the flamingoes once.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>6<br>\u00a0<br>5<br>\u00a0<br>15<br>\u00a0<br>10<br>\u00a0</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\u00a0<br>? 1 2<br>\u00a0<br>? 5 6<br>\u00a0<br>? 3 4<br>\u00a0<br>! 1 4 4 6 7 8</pre></div>"], "p_note": ["<p>In the sample input, the correct flamingoes amount is $$$[1, 4, 4, 6, 7, 8]$$$.</p>"]},
{"p_id": "1426", "p_index": "E", "p_title": "E. Rock, Paper, Scissors", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Alice and Bob have decided to play the game \"Rock, Paper, Scissors\". </p><p>The game consists of several rounds, each round is independent of each other. In each round, both players show one of the following things at the same time: rock, paper or scissors. If both players showed the same things then the round outcome is a draw. Otherwise, the following rules applied:</p><ul> <li> if one player showed rock and the other one showed scissors, then the player who showed rock is considered the winner and the other one is considered the loser; </li><li> if one player showed scissors and the other one showed paper, then the player who showed scissors is considered the winner and the other one is considered the loser; </li><li> if one player showed paper and the other one showed rock, then the player who showed paper is considered the winner and the other one is considered the loser. </li></ul><p>Alice and Bob decided to play exactly $$$n$$$ rounds of the game described above. Alice decided to show rock $$$a_1$$$ times, show scissors $$$a_2$$$ times and show paper $$$a_3$$$ times. Bob decided to show rock $$$b_1$$$ times, show scissors $$$b_2$$$ times and show paper $$$b_3$$$ times. Though, both Alice and Bob <span class=\"tex-font-style-bf\">did not choose</span> the sequence in which they show things. It is guaranteed that $$$a_1 + a_2 + a_3 = n$$$ and $$$b_1 + b_2 + b_3 = n$$$.</p><p>Your task is to find two numbers:</p><ol> <li> the minimum number of round Alice can win; </li><li> the maximum number of rounds Alice can win. </li></ol></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$n$$$ ($$$1 \\le n \\le 10^{9}$$$) \u2014 the number of rounds.</p><p>The second line of the input contains three integers $$$a_1, a_2, a_3$$$ ($$$0 \\le a_i \\le n$$$) \u2014 the number of times Alice will show rock, scissors and paper, respectively. It is guaranteed that $$$a_1 + a_2 + a_3 = n$$$.</p><p>The third line of the input contains three integers $$$b_1, b_2, b_3$$$ ($$$0 \\le b_j \\le n$$$) \u2014 the number of times Bob will show rock, scissors and paper, respectively. It is guaranteed that $$$b_1 + b_2 + b_3 = n$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print two integers: the minimum and the maximum number of rounds Alice can win.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n0 1 1\n1 1 0\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0 1\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n15\n5 5 5\n5 5 5\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0 15\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n0 0 3\n3 0 0\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n3 3\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n686\n479 178 29\n11 145 530\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n22 334\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n319\n10 53 256\n182 103 34\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n119 226\n</pre></div>"], "p_note": ["<p>In the first example, Alice will not win any rounds if she shows scissors and then paper and Bob shows rock and then scissors. In the best outcome, Alice will win one round if she shows paper and then scissors, and Bob shows rock and then scissors.</p>", "<p>In the second example, Alice will not win any rounds if Bob shows the same things as Alice each round.</p>", "<p>In the third example, Alice always shows paper and Bob always shows rock so Alice will win all three rounds anyway.</p>"]},
{"p_id": "1426", "p_index": "F", "p_title": "F. Number of Subsequences", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given a string $$$s$$$ consisting of lowercase Latin letters \"<span class=\"tex-font-style-tt\">a</span>\", \"<span class=\"tex-font-style-tt\">b</span>\" and \"<span class=\"tex-font-style-tt\">c</span>\" and question marks \"<span class=\"tex-font-style-tt\">?</span>\".</p><p>Let the number of question marks in the string $$$s$$$ be $$$k$$$. Let's replace each question mark with one of the letters \"<span class=\"tex-font-style-tt\">a</span>\", \"<span class=\"tex-font-style-tt\">b</span>\" and \"<span class=\"tex-font-style-tt\">c</span>\". Here we can obtain all $$$3^{k}$$$ possible strings consisting only of letters \"<span class=\"tex-font-style-tt\">a</span>\", \"<span class=\"tex-font-style-tt\">b</span>\" and \"<span class=\"tex-font-style-tt\">c</span>\". For example, if $$$s = $$$\"<span class=\"tex-font-style-tt\">ac?b?c</span>\" then we can obtain the following strings: $$$[$$$\"<span class=\"tex-font-style-tt\">acabac</span>\", \"<span class=\"tex-font-style-tt\">acabbc</span>\", \"<span class=\"tex-font-style-tt\">acabcc</span>\", \"<span class=\"tex-font-style-tt\">acbbac</span>\", \"<span class=\"tex-font-style-tt\">acbbbc</span>\", \"<span class=\"tex-font-style-tt\">acbbcc</span>\", \"<span class=\"tex-font-style-tt\">accbac</span>\", \"<span class=\"tex-font-style-tt\">accbbc</span>\", \"<span class=\"tex-font-style-tt\">accbcc</span>\"$$$]$$$.</p><p>Your task is to count the total number of subsequences \"<span class=\"tex-font-style-tt\">abc</span>\" in all resulting strings. Since the answer can be very large, print it modulo $$$10^{9} + 7$$$.</p><p>A subsequence of the string $$$t$$$ is such a sequence that can be derived from the string $$$t$$$ after removing some (possibly, zero) number of letters without changing the order of remaining letters. For example, the string \"<span class=\"tex-font-style-tt\">baacbc</span>\" contains two subsequences \"<span class=\"tex-font-style-tt\">abc</span>\" \u2014 a subsequence consisting of letters at positions $$$(2, 5, 6)$$$ and a subsequence consisting of letters at positions $$$(3, 5, 6)$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$n$$$ $$$(3 \\le n \\le 200\\,000)$$$ \u2014 the length of $$$s$$$.</p><p>The second line of the input contains the string $$$s$$$ of length $$$n$$$ consisting of lowercase Latin letters \"<span class=\"tex-font-style-tt\">a</span>\", \"<span class=\"tex-font-style-tt\">b</span>\" and \"<span class=\"tex-font-style-tt\">c</span>\" and question marks\"<span class=\"tex-font-style-tt\">?</span>\".</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print the total number of subsequences \"<span class=\"tex-font-style-tt\">abc</span>\" in all strings you can obtain if you replace all question marks with letters \"<span class=\"tex-font-style-tt\">a</span>\", \"<span class=\"tex-font-style-tt\">b</span>\" and \"<span class=\"tex-font-style-tt\">c</span>\", modulo $$$10^{9} + 7$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n6\nac?b?c\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n24\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n7\n???????\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2835\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n9\ncccbbbaaa\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n5\na???c\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n46\n</pre></div>"], "p_note": ["<p>In the first example, we can obtain $$$9$$$ strings:</p>", "<p>So, there are $$$2 + 4 + 4 + 2 + 3 + 4 + 1 + 2 + 2 = 24$$$ subsequences \"<span class=\"tex-font-style-tt\">abc</span>\" in total.</p>"]},
{"p_id": "1427", "p_index": "A", "p_title": "A. Avoiding Zero", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given an array of $$$n$$$ integers $$$a_1,a_2,\\dots,a_n$$$.</p><p>You have to create an array of $$$n$$$ integers $$$b_1,b_2,\\dots,b_n$$$ such that: </p><ul> <li> The array $$$b$$$ is a rearrangement of the array $$$a$$$, that is, it contains the same values and each value appears the same number of times in the two arrays. In other words, the multisets $$$\\{a_1,a_2,\\dots,a_n\\}$$$ and $$$\\{b_1,b_2,\\dots,b_n\\}$$$ are equal.<p>For example, if $$$a=[1,-1,0,1]$$$, then $$$b=[-1,1,1,0]$$$ and $$$b=[0,1,-1,1]$$$ are rearrangements of $$$a$$$, but $$$b=[1,-1,-1,0]$$$ and $$$b=[1,0,2,-3]$$$ are not rearrangements of $$$a$$$. </p></li><li> For all $$$k=1,2,\\dots,n$$$ the sum of the first $$$k$$$ elements of $$$b$$$ is nonzero. Formally, for all $$$k=1,2,\\dots,n$$$, it must hold $$$$$$b_1+b_2+\\cdots+b_k\\not=0\\,.$$$$$$ </li></ul><p>If an array $$$b_1,b_2,\\dots, b_n$$$ with the required properties does not exist, you have to print <span class=\"tex-font-style-tt\">NO</span>.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>Each test contains multiple test cases. The first line contains an integer $$$t$$$ ($$$1\\le t \\le 1000$$$) \u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each testcase contains one integer $$$n$$$ ($$$1\\le n\\le 50$$$) \u00a0\u2014 the length of the array $$$a$$$.</p><p>The second line of each testcase contains $$$n$$$ integers $$$a_1,a_2,\\dots, a_n$$$ ($$$-50\\le a_i\\le 50$$$) \u00a0\u2014 the elements of $$$a$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each testcase, if there is not an array $$$b_1,b_2,\\dots,b_n$$$ with the required properties, print a single line with the word <span class=\"tex-font-style-tt\">NO</span>.</p><p>Otherwise print a line with the word <span class=\"tex-font-style-tt\">YES</span>, followed by a line with the $$$n$$$ integers $$$b_1,b_2,\\dots,b_n$$$. </p><p>If there is more than one array $$$b_1,b_2,\\dots,b_n$$$ satisfying the required properties, you can print any of them.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n4\n1 -2 3 -4\n3\n0 0 0\n5\n1 -1 1 -1 1\n6\n40 -31 -9 0 13 -40\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nYES\n1 -2 3 -4\nNO\nYES\n1 1 -1 1 -1\nYES\n-40 13 40 0 -9 -31\n</pre></div>"], "p_note": ["<p><span class=\"tex-font-style-bf\">Explanation of the first testcase:</span> An array with the desired properties is $$$b=[1,-2,3,-4]$$$. For this array, it holds: </p>", "<p><span class=\"tex-font-style-bf\">Explanation of the second testcase:</span> Since all values in $$$a$$$ are $$$0$$$, any rearrangement $$$b$$$ of $$$a$$$ will have all elements equal to $$$0$$$ and therefore it clearly cannot satisfy the second property described in the statement (for example because $$$b_1=0$$$). Hence in this case the answer is <span class=\"tex-font-style-tt\">NO</span>.</p>", "<p><span class=\"tex-font-style-bf\">Explanation of the third testcase:</span> An array with the desired properties is $$$b=[1, 1, -1, 1, -1]$$$. For this array, it holds: </p>", "<p><span class=\"tex-font-style-bf\">Explanation of the fourth testcase:</span> An array with the desired properties is $$$b=[-40,13,40,0,-9,-31]$$$. For this array, it holds: </p>"]},
{"p_id": "1427", "p_index": "B", "p_title": "B. Chess Cheater", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You like playing chess tournaments online.</p><p>In your last tournament you played $$$n$$$ games. For the sake of this problem, each chess game is either won or lost (no draws). When you lose a game you get $$$0$$$ points. When you win you get $$$1$$$ or $$$2$$$ points: if you have won also the previous game you get $$$2$$$ points, otherwise you get $$$1$$$ point. If you win the very first game of the tournament you get $$$1$$$ point (since there is not a \"previous game\").</p><p>The outcomes of the $$$n$$$ games are represented by a string $$$s$$$ of length $$$n$$$: the $$$i$$$-th character of $$$s$$$ is <span class=\"tex-font-style-tt\">W</span> if you have won the $$$i$$$-th game, while it is <span class=\"tex-font-style-tt\">L</span> if you have lost the $$$i$$$-th game.</p><p>After the tournament, you notice a bug on the website that allows you to change the outcome of <span class=\"tex-font-style-bf\">at most</span> $$$k$$$ of your games (meaning that at most $$$k$$$ times you can change some symbol <span class=\"tex-font-style-tt\">L</span> to <span class=\"tex-font-style-tt\">W</span>, or <span class=\"tex-font-style-tt\">W</span> to <span class=\"tex-font-style-tt\">L</span>). Since your only goal is to improve your chess rating, you decide to cheat and use the bug.</p><p>Compute the maximum score you can get by cheating in the optimal way.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>Each test contains multiple test cases. The first line contains an integer $$$t$$$ ($$$1\\le t \\le 20,000$$$) \u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each testcase contains two integers $$$n, k$$$ ($$$1\\le n\\le 100,000$$$, $$$0\\le k\\le n$$$) \u2013 the number of games played and the number of outcomes that you can change.</p><p>The second line contains a string $$$s$$$ of length $$$n$$$ containing only the characters <span class=\"tex-font-style-tt\">W</span> and <span class=\"tex-font-style-tt\">L</span>. If you have won the $$$i$$$-th game then $$$s_i=\\,$$$<span class=\"tex-font-style-tt\">W</span>, if you have lost the $$$i$$$-th game then $$$s_i=\\,$$$<span class=\"tex-font-style-tt\">L</span>.</p><p>It is guaranteed that the sum of $$$n$$$ over all testcases does not exceed $$$200,000$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each testcase, print a single integer \u2013 the maximum score you can get by cheating in the optimal way.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n8\n5 2\nWLWLL\n6 5\nLLLWWL\n7 1\nLWLWLWL\n15 5\nWWWLLLWWWLLLWWW\n40 7\nLLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL\n1 0\nL\n1 1\nL\n6 1\nWLLWLW\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n7\n11\n6\n26\n46\n0\n1\n6\n</pre></div>"], "p_note": ["<p><span class=\"tex-font-style-bf\">Explanation of the first testcase.</span> Before changing any outcome, the score is $$$2$$$. Indeed, you won the first game, so you got $$$1$$$ point, and you won also the third, so you got another $$$1$$$ point (and not $$$2$$$ because you lost the second game).</p>", "<p>An optimal way to cheat is to change the outcomes of the second and fourth game. Doing so, you end up winning the first four games (the string of the outcomes becomes <span class=\"tex-font-style-tt\">WWWWL</span>). Hence, the new score is $$$7=1+2+2+2$$$: $$$1$$$ point for the first game and $$$2$$$ points for the second, third and fourth game.</p>", "<p><span class=\"tex-font-style-bf\">Explanation of the second testcase.</span> Before changing any outcome, the score is $$$3$$$. Indeed, you won the fourth game, so you got $$$1$$$ point, and you won also the fifth game, so you got $$$2$$$ more points (since you won also the previous game).</p>", "<p>An optimal way to cheat is to change the outcomes of the first, second, third and sixth game. Doing so, you end up winning all games (the string of the outcomes becomes <span class=\"tex-font-style-tt\">WWWWWW</span>). Hence, the new score is $$$11 = 1+2+2+2+2+2$$$: $$$1$$$ point for the first game and $$$2$$$ points for all the other games.</p>"]},
{"p_id": "1427", "p_index": "C", "p_title": "C. The Hard Work of Paparazzi", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are a paparazzi working in Manhattan.</p><p>Manhattan has $$$r$$$ south-to-north streets, denoted by numbers $$$1, 2,\\ldots, r$$$ in order from west to east, and $$$r$$$ west-to-east streets, denoted by numbers $$$1,2,\\ldots,r$$$ in order from south to north. Each of the $$$r$$$ south-to-north streets intersects each of the $$$r$$$ west-to-east streets; the intersection between the $$$x$$$-th south-to-north street and the $$$y$$$-th west-to-east street is denoted by $$$(x, y)$$$. In order to move from the intersection $$$(x,y)$$$ to the intersection $$$(x', y')$$$ you need $$$|x-x'|+|y-y'|$$$ minutes.</p><p>You know about the presence of $$$n$$$ celebrities in the city and you want to take photos of as many of them as possible. More precisely, for each $$$i=1,\\dots, n$$$, you know that the $$$i$$$-th celebrity will be at the intersection $$$(x_i, y_i)$$$ in exactly $$$t_i$$$ minutes from now (and he will stay there for a very short time, so you may take a photo of him only if at the $$$t_i$$$-th minute from now you are at the intersection $$$(x_i, y_i)$$$). You are very good at your job, so you are able to take photos instantaneously. You know that $$$t_i &lt; t_{i+1}$$$ for any $$$i=1,2,\\ldots, n-1$$$.</p><p>Currently you are at your office, which is located at the intersection $$$(1, 1)$$$. If you plan your working day optimally, what is the maximum number of celebrities you can take a photo of?</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains two positive integers $$$r, n$$$ ($$$1\\le r\\le 500$$$, $$$1\\le n\\le 100,000$$$) \u2013 the number of south-to-north/west-to-east streets and the number of celebrities.</p><p>Then $$$n$$$ lines follow, each describing the appearance of a celebrity. The $$$i$$$-th of these lines contains $$$3$$$ positive integers $$$t_i, x_i, y_i$$$ ($$$1\\le t_i\\le 1,000,000$$$, $$$1\\le x_i, y_i\\le r$$$) \u00a0\u2014 denoting that the $$$i$$$-th celebrity will appear at the intersection $$$(x_i, y_i)$$$ in $$$t_i$$$ minutes from now.</p><p>It is guaranteed that $$$t_i&lt;t_{i+1}$$$ for any $$$i=1,2,\\ldots, n-1$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a single integer, the maximum number of celebrities you can take a photo of.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n10 1\n11 6 8\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n6 9\n1 2 6\n7 5 1\n8 5 5\n10 3 1\n12 4 4\n13 6 2\n17 6 6\n20 1 4\n21 5 4\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n4\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n10 4\n1 2 1\n5 10 9\n13 8 8\n15 9 9\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n500 10\n69 477 122\n73 186 235\n341 101 145\n372 77 497\n390 117 440\n494 471 37\n522 300 498\n682 149 379\n821 486 359\n855 157 386\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n3\n</pre></div>"], "p_note": ["<p><span class=\"tex-font-style-bf\">Explanation of the first testcase:</span> There is only one celebrity in the city, and he will be at intersection $$$(6,8)$$$ exactly $$$11$$$ minutes after the beginning of the working day. Since you are initially at $$$(1,1)$$$ and you need $$$|1-6|+|1-8|=5+7=12$$$ minutes to reach $$$(6,8)$$$ you cannot take a photo of the celebrity. Thus you cannot get any photo and the answer is $$$0$$$.</p>", "<p><span class=\"tex-font-style-bf\">Explanation of the second testcase:</span> One way to take $$$4$$$ photos (which is the maximum possible) is to take photos of celebrities with indexes $$$3, 5, 7, 9$$$ (see the image for a visualization of the strategy): </p>", "<p><span class=\"tex-font-style-bf\">Explanation of the third testcase:</span> The only way to take $$$1$$$ photo (which is the maximum possible) is to take a photo of the celebrity with index $$$1$$$ (since $$$|2-1|+|1-1|=1$$$, you can be at intersection $$$(2,1)$$$ after exactly one minute, hence you are just in time to take a photo of celebrity $$$1$$$).</p>", "<p><span class=\"tex-font-style-bf\">Explanation of the fourth testcase:</span> One way to take $$$3$$$ photos (which is the maximum possible) is to take photos of celebrities with indexes $$$3, 8, 10$$$: </p>"]},
{"p_id": "1427", "p_index": "D", "p_title": "D. Unshuffling a Deck", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given a deck of $$$n$$$ cards numbered from $$$1$$$ to $$$n$$$ (not necessarily in this order in the deck). You have to sort the deck by repeating the following operation. </p><ul> <li> Choose $$$2 \\le k \\le n$$$ and split the deck in $$$k$$$ nonempty contiguous parts $$$D_1, D_2,\\dots, D_k$$$ ($$$D_1$$$ contains the first $$$|D_1|$$$ cards of the deck, $$$D_2$$$ contains the following $$$|D_2|$$$ cards and so on). Then reverse the order of the parts, transforming the deck into $$$D_k, D_{k-1}, \\dots, D_2, D_1$$$ (so, the first $$$|D_k|$$$ cards of the new deck are $$$D_k$$$, the following $$$|D_{k-1}|$$$ cards are $$$D_{k-1}$$$ and so on). The internal order of each packet of cards $$$D_i$$$ is unchanged by the operation. </li></ul><p>You have to obtain a sorted deck (i.e., a deck where the first card is $$$1$$$, the second is $$$2$$$ and so on) performing at most $$$n$$$ operations. It can be proven that it is always possible to sort the deck performing at most $$$n$$$ operations.</p><p><span class=\"tex-font-style-bf\">Examples of operation:</span> The following are three examples of valid operations (on three decks with different sizes). </p><ul> <li> If the deck is <span class=\"tex-font-style-tt\">[3 6 2 1 4 5 7]</span> (so $$$3$$$ is the first card and $$$7$$$ is the last card), we may apply the operation with $$$k=4$$$ and $$$D_1=$$$<span class=\"tex-font-style-tt\">[3 6]</span>, $$$D_2=$$$<span class=\"tex-font-style-tt\">[2 1 4]</span>, $$$D_3=$$$<span class=\"tex-font-style-tt\">[5]</span>, $$$D_4=$$$<span class=\"tex-font-style-tt\">[7]</span>. Doing so, the deck becomes <span class=\"tex-font-style-tt\">[7 5 2 1 4 3 6]</span>. </li><li> If the deck is <span class=\"tex-font-style-tt\">[3 1 2]</span>, we may apply the operation with $$$k=3$$$ and $$$D_1=$$$<span class=\"tex-font-style-tt\">[3]</span>, $$$D_2=$$$<span class=\"tex-font-style-tt\">[1]</span>, $$$D_3=$$$<span class=\"tex-font-style-tt\">[2]</span>. Doing so, the deck becomes <span class=\"tex-font-style-tt\">[2 1 3]</span>. </li><li> If the deck is <span class=\"tex-font-style-tt\">[5 1 2 4 3 6]</span>, we may apply the operation with $$$k=2$$$ and $$$D_1=$$$<span class=\"tex-font-style-tt\">[5 1]</span>, $$$D_2=$$$<span class=\"tex-font-style-tt\">[2 4 3 6]</span>. Doing so, the deck becomes <span class=\"tex-font-style-tt\">[2 4 3 6 5 1]</span>. </li></ul></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$n$$$ ($$$1\\le n\\le 52$$$) \u00a0\u2014 the number of cards in the deck.</p><p>The second line contains $$$n$$$ integers $$$c_1, c_2, \\dots, c_n$$$ \u00a0\u2014 the cards in the deck. The first card is $$$c_1$$$, the second is $$$c_2$$$ and so on.</p><p>It is guaranteed that for all $$$i=1,\\dots,n$$$ there is exactly one $$$j\\in\\{1,\\dots,n\\}$$$ such that $$$c_j = i$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>On the first line, print the number $$$q$$$ of operations you perform (it must hold $$$0\\le q\\le n$$$).</p><p>Then, print $$$q$$$ lines, each describing one operation.</p><p>To describe an operation, print on a single line the number $$$k$$$ of parts you are going to split the deck in, followed by the size of the $$$k$$$ parts: $$$|D_1|, |D_2|, \\dots , |D_k|$$$. </p><p>It must hold $$$2\\le k\\le n$$$, and $$$|D_i|\\ge 1$$$ for all $$$i=1,\\dots,k$$$, and $$$|D_1|+|D_2|+\\cdots + |D_k| = n$$$.</p><p>It can be proven that it is always possible to sort the deck performing at most $$$n$$$ operations. If there are several ways to sort the deck you can output any of them.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n3 1 2 4\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2\n3 1 2 1\n2 1 3\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n6\n6 5 4 3 2 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1\n6 1 1 1 1 1 1\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n1\n1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0\n</pre></div>"], "p_note": ["<p><span class=\"tex-font-style-bf\">Explanation of the first testcase:</span> Initially the deck is <span class=\"tex-font-style-tt\">[3 1 2 4]</span>. </p>"]},
{"p_id": "1427", "p_index": "F", "p_title": "F. Boring Card Game", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>When they are bored, Federico and Giada often play the following card game with a deck containing $$$6n$$$ cards.</p><p>Each card contains one number between $$$1$$$ and $$$6n$$$ and each number appears on exactly one card. Initially the deck is sorted, so the first card contains the number $$$1$$$, the second card contains the number $$$2$$$, $$$\\dots$$$, and the last one contains the number $$$6n$$$.</p><p>Federico and Giada take turns, alternating; Federico starts.</p><p>In his turn, the player takes $$$3$$$ contiguous cards from the deck and puts them in his pocket. The order of the cards remaining in the deck is not changed. They play until the deck is empty (after exactly $$$2n$$$ turns). At the end of the game both Federico and Giada have $$$3n$$$ cards in their pockets.</p><p>You are given the cards in Federico's pocket at the end of the game. Describe a sequence of moves that produces that set of cards in Federico's pocket.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$n$$$ ($$$1\\le n \\le 200$$$).</p><p>The second line of the input contains $$$3n$$$ numbers $$$x_1, x_2,\\ldots, x_{3n}$$$ ($$$1 \\le x_1 &lt; x_2 &lt;\\ldots &lt; x_{3n} \\le 6n$$$) \u2013 the cards in Federico's pocket at the end of the game. </p><p>It is guaranteed that for each test there is at least one sequence of moves that produces such set of cards in Federico's pocket.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print $$$2n$$$ lines, each containing $$$3$$$ integers.</p><p>The $$$i$$$-th line should contain, in increasing order, the integers $$$a_i&lt;b_i&lt;c_i$$$ written on the three cards taken by the player during the $$$i$$$-th turn (so taken by Federico if $$$i$$$ is odd and by Giada if $$$i$$$ is even).</p><p>If there is more than one possible sequence of moves, you can print any.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n2 3 4 9 10 11\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n9 10 11\n6 7 8\n2 3 4\n1 5 12\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n5\n1 2 3 4 5 9 11 12 13 18 19 20 21 22 23\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n19 20 21\n24 25 26\n11 12 13\n27 28 29\n1 2 3\n14 15 16\n18 22 23\n6 7 8\n4 5 9\n10 17 30\n</pre></div>"], "p_note": ["<p><span class=\"tex-font-style-bf\">Explanation of the first testcase:</span> Initially the deck has $$$12 = 2\\cdot 6$$$ sorted cards, so the deck is $$$[1\\ 2\\ 3\\ 4\\ 5\\ 6\\ 7\\ 8\\ 9\\ 10\\ 11\\ 12]$$$. </p>"]},
{"p_id": "1427", "p_index": "E", "p_title": "E. Xum", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You have a blackboard and initially only an <span class=\"tex-font-style-bf\">odd</span> number $$$x$$$ is written on it. Your goal is to write the number $$$1$$$ on the blackboard.</p><p>You may write new numbers on the blackboard with the following two operations. </p><ul> <li> You may take two numbers (not necessarily distinct) already on the blackboard and write their sum on the blackboard. The two numbers you have chosen remain on the blackboard. </li><li> You may take two numbers (not necessarily distinct) already on the blackboard and write their <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#XOR\">bitwise XOR</a> on the blackboard. The two numbers you have chosen remain on the blackboard. </li></ul> Perform a sequence of operations such that at the end the number $$$1$$$ is on the blackboard.</div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The single line of the input contains the odd integer $$$x$$$ ($$$3 \\le x \\le 999,999$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print on the first line the number $$$q$$$ of operations you perform. Then $$$q$$$ lines should follow, each describing one operation. </p><ul> <li> The \"sum\" operation is described by the line \"$$$a$$$ + $$$b$$$\", where $$$a, b$$$ must be integers already present on the blackboard. </li><li> The \"xor\" operation is described by the line \"$$$a$$$ ^ $$$b$$$\", where $$$a, b$$$ must be integers already present on the blackboard. </li></ul> <span class=\"tex-font-style-bf\">The operation symbol (+ or ^) must be separated from $$$a, b$$$ by a whitespace.</span><p>You can perform at most $$$100,000$$$ operations (that is, $$$q\\le 100,000$$$) and all numbers written on the blackboard must be in the range $$$[0, 5\\cdot10^{18}]$$$. It can be proven that under such restrictions the required sequence of operations exists. You can output any suitable sequence of operations.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n5\n3 + 3\n3 ^ 6\n3 + 5\n3 + 6\n8 ^ 9\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n123\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n10\n123 + 123\n123 ^ 246\n141 + 123\n246 + 123\n264 ^ 369\n121 + 246\n367 ^ 369\n30 + 30\n60 + 60\n120 ^ 121\n</pre></div>"], "p_note": []},
{"p_id": "1407", "p_index": "A", "p_title": "A. Ahahahahahahahaha", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Alexandra has an even-length array $$$a$$$, consisting of $$$0$$$s and $$$1$$$s. The elements of the array are enumerated from $$$1$$$ to $$$n$$$. She wants to remove <span class=\"tex-font-style-bf\">at most</span> $$$\\frac{n}{2}$$$ elements (where $$$n$$$ \u2014 length of array) in the way that alternating sum of the array will be equal $$$0$$$ (i.e. $$$a_1 - a_2 + a_3 - a_4 + \\dotsc = 0$$$). In other words, Alexandra wants sum of all elements at the odd positions and sum of all elements at the even positions to become equal. The elements that you remove don't have to be consecutive.</p><p>For example, if she has $$$a = [1, 0, 1, 0, 0, 0]$$$ and she removes $$$2$$$nd and $$$4$$$th elements, $$$a$$$ will become equal $$$[1, 1, 0, 0]$$$ and its alternating sum is $$$1 - 1 + 0 - 0 = 0$$$.</p><p>Help her!</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^3$$$). Description of the test cases follows.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 10^3$$$, $$$n$$$ <span class=\"tex-font-style-bf\">is even</span>) \u00a0\u2014 length of the array.</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i \\le 1$$$) \u00a0\u2014 elements of the array.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^3$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, firstly, print $$$k$$$ ($$$\\frac{n}{2} \\leq k \\leq n$$$) \u2014 number of elements that will remain after removing <span class=\"tex-font-style-bf\">in the order they appear in $$$a$$$</span>. Then, print this $$$k$$$ numbers. Note that you should print the numbers themselves, <span class=\"tex-font-style-bf\">not their indices</span>.</p><p>We can show that an answer always exists. If there are several answers, you can output any of them. </p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n2\n1 0\n2\n0 0\n4\n0 1 1 1\n4\n1 1 0 0\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1\n0\n1\n0\n2\n1 1\n4\n1 1 0 0\n</pre></div>"], "p_note": ["<p>In the first and second cases, alternating sum of the array, obviously, equals $$$0$$$.</p>", "<p>In the third case, alternating sum of the array equals $$$1 - 1 = 0$$$.</p>", "<p>In the fourth case, alternating sum already equals $$$1 - 1 + 0 - 0 = 0$$$, so we don't have to remove anything.</p>"]},
{"p_id": "1407", "p_index": "B", "p_title": "B. Big Vova", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Alexander is a well-known programmer. Today he decided to finally go out and play football, but with the first hit he left a dent on the new Rolls-Royce of the wealthy businessman Big Vova. Vladimir has recently opened a store on the popular online marketplace \"Zmey-Gorynych\", and offers Alex a job: if he shows his programming skills by solving a task, he'll work as a cybersecurity specialist. Otherwise, he'll be delivering some doubtful products for the next two years.</p><p>You're given $$$n$$$ positive integers $$$a_1, a_2, \\dots, a_n$$$. Using each of them <span class=\"tex-font-style-bf\">exactly at once</span>, you're to make such sequence $$$b_1, b_2, \\dots, b_n$$$ that sequence $$$c_1, c_2, \\dots, c_n$$$ is <span class=\"tex-font-style-it\">lexicographically maximal</span>, where $$$c_i=GCD(b_1,\\dots,b_i)$$$ - the greatest common divisor of the first $$$i$$$ elements of $$$b$$$. </p><p>Alexander is really afraid of the conditions of this simple task, so he asks you to solve it.</p><p>A sequence $$$a$$$ is lexicographically smaller than a sequence $$$b$$$ if and only if one of the following holds:</p><ul><li> $$$a$$$ is a prefix of $$$b$$$, but $$$a \\ne b$$$;</li><li> in the first position where $$$a$$$ and $$$b$$$ differ, the sequence $$$a$$$ has a smaller element than the corresponding element in $$$b$$$.</li></ul></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^3$$$). Description of the test cases follows.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^3$$$) \u00a0\u2014 the length of the sequence $$$a$$$.</p><p>The second line of each test case contains $$$n$$$ integers $$$a_1,\\dots,a_n$$$ ($$$1 \\le a_i \\le 10^3$$$) \u00a0\u2014 the sequence $$$a$$$.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^3$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case output the answer in a single line \u00a0\u2014 the desired sequence $$$b$$$. If there are multiple answers, print any.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n7\n2\n2 5\n4\n1 8 2 3\n3\n3 8 9\n5\n64 25 75 100 50\n1\n42\n6\n96 128 88 80 52 7\n5\n2 4 8 16 17\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n5 2 \n8 2 1 3 \n9 3 8 \n100 50 25 75 64 \n42 \n128 96 80 88 52 7 \n17 2 4 8 16 \n</pre></div>"], "p_note": ["<p>In the first test case of the example, there are only two possible permutations $$$b$$$ \u00a0\u2014 $$$[2, 5]$$$ and $$$[5, 2]$$$: for the first one $$$c=[2, 1]$$$, for the second one $$$c=[5, 1]$$$.</p>", "<p>In the third test case of the example, number $$$9$$$ should be the first in $$$b$$$, and $$$GCD(9, 3)=3$$$, $$$GCD(9, 8)=1$$$, so the second number of $$$b$$$ should be $$$3$$$.</p>", "<p>In the seventh test case of the example, first four numbers pairwise have a common divisor (a power of two), but none of them can be the first in the optimal permutation $$$b$$$.</p>"]},
{"p_id": "1407", "p_index": "D", "p_title": "D. Discrete Centrifugal Jumps", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>There are $$$n$$$ beautiful skyscrapers in New York, the height of the $$$i$$$-th one is $$$h_i$$$. Today some villains have set on fire first $$$n - 1$$$ of them, and now the only safety building is $$$n$$$-th skyscraper.</p><p>Let's call a jump from $$$i$$$-th skyscraper to $$$j$$$-th ($$$i &lt; j$$$) <span class=\"tex-font-style-bf\">discrete</span>, if all skyscrapers between are strictly lower or higher than both of them. Formally, jump is discrete, if $$$i &lt; j$$$ and one of the following conditions satisfied: </p><ul> <li> $$$i + 1 = j$$$ </li><li> $$$\\max(h_{i + 1}, \\ldots, h_{j - 1}) &lt; \\min(h_i, h_j)$$$ </li><li> $$$\\max(h_i, h_j) &lt; \\min(h_{i + 1}, \\ldots, h_{j - 1})$$$. </li></ul><p>At the moment, Vasya is staying on the first skyscraper and wants to live a little longer, so his goal is to reach $$$n$$$-th skyscraper with minimal count of discrete jumps. Help him with calcualting this number.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$n$$$ ($$$2 \\le n \\le 3 \\cdot 10^5$$$) \u2014 total amount of skyscrapers.</p><p>The second line contains $$$n$$$ integers $$$h_1, h_2, \\ldots, h_n$$$ ($$$1 \\le h_i \\le 10^9$$$) \u2014 heights of skyscrapers.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print single number $$$k$$$ \u2014 minimal amount of discrete jumps. We can show that an answer always exists.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n5\n1 3 1 4 5\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n3</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n4 2 2 4\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n1 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n5\n100 1 100 1 100\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2</pre></div>"], "p_note": ["<p>In the first testcase, Vasya can jump in the following way: $$$1 \\rightarrow 2 \\rightarrow 4 \\rightarrow 5$$$.</p>", "<p>In the second and third testcases, we can reach last skyscraper in one jump.</p>", "<p>Sequence of jumps in the fourth testcase: $$$1 \\rightarrow 3 \\rightarrow 5$$$.</p>"]},
{"p_id": "1407", "p_index": "E", "p_title": "E. Egor in the Republic of Dagestan", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Egor is a famous Russian singer, rapper, actor and blogger, and finally he decided to give a concert in the sunny Republic of Dagestan.</p><p>There are $$$n$$$ cities in the republic, some of them are connected by $$$m$$$ directed roads without any additional conditions. In other words, road system of Dagestan represents <span class=\"tex-font-style-it\">an arbitrary directed graph</span>. Egor will arrive to the city $$$1$$$, travel to the city $$$n$$$ by roads along some path, give a concert and fly away.</p><p>As any famous artist, Egor has lots of haters and too annoying fans, so he can travel only by safe roads. There are two types of the roads in Dagestan, black and white: black roads are safe at night only, and white roads \u2014 in the morning. Before the trip Egor's manager's going to make a schedule: for each city he'll specify it's color, black or white, and then if during the trip they visit some city, the only time they can leave it is determined by the city's color: night, if it's black, and morning, if it's white. After creating the schedule Egor chooses an available path from $$$1$$$ to $$$n$$$, and for security reasons it has to be the shortest possible.</p><p>Egor's manager likes Dagestan very much and wants to stay here as long as possible, so he asks you to make such schedule that there would be no path from $$$1$$$ to $$$n$$$ or the shortest path's length would be greatest possible.</p><p>A <span class=\"tex-font-style-it\">path</span> is one city or a sequence of roads such that for every road (excluding the first one) the city this road goes from is equal to the city previous road goes into. Egor can move only along paths consisting of safe roads only. </p><p>The path length is equal to the number of roads in it. The shortest path in a graph is a path with smallest length.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains two integers $$$n$$$, $$$m$$$ ($$$1 \\leq n \\leq 500000$$$, $$$0 \\leq m \\leq 500000$$$) \u2014 the number of cities and the number of roads.</p><p>The $$$i$$$-th of next $$$m$$$ lines contains three integers \u2014 $$$u_i$$$, $$$v_i$$$ and $$$t_i$$$ ($$$1 \\leq u_i, v_i \\leq n$$$, $$$t_i \\in \\{0, 1\\}$$$) \u2014 numbers of cities connected by road and its type, respectively ($$$0$$$ \u2014 night road, $$$1$$$ \u2014 morning road).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>In the first line output the length of the desired path (or $$$-1$$$, if it's possible to choose such schedule that there's no path from $$$1$$$ to $$$n$$$).</p><p>In the second line output the desired schedule \u2014 a string of $$$n$$$ digits, where $$$i$$$-th digit is $$$0$$$, if the $$$i$$$-th city is a night one, and $$$1$$$ if it's a morning one.</p><p>If there are multiple answers, print any.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3 4\n1 2 0\n1 3 1\n2 3 0\n2 3 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2\n011</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n4 8\n1 1 0\n1 3 0\n1 3 1\n3 2 0\n2 1 0\n3 4 1\n2 4 0\n2 4 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n3\n1101</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n5 10\n1 2 0\n1 3 1\n1 4 0\n2 3 0\n2 3 1\n2 5 0\n3 4 0\n3 4 1\n4 2 1\n4 5 0\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n-1\n11111</pre></div>"], "p_note": ["<p>For the first sample, if we paint city $$$1$$$ white, the shortest path is $$$1 \\rightarrow 3$$$. Otherwise, it's $$$1 \\rightarrow 2 \\rightarrow 3$$$ regardless of other cities' colors.</p>", "<p>For the second sample, we should paint city $$$3$$$ black, and there are both black and white roads going from $$$2$$$ to $$$4$$$. Note that there can be a road connecting a city with itself.</p>"]},
{"p_id": "1408", "p_index": "A", "p_title": "A. Circle Coloring", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given three sequences: $$$a_1, a_2, \\ldots, a_n$$$; $$$b_1, b_2, \\ldots, b_n$$$; $$$c_1, c_2, \\ldots, c_n$$$.</p><p>For each $$$i$$$, $$$a_i \\neq b_i$$$, $$$a_i \\neq c_i$$$, $$$b_i \\neq c_i$$$.</p><p>Find a sequence $$$p_1, p_2, \\ldots, p_n$$$, that satisfy the following conditions:</p><ul><li> $$$p_i \\in \\{a_i, b_i, c_i\\}$$$</li><li> $$$p_i \\neq p_{(i \\mod n) + 1}$$$.</li></ul><p>In other words, for each element, you need to choose one of the three possible values, such that no two adjacent elements (where we consider elements $$$i,i+1$$$ adjacent for $$$i&lt;n$$$ and also elements $$$1$$$ and $$$n$$$) will have equal value.</p><p>It can be proved that in the given constraints solution always exists. You don't need to minimize/maximize anything, you need to find any proper sequence.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of input contains one integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$): the number of test cases.</p><p>The first line of each test case contains one integer $$$n$$$ ($$$3 \\leq n \\leq 100$$$): the number of elements in the given sequences.</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 100$$$).</p><p>The third line contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$1 \\leq b_i \\leq 100$$$).</p><p>The fourth line contains $$$n$$$ integers $$$c_1, c_2, \\ldots, c_n$$$ ($$$1 \\leq c_i \\leq 100$$$).</p><p>It is guaranteed that $$$a_i \\neq b_i$$$, $$$a_i \\neq c_i$$$, $$$b_i \\neq c_i$$$ for all $$$i$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print $$$n$$$ integers: $$$p_1, p_2, \\ldots, p_n$$$ ($$$p_i \\in \\{a_i, b_i, c_i\\}$$$, $$$p_i \\neq p_{i \\mod n + 1}$$$).</p><p>If there are several solutions, you can print any.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n5\n3\n1 1 1\n2 2 2\n3 3 3\n4\n1 2 1 2\n2 1 2 1\n3 4 3 4\n7\n1 3 3 1 1 1 1\n2 4 4 3 2 2 4\n4 2 2 2 4 4 2\n3\n1 2 1\n2 3 3\n3 1 2\n10\n1 1 1 2 2 2 3 3 3 1\n2 2 2 3 3 3 1 1 1 2\n3 3 3 1 1 1 2 2 2 3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1 2 3\n1 2 1 2\n1 3 4 3 2 4 2\n1 3 2\n1 2 3 1 2 3 1 2 3 2\n</pre></div>"], "p_note": ["<p>In the first test case $$$p = [1, 2, 3]$$$.</p>", "<p>It is a correct answer, because:</p>", "<p>All possible correct answers to this test case are: $$$[1, 2, 3]$$$, $$$[1, 3, 2]$$$, $$$[2, 1, 3]$$$, $$$[2, 3, 1]$$$, $$$[3, 1, 2]$$$, $$$[3, 2, 1]$$$.</p>", "<p>In the second test case $$$p = [1, 2, 1, 2]$$$.</p>", "<p>In this sequence $$$p_1 = a_1$$$, $$$p_2 = a_2$$$, $$$p_3 = a_3$$$, $$$p_4 = a_4$$$. Also we can see, that no two adjacent elements of the sequence are equal.</p>", "<p>In the third test case $$$p = [1, 3, 4, 3, 2, 4, 2]$$$.</p>", "<p>In this sequence $$$p_1 = a_1$$$, $$$p_2 = a_2$$$, $$$p_3 = b_3$$$, $$$p_4 = b_4$$$, $$$p_5 = b_5$$$, $$$p_6 = c_6$$$, $$$p_7 = c_7$$$. Also we can see, that no two adjacent elements of the sequence are equal.</p>"]},
{"p_id": "1408", "p_index": "B", "p_title": "B. Arrays Sum", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given a <span class=\"tex-font-style-bf\">non-decreasing</span> array of <span class=\"tex-font-style-bf\">non-negative</span> integers $$$a_1, a_2, \\ldots, a_n$$$. Also you are given a positive integer $$$k$$$.</p><p>You want to find $$$m$$$ <span class=\"tex-font-style-bf\">non-decreasing</span> arrays of <span class=\"tex-font-style-bf\">non-negative</span> integers $$$b_1, b_2, \\ldots, b_m$$$, such that:</p><ul> <li> The size of $$$b_i$$$ is equal to $$$n$$$ for all $$$1 \\leq i \\leq m$$$. </li><li> For all $$$1 \\leq j \\leq n$$$, $$$a_j = b_{1, j} + b_{2, j} + \\ldots + b_{m, j}$$$. In the other word, array $$$a$$$ is the sum of arrays $$$b_i$$$. </li><li> The number of different elements in the array $$$b_i$$$ is at most $$$k$$$ for all $$$1 \\leq i \\leq m$$$. </li></ul><p>Find the minimum possible value of $$$m$$$, or report that there is no possible $$$m$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains one integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$): the number of test cases.</p><p>The first line of each test case contains two integers $$$n$$$, $$$k$$$ ($$$1 \\leq n \\leq 100$$$, $$$1 \\leq k \\leq n$$$).</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\leq a_1 \\leq a_2 \\leq \\ldots \\leq a_n \\leq 100$$$, $$$a_n &gt; 0$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case print a single integer: the minimum possible value of $$$m$$$. If there is no such $$$m$$$, print $$$-1$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n6\n4 1\n0 0 0 1\n3 1\n3 3 3\n11 3\n0 1 2 2 3 3 3 4 4 4 4\n5 3\n1 2 3 4 5\n9 4\n2 2 3 5 7 11 13 13 17\n10 7\n0 1 1 2 3 3 4 5 5 6\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n-1\n1\n2\n2\n2\n1\n</pre></div>"], "p_note": ["<p>In the first test case, there is no possible $$$m$$$, because all elements of all arrays should be equal to $$$0$$$. But in this case, it is impossible to get $$$a_4 = 1$$$ as the sum of zeros.</p>", "<p>In the second test case, we can take $$$b_1 = [3, 3, 3]$$$. $$$1$$$ is the smallest possible value of $$$m$$$.</p>", "<p>In the third test case, we can take $$$b_1 = [0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2]$$$ and $$$b_2 = [0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2]$$$. It's easy to see, that $$$a_i = b_{1, i} + b_{2, i}$$$ for all $$$i$$$ and the number of different elements in $$$b_1$$$ and in $$$b_2$$$ is equal to $$$3$$$ (so it is at most $$$3$$$). It can be proven that $$$2$$$ is the smallest possible value of $$$m$$$.</p>"]},
{"p_id": "1408", "p_index": "C", "p_title": "C. Discrete Acceleration", "p_time_limit": "3 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>There is a road with length $$$l$$$ meters. The start of the road has coordinate $$$0$$$, the end of the road has coordinate $$$l$$$.</p><p>There are two cars, the first standing at the start of the road and the second standing at the end of the road. They will start driving simultaneously. The first car will drive from the start to the end and the second car will drive from the end to the start.</p><p>Initially, they will drive with a speed of $$$1$$$ meter per second. There are $$$n$$$ flags at <span class=\"tex-font-style-bf\">different</span> coordinates $$$a_1, a_2, \\ldots, a_n$$$. Each time when any of two cars drives through a flag, the speed of that car increases by $$$1$$$ meter per second.</p><p>Find how long will it take for cars to meet (to reach the same coordinate). </p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains one integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$): the number of test cases.</p><p>The first line of each test case contains two integers $$$n$$$, $$$l$$$ ($$$1 \\leq n \\leq 10^5$$$, $$$1 \\leq l \\leq 10^9$$$): the number of flags and the length of the road.</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ in the <span class=\"tex-font-style-bf\">increasing</span> order ($$$1 \\leq a_1 &lt; a_2 &lt; \\ldots &lt; a_n &lt; l$$$).</p><p>It is guaranteed that the sum of $$$n$$$ among all test cases does not exceed $$$10^5$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case print a single real number: the time required for cars to meet.</p><p>Your answer will be considered correct, if its absolute or relative error does not exceed $$$10^{-6}$$$. More formally, if your answer is $$$a$$$ and jury's answer is $$$b$$$, your answer will be considered correct if $$$\\frac{|a-b|}{\\max{(1, b)}} \\leq 10^{-6}$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n5\n2 10\n1 9\n1 10\n1\n5 7\n1 2 3 4 6\n2 1000000000\n413470354 982876160\n9 478\n1 10 25 33 239 445 453 468 477\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n3.000000000000000\n3.666666666666667\n2.047619047619048\n329737645.750000000000000\n53.700000000000000\n</pre></div>"], "p_note": ["<p>In the first test case cars will meet in the coordinate $$$5$$$.</p>", "<p>The first car will be in the coordinate $$$1$$$ in $$$1$$$ second and after that its speed will increase by $$$1$$$ and will be equal to $$$2$$$ meters per second. After $$$2$$$ more seconds it will be in the coordinate $$$5$$$. So, it will be in the coordinate $$$5$$$ in $$$3$$$ seconds.</p>", "<p>The second car will be in the coordinate $$$9$$$ in $$$1$$$ second and after that its speed will increase by $$$1$$$ and will be equal to $$$2$$$ meters per second. After $$$2$$$ more seconds it will be in the coordinate $$$5$$$. So, it will be in the coordinate $$$5$$$ in $$$3$$$ seconds.</p>", "<p>In the second test case after $$$1$$$ second the first car will be in the coordinate $$$1$$$ and will have the speed equal to $$$2$$$ meters per second, the second car will be in the coordinate $$$9$$$ and will have the speed equal to $$$1$$$ meter per second. So, they will meet after $$$\\frac{9-1}{2+1} = \\frac{8}{3}$$$ seconds. So, the answer is equal to $$$1 + \\frac{8}{3} = \\frac{11}{3}$$$.</p>"]},
{"p_id": "1408", "p_index": "D", "p_title": "D. Searchlights", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>There are $$$n$$$ robbers at coordinates $$$(a_1, b_1)$$$, $$$(a_2, b_2)$$$, ..., $$$(a_n, b_n)$$$ and $$$m$$$ searchlight at coordinates $$$(c_1, d_1)$$$, $$$(c_2, d_2)$$$, ..., $$$(c_m, d_m)$$$. </p><p>In one move you can move each robber to the right (increase $$$a_i$$$ of each robber by one) or move each robber up (increase $$$b_i$$$ of each robber by one). Note that you should either increase <span class=\"tex-font-style-bf\">all</span> $$$a_i$$$ or <span class=\"tex-font-style-bf\">all</span> $$$b_i$$$, you <span class=\"tex-font-style-bf\">can't</span> increase $$$a_i$$$ for some points and $$$b_i$$$ for some other points.</p><p>Searchlight $$$j$$$ can see a robber $$$i$$$ if $$$a_i \\leq c_j$$$ and $$$b_i \\leq d_j$$$. </p><p>A configuration of robbers is <span class=\"tex-font-style-it\">safe</span> if no searchlight can see a robber (i.e. if there is no pair $$$i,j$$$ such that searchlight $$$j$$$ can see a robber $$$i$$$).</p><p>What is the minimum number of moves you need to perform to reach a safe configuration?</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of input contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n, m \\leq 2000$$$): the number of robbers and the number of searchlight.</p><p>Each of the next $$$n$$$ lines contains two integers $$$a_i$$$, $$$b_i$$$ ($$$0 \\leq a_i, b_i \\leq 10^6$$$), coordinates of robbers.</p><p>Each of the next $$$m$$$ lines contains two integers $$$c_i$$$, $$$d_i$$$ ($$$0 \\leq c_i, d_i \\leq 10^6$$$), coordinates of searchlights.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print one integer: the minimum number of moves you need to perform to reach a safe configuration.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n1 1\n0 0\n2 3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n3\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n2 3\n1 6\n6 1\n10 1\n1 10\n7 7\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n4\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n1 2\n0 0\n0 0\n0 0\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n7 3\n0 8\n3 8\n2 7\n0 10\n5 5\n7 0\n3 5\n6 6\n3 11\n11 5\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n6\n</pre></div>"], "p_note": ["<p>In the first test, you can move each robber to the right three times. After that there will be one robber in the coordinates $$$(3, 0)$$$.</p>", "<p>The configuration of the robbers is safe, because the only searchlight can't see the robber, because it is in the coordinates $$$(2, 3)$$$ and $$$3 &gt; 2$$$.</p>", "<p>In the second test, you can move each robber to the right two times and two times up. After that robbers will be in the coordinates $$$(3, 8)$$$, $$$(8, 3)$$$.</p>", "<p>It's easy the see that the configuration of the robbers is safe.</p>", "<p>It can be proved that you can't reach a safe configuration using no more than $$$3$$$ moves.</p>"]},
{"p_id": "1408", "p_index": "E", "p_title": "E. Avoid Rainbow Cycles", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given $$$m$$$ sets of integers $$$A_1, A_2, \\ldots, A_m$$$; elements of these sets are integers between $$$1$$$ and $$$n$$$, inclusive.</p><p>There are two arrays of positive integers $$$a_1, a_2, \\ldots, a_m$$$ and $$$b_1, b_2, \\ldots, b_n$$$. </p><p>In one operation you can delete an element $$$j$$$ from the set $$$A_i$$$ and pay $$$a_i + b_j$$$ coins for that.</p><p>You can make several (maybe none) operations (some sets can become empty).</p><p>After that, you will make an edge-colored undirected graph consisting of $$$n$$$ vertices. For each set $$$A_i$$$ you will add an edge $$$(x, y)$$$ with color $$$i$$$ for all $$$x, y \\in A_i$$$ and $$$x &lt; y$$$. Some pairs of vertices can be connected with more than one edge, but such edges have different colors.</p><p>You call a cycle $$$i_1 \\to e_1 \\to i_2 \\to e_2 \\to \\ldots \\to i_k \\to e_k \\to i_1$$$ ($$$e_j$$$ is some edge connecting vertices $$$i_j$$$ and $$$i_{j+1}$$$ in this graph) <span class=\"tex-font-style-it\">rainbow</span> if all edges on it have different colors.</p><p>Find the minimum number of coins you should pay to get a graph without rainbow cycles.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains two integers $$$m$$$ and $$$n$$$ ($$$1 \\leq m, n \\leq 10^5$$$), the number of sets and the number of vertices in the graph.</p><p>The second line contains $$$m$$$ integers $$$a_1, a_2, \\ldots, a_m$$$ ($$$1 \\leq a_i \\leq 10^9$$$).</p><p>The third line contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$1 \\leq b_i \\leq 10^9$$$).</p><p>In the each of the next of $$$m$$$ lines there are descriptions of sets. In the $$$i$$$-th line the first integer $$$s_i$$$ ($$$1 \\leq s_i \\leq n$$$) is equal to the size of $$$A_i$$$. Then $$$s_i$$$ integers follow: the elements of the set $$$A_i$$$. These integers are from $$$1$$$ to $$$n$$$ and distinct.</p><p>It is guaranteed that the sum of $$$s_i$$$ for all $$$1 \\leq i \\leq m$$$ does not exceed $$$2 \\cdot 10^5$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print one integer: the minimum number of coins you should pay for operations to avoid rainbow cycles in the obtained graph.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3 2\n1 2 3\n4 5\n2 1 2\n2 1 2\n2 1 2\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n11\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n7 8\n3 6 7 9 10 7 239\n8 1 9 7 10 2 6 239\n3 2 1 3\n2 4 1\n3 1 3 7\n2 4 3\n5 3 4 5 6 7\n2 5 7\n1 8\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n66\n</pre></div>"], "p_note": ["<p>In the first test, you can make such operations:</p>", "<p>You pay $$$11$$$ coins in total. After these operations, the first and the second sets will be equal to $$$\\{2\\}$$$ and the third set will be equal to $$$\\{1, 2\\}$$$.</p>", "<p>So, the graph will consist of one edge $$$(1, 2)$$$ of color $$$3$$$.</p>", "<p>In the second test, you can make such operations:</p>", "<p>You pay $$$66$$$ coins in total.</p>", "<p>After these operations, the sets will be:</p>", "<p>We will get the graph:</p>", "<p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/5cf40a2ec741d258c6734584e25a52b6f7b14fd7.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"></p>", "<p>There are no rainbow cycles in it.</p>"]},
{"p_id": "1408", "p_index": "F", "p_title": "F. Two Different", "p_time_limit": "3 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given an integer $$$n$$$.</p><p>You should find a list of pairs $$$(x_1, y_1)$$$, $$$(x_2, y_2)$$$, ..., $$$(x_q, y_q)$$$ ($$$1 \\leq x_i, y_i \\leq n$$$) satisfying the following condition.</p><p>Let's consider some function $$$f: \\mathbb{N} \\times \\mathbb{N} \\to \\mathbb{N}$$$ (we define $$$\\mathbb{N}$$$ as the set of positive integers). In other words, $$$f$$$ is a function that returns a positive integer for a pair of positive integers.</p><p>Let's make an array $$$a_1, a_2, \\ldots, a_n$$$, where $$$a_i = i$$$ initially.</p><p>You will perform $$$q$$$ operations, in $$$i$$$-th of them you will: </p><ol> <li> assign $$$t = f(a_{x_i}, a_{y_i})$$$ ($$$t$$$ is a temporary variable, it is used <span class=\"tex-font-style-bf\">only</span> for the next two assignments); </li><li> assign $$$a_{x_i} = t$$$; </li><li> assign $$$a_{y_i} = t$$$. </li></ol><p>In other words, you need to <span class=\"tex-font-style-bf\">simultaneously</span> change $$$a_{x_i}$$$ and $$$a_{y_i}$$$ to $$$f(a_{x_i}, a_{y_i})$$$. Note that during this process $$$f(p, q)$$$ is always the same for a fixed pair of $$$p$$$ and $$$q$$$.</p><p>In the end, there should be at most two different numbers in the array $$$a$$$.</p><p>It should be true for any function $$$f$$$.</p><p>Find any possible list of pairs. The number of pairs should not exceed $$$5 \\cdot 10^5$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The single line contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 15\\,000$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>In the first line print $$$q$$$ ($$$0 \\leq q \\leq 5 \\cdot 10^5$$$)\u00a0\u2014 the number of pairs.</p><p>In each of the next $$$q$$$ lines print two integers. In the $$$i$$$-th line print $$$x_i$$$, $$$y_i$$$ ($$$1 \\leq x_i, y_i \\leq n$$$).</p><p>The condition described in the statement should be satisfied.</p><p>If there exists multiple answers you can print any of them.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1\n1 2\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2\n1 2\n3 4\n</pre></div>"], "p_note": ["<p>In the first example, after performing the only operation the array $$$a$$$ will be $$$[f(a_1, a_2), f(a_1, a_2), a_3]$$$. It will always have at most two different numbers.</p>", "<p>In the second example, after performing two operations the array $$$a$$$ will be $$$[f(a_1, a_2), f(a_1, a_2), f(a_3, a_4), f(a_3, a_4)]$$$. It will always have at most two different numbers.</p>"]},
{"p_id": "1408", "p_index": "G", "p_title": "G. Clusterization Counting", "p_time_limit": "3 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>There are $$$n$$$ computers in the company network. They are numbered from $$$1$$$ to $$$n$$$.</p><p>For each pair of two computers $$$1 \\leq i &lt; j \\leq n$$$ you know the value $$$a_{i,j}$$$: the difficulty of sending data between computers $$$i$$$ and $$$j$$$. All values $$$a_{i,j}$$$ for $$$i&lt;j$$$ are different.</p><p>You want to separate all computers into $$$k$$$ sets $$$A_1, A_2, \\ldots, A_k$$$, such that the following conditions are satisfied: </p><ul> <li> for each computer $$$1 \\leq i \\leq n$$$ there is <span class=\"tex-font-style-bf\">exactly</span> one set $$$A_j$$$, such that $$$i \\in A_j$$$; </li><li> for each two pairs of computers $$$(s, f)$$$ and $$$(x, y)$$$ ($$$s \\neq f$$$, $$$x \\neq y$$$), such that $$$s$$$, $$$f$$$, $$$x$$$ are from the same set but $$$x$$$ and $$$y$$$ are from different sets, $$$a_{s,f} &lt; a_{x,y}$$$. </li></ul><p>For each $$$1 \\leq k \\leq n$$$ find the number of ways to divide computers into $$$k$$$ groups, such that all required conditions are satisfied. These values can be large, so you need to find them by modulo $$$998\\,244\\,353$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 1500$$$): the number of computers.</p><p>The $$$i$$$-th of the next $$$n$$$ lines contains $$$n$$$ integers $$$a_{i,1}, a_{i,2}, \\ldots, a_{i,n}$$$($$$0 \\leq a_{i,j} \\leq \\frac{n (n-1)}{2}$$$).</p><p>It is guaranteed that: </p><ul> <li> for all $$$1 \\leq i \\leq n$$$ $$$a_{i,i} = 0$$$; </li><li> for all $$$1 \\leq i &lt; j \\leq n$$$ $$$a_{i,j} &gt; 0$$$; </li><li> for all $$$1 \\leq i &lt; j \\leq n$$$ $$$a_{i,j} = a_{j,i}$$$; </li><li> all $$$a_{i,j}$$$ for $$$i &lt;j$$$ are different. </li></ul></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print $$$n$$$ integers: the $$$k$$$-th of them should be equal to the number of possible ways to divide computers into $$$k$$$ groups, such that all required conditions are satisfied, modulo $$$998\\,244\\,353$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n0 3 4 6\n3 0 2 1\n4 2 0 5\n6 1 5 0\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1 0 1 1 \n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n7\n0 1 18 15 19 12 21\n1 0 16 13 17 20 14\n18 16 0 2 7 10 9\n15 13 2 0 6 8 11\n19 17 7 6 0 4 5\n12 20 10 8 4 0 3\n21 14 9 11 5 3 0\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1 1 2 3 4 3 1 \n</pre></div>"], "p_note": ["<p>Here are all possible ways to separate all computers into $$$4$$$ groups in the second example:</p>"]},
{"p_id": "1408", "p_index": "H", "p_title": "H. Rainbow Triples", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given a sequence $$$a_1, a_2, \\ldots, a_n$$$ of non-negative integers.</p><p>You need to find the largest number $$$m$$$ of triples $$$(i_1, j_1, k_1)$$$, $$$(i_2, j_2, k_2)$$$, ..., $$$(i_m, j_m, k_m)$$$ such that:</p><ul><li> $$$1 \\leq i_p &lt; j_p &lt; k_p \\leq n$$$ for each $$$p$$$ in $$$1, 2, \\ldots, m$$$;</li><li> $$$a_{i_p} = a_{k_p} = 0$$$, $$$a_{j_p} \\neq 0$$$;</li><li> all $$$a_{j_1}, a_{j_2}, \\ldots, a_{j_m}$$$ are different;</li><li> all $$$i_1, j_1, k_1, i_2, j_2, k_2, \\ldots, i_m, j_m, k_m$$$ are different.</li></ul></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of input contains one integer $$$t$$$ ($$$1 \\leq t \\leq 500\\,000$$$): the number of test cases.</p><p>The first line of each test case contains one integer $$$n$$$ ($$$1 \\leq n \\leq 500\\,000$$$).</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\leq a_i \\leq n$$$).</p><p>The total sum of $$$n$$$ is at most $$$500\\,000$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print one integer $$$m$$$: the largest number of proper triples that you can find.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n8\n1\n1\n2\n0 0\n3\n0 1 0\n6\n0 0 1 2 0 0\n6\n0 1 0 0 1 0\n6\n0 1 3 2 0 0\n6\n0 0 0 0 5 0\n12\n0 1 0 2 2 2 0 0 3 3 4 0\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0\n0\n1\n2\n1\n1\n1\n2\n</pre></div>"], "p_note": ["<p>In the first two test cases, there are not enough elements even for a single triple, so the answer is $$$0$$$.</p>", "<p>In the third test case we can select one triple $$$(1, 2, 3)$$$.</p>", "<p>In the fourth test case we can select two triples $$$(1, 3, 5)$$$ and $$$(2, 4, 6)$$$.</p>", "<p>In the fifth test case we can select one triple $$$(1, 2, 3)$$$. We can't select two triples $$$(1, 2, 3)$$$ and $$$(4, 5, 6)$$$, because $$$a_2 = a_5$$$.</p>"]},
{"p_id": "1408", "p_index": "I", "p_title": "I. Bitwise Magic", "p_time_limit": "6 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given a positive integer $$$k$$$ and an array $$$a_1, a_2, \\ldots, a_n$$$ of non-negative distinct integers not smaller than $$$k$$$ and not greater than $$$2^c-1$$$.</p><p>In each of the next $$$k$$$ seconds, one element is chosen randomly equiprobably out of all $$$n$$$ elements and decreased by $$$1$$$.</p><p>For each integer $$$x$$$, $$$0 \\leq x \\leq 2^c - 1$$$, you need to find the probability that in the end the bitwise XOR of all elements of the array is equal to $$$x$$$. </p><p>Each of these values can be represented as an irreducible fraction $$$\\frac{p}{q}$$$, and you need to find the value of $$$p \\cdot q^{-1}$$$ modulo $$$998\\,244\\,353$$$. </p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of input contains three integers $$$n, k, c$$$ ($$$1 \\leq n \\leq (2^c - k)$$$, $$$1 \\leq k \\leq 16$$$, $$$1 \\leq c \\leq 16$$$).</p><p>The second line contains $$$n$$$ distinct integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$k \\leq a_i \\leq 2^c-1$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print $$$2^c$$$ integers: the probability that the bitwise XOR is equal to $$$x$$$ in the end for $$$x$$$ in $$$\\{0, 1, \\ldots, 2^c-1\\}$$$ modulo $$$998\\,244\\,353$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4 1 3\n1 2 3 4\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0 0 0 748683265 0 499122177 0 748683265 \n</pre></div>"], "p_note": []},
{"p_id": "1409", "p_index": "A", "p_title": "A. Yet Another Two Integers Problem", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given two integers $$$a$$$ and $$$b$$$.</p><p>In one move, you can choose some <span class=\"tex-font-style-bf\">integer</span> $$$k$$$ from $$$1$$$ to $$$10$$$ and add it to $$$a$$$ or subtract it from $$$a$$$. In other words, you choose an integer $$$k \\in [1; 10]$$$ and perform $$$a := a + k$$$ or $$$a := a - k$$$. You may use <span class=\"tex-font-style-bf\">different</span> values of $$$k$$$ in different moves.</p><p>Your task is to find the <span class=\"tex-font-style-bf\">minimum</span> number of moves required to obtain $$$b$$$ from $$$a$$$.</p><p>You have to answer $$$t$$$ independent test cases.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^4$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The only line of the test case contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le 10^9$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print the answer: the minimum number of moves required to obtain $$$b$$$ from $$$a$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n6\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0\n3\n2\n92\n87654322\n9150\n</pre></div>"], "p_note": ["<p>In the first test case of the example, you don't need to do anything.</p>", "<p>In the second test case of the example, the following sequence of moves can be applied: $$$13 \\rightarrow 23 \\rightarrow 32 \\rightarrow 42$$$ (add $$$10$$$, add $$$9$$$, add $$$10$$$).</p>", "<p>In the third test case of the example, the following sequence of moves can be applied: $$$18 \\rightarrow 10 \\rightarrow 4$$$ (subtract $$$8$$$, subtract $$$6$$$).</p>"]},
{"p_id": "1409", "p_index": "C", "p_title": "C. Yet Another Array Restoration", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>We have a secret array. You don't know this array and you have to restore it. However, you know some facts about this array:</p><ul> <li> The array consists of $$$n$$$ <span class=\"tex-font-style-bf\">distinct positive</span> (greater than $$$0$$$) integers. </li><li> The array contains two elements $$$x$$$ and $$$y$$$ (these elements are <span class=\"tex-font-style-bf\">known</span> for you) such that $$$x &lt; y$$$. </li><li> If you sort the array in increasing order (such that $$$a_1 &lt; a_2 &lt; \\ldots &lt; a_n$$$), differences between all adjacent (consecutive) elements are equal (i.e. $$$a_2 - a_1 = a_3 - a_2 = \\ldots = a_n - a_{n-1})$$$. </li></ul><p>It can be proven that such an array always exists under the constraints given below.</p><p>Among all possible arrays that satisfy the given conditions, we ask you to restore one which has the <span class=\"tex-font-style-bf\">minimum possible</span> maximum element. In other words, you have to minimize $$$\\max(a_1, a_2, \\dots, a_n)$$$.</p><p>You have to answer $$$t$$$ independent test cases.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 100$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The only line of the test case contains three integers $$$n$$$, $$$x$$$ and $$$y$$$ ($$$2 \\le n \\le 50$$$; $$$1 \\le x &lt; y \\le 50$$$) \u2014 the length of the array and two elements that are present in the array, respectively.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print the answer: $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$), where $$$a_i$$$ is the $$$i$$$-th element of the required array. If there are several answers, you can print any (it also means that the order of elements doesn't matter).</p><p>It can be proven that such an array always exists under the given constraints.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n5\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1 49 \n20 40 30 50 10\n26 32 20 38 44 50 \n8 23 18 13 3 \n1 10 13 4 19 22 25 16 7 </pre></div>"], "p_note": []},
{"p_id": "1409", "p_index": "B", "p_title": "B. Minimum Product", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given four integers $$$a$$$, $$$b$$$, $$$x$$$ and $$$y$$$. Initially, $$$a \\ge x$$$ and $$$b \\ge y$$$. You can do the following operation <span class=\"tex-font-style-bf\">no more than</span> $$$n$$$ times:</p><ul> <li> Choose either $$$a$$$ or $$$b$$$ and decrease it by one. However, as a result of this operation, value of $$$a$$$ cannot become less than $$$x$$$, and value of $$$b$$$ cannot become less than $$$y$$$. </li></ul><p>Your task is to find the <span class=\"tex-font-style-bf\">minimum</span> possible product of $$$a$$$ and $$$b$$$ ($$$a \\cdot b$$$) you can achieve by applying the given operation no more than $$$n$$$ times.</p><p>You have to answer $$$t$$$ independent test cases.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^4$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The only line of the test case contains five integers $$$a$$$, $$$b$$$, $$$x$$$, $$$y$$$ and $$$n$$$ ($$$1 \\le a, b, x, y, n \\le 10^9$$$). Additional constraint on the input: $$$a \\ge x$$$ and $$$b \\ge y$$$ always holds.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print one integer: the <span class=\"tex-font-style-bf\">minimum</span> possible product of $$$a$$$ and $$$b$$$ ($$$a \\cdot b$$$) you can achieve by applying the given operation no more than $$$n$$$ times.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n70\n77\n177177\n999999999000000000\n999999999\n55\n10\n</pre></div>"], "p_note": ["<p>In the first test case of the example, you need to decrease $$$b$$$ three times and obtain $$$10 \\cdot 7 = 70$$$.</p>", "<p>In the second test case of the example, you need to decrease $$$a$$$ one time, $$$b$$$ one time and obtain $$$11 \\cdot 7 = 77$$$.</p>", "<p>In the sixth test case of the example, you need to decrease $$$a$$$ five times and obtain $$$5 \\cdot 11 = 55$$$.</p>", "<p>In the seventh test case of the example, you need to decrease $$$b$$$ ten times and obtain $$$10 \\cdot 1 = 10$$$.</p>"]},
{"p_id": "1409", "p_index": "D", "p_title": "D. Decrease the Sum of Digits", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given a positive integer $$$n$$$. In one move, you can increase $$$n$$$ by one (i.e. make $$$n := n + 1$$$). Your task is to find the minimum number of moves you need to perform in order to make the sum of digits of $$$n$$$ be less than or equal to $$$s$$$.</p><p>You have to answer $$$t$$$ independent test cases.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^4$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The only line of the test case contains two integers $$$n$$$ and $$$s$$$ ($$$1 \\le n \\le 10^{18}$$$; $$$1 \\le s \\le 162$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print the answer: the minimum number of moves you need to perform in order to make the sum of digits of $$$n$$$ be less than or equal to $$$s$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n5\n2 1\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n8\n0\n500\n2128012501878\n899999999999999999\n</pre></div>"], "p_note": []},
{"p_id": "1409", "p_index": "F", "p_title": "F. Subsequences of Length Two", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given two strings $$$s$$$ and $$$t$$$ consisting of lowercase Latin letters. The length of $$$t$$$ is $$$2$$$ (i.e. this string consists only of two characters).</p><p>In one move, you can choose <span class=\"tex-font-style-bf\">any</span> character of $$$s$$$ and replace it with <span class=\"tex-font-style-bf\">any</span> lowercase Latin letter. More formally, you choose some $$$i$$$ and replace $$$s_i$$$ (the character at the position $$$i$$$) with some character from '<span class=\"tex-font-style-tt\">a</span>' to '<span class=\"tex-font-style-tt\">z</span>'.</p><p>You want to do <span class=\"tex-font-style-bf\">no more than</span> $$$k$$$ replacements in such a way that <span class=\"tex-font-style-bf\">maximizes</span> the number of occurrences of $$$t$$$ in $$$s$$$ as a <span class=\"tex-font-style-bf\">subsequence</span>.</p><p>Recall that a subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 200$$$; $$$0 \\le k \\le n$$$) \u2014 the length of $$$s$$$ and the maximum number of moves you can make. The second line of the input contains the string $$$s$$$ consisting of $$$n$$$ lowercase Latin letters. The third line of the input contains the string $$$t$$$ consisting of two lowercase Latin letters.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print one integer \u2014 the maximum possible number of occurrences of $$$t$$$ in $$$s$$$ as a <span class=\"tex-font-style-bf\">subsequence</span> if you replace no more than $$$k$$$ characters in $$$s$$$ optimally.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4 2\nbbaa\nab\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n3\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n7 3\nasddsaf\nsd\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n10\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n15 6\nqwertyhgfdsazxc\nqa\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n16\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n7 2\nabacaba\naa\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n15\n</pre></div>"], "p_note": ["<p>In the first example, you can obtain the string \"<span class=\"tex-font-style-tt\">abab</span>\" replacing $$$s_1$$$ with '<span class=\"tex-font-style-tt\">a</span>' and $$$s_4$$$ with '<span class=\"tex-font-style-tt\">b</span>'. Then the answer is $$$3$$$.</p>", "<p>In the second example, you can obtain the string \"<span class=\"tex-font-style-tt\">ssddsdd</span>\" and get the answer $$$10$$$.</p>", "<p>In the fourth example, you can obtain the string \"<span class=\"tex-font-style-tt\">aaacaaa</span>\" and get the answer $$$15$$$.</p>"]},
{"p_id": "1409", "p_index": "E", "p_title": "E. Two Platforms", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>There are $$$n$$$ points on a plane. The $$$i$$$-th point has coordinates $$$(x_i, y_i)$$$. You have two horizontal platforms, both of length $$$k$$$. Each platform can be placed anywhere on a plane but it should be placed <span class=\"tex-font-style-bf\">horizontally</span> (on the same $$$y$$$-coordinate) and have <span class=\"tex-font-style-bf\">integer borders</span>. If the left border of the platform is $$$(x, y)$$$ then the right border is $$$(x + k, y)$$$ and all points between borders (including borders) belong to the platform.</p><p>Note that platforms can share common points (overlap) and it is not necessary to place both platforms on the same $$$y$$$-coordinate.</p><p>When you place both platforms on a plane, all points start falling down decreasing their $$$y$$$-coordinate. If a point collides with some platform at some moment, the point stops and is <span class=\"tex-font-style-bf\">saved</span>. Points which never collide with any platform are lost.</p><p>Your task is to find the maximum number of points you can <span class=\"tex-font-style-bf\">save</span> if you place both platforms optimally.</p><p>You have to answer $$$t$$$ independent test cases.</p><p>For better understanding, please read the <span class=\"tex-font-style-bf\">Note</span> section below to see a picture for the first test case.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^4$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The first line of the test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$; $$$1 \\le k \\le 10^9$$$) \u2014 the number of points and the length of each platform, respectively. The second line of the test case contains $$$n$$$ integers $$$x_1, x_2, \\dots, x_n$$$ ($$$1 \\le x_i \\le 10^9$$$), where $$$x_i$$$ is $$$x$$$-coordinate of the $$$i$$$-th point. The third line of the input contains $$$n$$$ integers $$$y_1, y_2, \\dots, y_n$$$ ($$$1 \\le y_i \\le 10^9$$$), where $$$y_i$$$ is $$$y$$$-coordinate of the $$$i$$$-th point. All points are distinct (there is no pair $$$1 \\le i &lt; j \\le n$$$ such that $$$x_i = x_j$$$ and $$$y_i = y_j$$$).</p><p>It is guaranteed that the sum of $$$n$$$ does not exceed $$$2 \\cdot 10^5$$$ ($$$\\sum n \\le 2 \\cdot 10^5$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print the answer: the maximum number of points you can save if you place both platforms optimally.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n7 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\n20 199 192 219 1904\n10 10\n15 19 8 17 20 10 9 2 10 19\n12 13 6 17 1 14 7 9 19 3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n6\n1\n5\n10\n</pre></div>"], "p_note": ["<p>The picture corresponding to the first test case of the example:</p>", "<p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/8a3aa078020926a84255072419871610d7b6a31f.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"></p>", "<p>Blue dots represent the points, red segments represent the platforms. One of the possible ways is to place the first platform between points $$$(1, -1)$$$ and $$$(2, -1)$$$ and the second one between points $$$(4, 3)$$$ and $$$(5, 3)$$$. Vectors represent how the points will fall down. As you can see, the only point we can't save is the point $$$(3, 7)$$$ so it falls down infinitely and will be lost. It can be proven that we can't achieve better answer here. Also note that the point $$$(5, 3)$$$ doesn't fall at all because it is already on the platform.</p>"]},
{"p_id": "1416", "p_index": "A", "p_title": "A. k-Amazing Numbers", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given an array $$$a$$$ consisting of $$$n$$$ integers numbered from $$$1$$$ to $$$n$$$.</p><p>Let's define the $$$k$$$-amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length $$$k$$$ (recall that a subsegment of $$$a$$$ of length $$$k$$$ is a contiguous part of $$$a$$$ containing exactly $$$k$$$ elements). If there is no integer occuring in all subsegments of length $$$k$$$ for some value of $$$k$$$, then the $$$k$$$-amazing number is $$$-1$$$.</p><p>For each $$$k$$$ from $$$1$$$ to $$$n$$$ calculate the $$$k$$$-amazing number of the array $$$a$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 1000$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The first line of each test case contains one integer $$$n$$$ ($$$1 \\le n \\le 3 \\cdot 10^5$$$) \u2014 the number of elements in the array. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le n$$$) \u2014 the elements of the array. </p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3 \\cdot 10^5$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case print $$$n$$$ integers, where the $$$i$$$-th integer is equal to the $$$i$$$-amazing number of the array.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n5\n1 2 3 4 5\n5\n4 4 4 4 2\n6\n1 3 1 5 3 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n-1 -1 3 2 1 \n-1 4 4 4 2 \n-1 -1 1 1 1 1 \n</pre></div>"], "p_note": []},
{"p_id": "1406", "p_index": "D", "p_title": "D. Three Sequences", "p_time_limit": "2 seconds", "p_memory_limit": "512 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given a sequence of $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$.</p><p>You have to construct two sequences of integers $$$b$$$ and $$$c$$$ with length $$$n$$$ that satisfy:</p><ul> <li> for every $$$i$$$ ($$$1\\leq i\\leq n$$$) $$$b_i+c_i=a_i$$$ </li><li> $$$b$$$ is non-decreasing, which means that for every $$$1&lt;i\\leq n$$$, $$$b_i\\geq b_{i-1}$$$ must hold </li><li> $$$c$$$ is non-increasing, which means that for every $$$1&lt;i\\leq n$$$, $$$c_i\\leq c_{i-1}$$$ must hold </li></ul><p>You have to minimize $$$\\max(b_i,c_i)$$$. In other words, you have to minimize the maximum number in sequences $$$b$$$ and $$$c$$$.</p><p>Also there will be $$$q$$$ changes, the $$$i$$$-th change is described by three integers $$$l,r,x$$$. You should add $$$x$$$ to $$$a_l,a_{l+1}, \\ldots, a_r$$$. </p><p>You have to find the minimum possible value of $$$\\max(b_i,c_i)$$$ for the initial sequence and for sequence after each change.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains an integer $$$n$$$ ($$$1\\leq n\\leq 10^5$$$).</p><p>The secound line contains $$$n$$$ integers $$$a_1,a_2,\\ldots,a_n$$$ ($$$1\\leq i\\leq n$$$, $$$-10^9\\leq a_i\\leq 10^9$$$).</p><p>The third line contains an integer $$$q$$$ ($$$1\\leq q\\leq 10^5$$$).</p><p>Each of the next $$$q$$$ lines contains three integers $$$l,r,x$$$ ($$$1\\leq l\\leq r\\leq n,-10^9\\leq x\\leq 10^9$$$), desribing the next change. </p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print $$$q+1$$$ lines.</p><p>On the $$$i$$$-th ($$$1 \\leq i \\leq q+1$$$) line, print the answer to the problem for the sequence after $$$i-1$$$ changes.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n2 -1 7 3\n2\n2 4 -3\n3 4 2\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n5\n5\n6\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n6\n-9 -10 -9 -6 -5 4\n3\n2 6 -9\n1 2 -10\n4 6 -3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n3\n3\n3\n1\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n1\n0\n2\n1 1 -1\n1 1 -1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0\n0\n-1\n</pre></div>"], "p_note": ["<p>In the first test:</p>"]},
{"p_id": "1416", "p_index": "C", "p_title": "C. XOR Inverse", "p_time_limit": "2 seconds", "p_memory_limit": "512 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given an array $$$a$$$ consisting of $$$n$$$ non-negative integers. You have to choose a non-negative integer $$$x$$$ and form a new array $$$b$$$ of size $$$n$$$ according to the following rule: for all $$$i$$$ from $$$1$$$ to $$$n$$$, $$$b_i = a_i \\oplus x$$$ ($$$\\oplus$$$ denotes the operation <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#XOR\">bitwise XOR</a>).</p><p>An inversion in the $$$b$$$ array is a pair of integers $$$i$$$ and $$$j$$$ such that $$$1 \\le i &lt; j \\le n$$$ and $$$b_i &gt; b_j$$$.</p><p>You should choose $$$x$$$ in such a way that the number of inversions in $$$b$$$ is minimized. If there are several options for $$$x$$$ \u2014 output the smallest one.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>First line contains a single integer $$$n$$$ ($$$1 \\le n \\le 3 \\cdot 10^5$$$) \u2014 the number of elements in $$$a$$$.</p><p>Second line contains $$$n$$$ space-separated integers $$$a_1$$$, $$$a_2$$$, ..., $$$a_n$$$ ($$$0 \\le a_i \\le 10^9$$$), where $$$a_i$$$ is the $$$i$$$-th element of $$$a$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output two integers: the minimum possible number of inversions in $$$b$$$, and the minimum possible value of $$$x$$$, which achieves those number of inversions.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n0 1 3 2\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1 0\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n9\n10 7 9 10 7 5 5 3 5\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n4 14\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n8 10 3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0 8\n</pre></div>"], "p_note": ["<p>In the first sample it is optimal to leave the array as it is by choosing $$$x = 0$$$.</p>", "<p>In the second sample the selection of $$$x = 14$$$ results in $$$b$$$: $$$[4, 9, 7, 4, 9, 11, 11, 13, 11]$$$. It has $$$4$$$ inversions:</p>", "<p>In the third sample the selection of $$$x = 8$$$ results in $$$b$$$: $$$[0, 2, 11]$$$. It has no inversions.</p>"]},
{"p_id": "1416", "p_index": "B", "p_title": "B. Make Them Equal", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given an array $$$a$$$ consisting of $$$n$$$ <span class=\"tex-font-style-bf\">positive</span> integers, numbered from $$$1$$$ to $$$n$$$. You can perform the following operation no more than $$$3n$$$ times:</p><ol> <li> choose three integers $$$i$$$, $$$j$$$ and $$$x$$$ ($$$1 \\le i, j \\le n$$$; $$$0 \\le x \\le 10^9$$$); </li><li> assign $$$a_i := a_i - x \\cdot i$$$, $$$a_j := a_j + x \\cdot i$$$. </li></ol><p>After each operation, all elements of the array should be <span class=\"tex-font-style-bf\">non-negative</span>.</p><p>Can you find a sequence of no more than $$$3n$$$ operations after which all elements of the array are equal?</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The first line of each test case contains one integer $$$n$$$ ($$$1 \\le n \\le 10^4$$$) \u2014 the number of elements in the array. The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^5$$$) \u2014 the elements of the array.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^4$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case print the answer to it as follows:</p><ul> <li> if there is no suitable sequence of operations, print $$$-1$$$; </li><li> otherwise, print one integer $$$k$$$ ($$$0 \\le k \\le 3n$$$) \u2014 the number of operations in the sequence. Then print $$$k$$$ lines, the $$$m$$$-th of which should contain three integers $$$i$$$, $$$j$$$ and $$$x$$$ ($$$1 \\le i, j \\le n$$$; $$$0 \\le x \\le 10^9$$$) for the $$$m$$$-th operation. </li></ul><p>If there are multiple suitable sequences of operations, print any of them. Note that you don't have to minimize $$$k$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n4\n2 16 4 18\n6\n1 2 3 4 5 6\n5\n11 19 1 1 3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2\n4 1 2\n2 3 3\n-1\n4\n1 2 4\n2 4 5\n2 3 3\n4 5 1\n</pre></div>"], "p_note": []},
{"p_id": "1416", "p_index": "D", "p_title": "D. Graph and Queries", "p_time_limit": "1.5 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given an undirected graph consisting of $$$n$$$ vertices and $$$m$$$ edges. Initially there is a single integer written on every vertex: the vertex $$$i$$$ has $$$p_i$$$ written on it. All $$$p_i$$$ are distinct integers from $$$1$$$ to $$$n$$$.</p><p>You have to process $$$q$$$ queries of two types:</p><ul> <li> $$$1$$$ $$$v$$$ \u2014 among all vertices reachable from the vertex $$$v$$$ using the edges of the graph (including the vertex $$$v$$$ itself), find a vertex $$$u$$$ with the largest number $$$p_u$$$ written on it, print $$$p_u$$$ and replace $$$p_u$$$ with $$$0$$$; </li><li> $$$2$$$ $$$i$$$ \u2014 delete the $$$i$$$-th edge from the graph. </li></ul> <p>Note that, in a query of the first type, it is possible that all vertices reachable from $$$v$$$ have $$$0$$$ written on them. In this case, $$$u$$$ is not explicitly defined, but since the selection of $$$u$$$ does not affect anything, you can choose any vertex reachable from $$$v$$$ and print its value (which is $$$0$$$). </p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains three integers $$$n$$$, $$$m$$$ and $$$q$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$; $$$1 \\le m \\le 3 \\cdot 10^5$$$; $$$1 \\le q \\le 5 \\cdot 10^5$$$).</p><p>The second line contains $$$n$$$ distinct integers $$$p_1$$$, $$$p_2$$$, ..., $$$p_n$$$, where $$$p_i$$$ is the number initially written on vertex $$$i$$$ ($$$1 \\le p_i \\le n$$$).</p><p>Then $$$m$$$ lines follow, the $$$i$$$-th of them contains two integers $$$a_i$$$ and $$$b_i$$$ ($$$1 \\le a_i, b_i \\le n$$$, $$$a_i \\ne b_i$$$) and means that the $$$i$$$-th edge connects vertices $$$a_i$$$ and $$$b_i$$$. It is guaranteed that the graph does not contain multi-edges.</p><p>Then $$$q$$$ lines follow, which describe the queries. Each line is given by one of the following formats:</p><ul> <li> $$$1$$$ $$$v$$$ \u2014 denotes a query of the first type with a vertex $$$v$$$ ($$$1 \\le v \\le n$$$). </li><li> $$$2$$$ $$$i$$$ \u2014 denotes a query of the second type with an edge $$$i$$$ ($$$1 \\le i \\le m$$$). For each query of the second type, it is guaranteed that the corresponding edge is not deleted from the graph yet. </li></ul></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For every query of the first type, print the value of $$$p_u$$$ written on the chosen vertex $$$u$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n5 4 6\n1 2 5 4 3\n1 2\n2 3\n1 3\n4 5\n1 1\n2 1\n2 3\n1 1\n1 2\n1 2\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n5\n1\n2\n0\n</pre></div>"], "p_note": []},
{"p_id": "1385", "p_index": "F", "p_title": "F. Removing Leaves", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given a tree (connected graph without cycles) consisting of $$$n$$$ vertices. The tree is unrooted \u2014 it is just a connected undirected graph without cycles.</p><p>In one move, you can choose exactly $$$k$$$ leaves (leaf is such a vertex that is connected to only one another vertex) connected <span class=\"tex-font-style-bf\">to the same vertex</span> and remove them with edges incident to them. I.e. you choose such leaves $$$u_1, u_2, \\dots, u_k$$$ that there are edges $$$(u_1, v)$$$, $$$(u_2, v)$$$, $$$\\dots$$$, $$$(u_k, v)$$$ and remove these leaves and these edges.</p><p>Your task is to find the <span class=\"tex-font-style-bf\">maximum</span> number of moves you can perform if you remove leaves optimally.</p><p>You have to answer $$$t$$$ independent test cases.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^4$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The first line of the test case contains two integers $$$n$$$ and $$$k$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$; $$$1 \\le k &lt; n$$$) \u2014 the number of vertices in the tree and the number of leaves you remove in one move, respectively. The next $$$n-1$$$ lines describe edges. The $$$i$$$-th edge is represented as two integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \\le x_i, y_i \\le n$$$), where $$$x_i$$$ and $$$y_i$$$ are vertices the $$$i$$$-th edge connects. It is guaranteed that the given set of edges forms a tree.</p><p>It is guaranteed that the sum of $$$n$$$ does not exceed $$$2 \\cdot 10^5$$$ ($$$\\sum n \\le 2 \\cdot 10^5$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print the answer \u2014 the <span class=\"tex-font-style-bf\">maximum</span> number of moves you can perform if you remove leaves optimally.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n8 3\n1 2\n1 5\n7 6\n6 8\n3 1\n6 4\n6 1\n10 3\n1 2\n1 10\n2 3\n1 5\n1 6\n2 4\n7 10\n10 9\n8 10\n7 2\n3 1\n4 5\n3 6\n7 4\n1 2\n1 4\n5 1\n1 2\n2 3\n4 3\n5 3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2\n3\n3\n4\n</pre></div>"], "p_note": ["<p>The picture corresponding to the first test case of the example:</p>", "<p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/0bddde0ad7a72c3fe0c29dcad146b0e4dd2377e0.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"></p>", "<p>There you can remove vertices $$$2$$$, $$$5$$$ and $$$3$$$ during the first move and vertices $$$1$$$, $$$7$$$ and $$$4$$$ during the second move.</p>", "<p>The picture corresponding to the second test case of the example:</p>", "<p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/9eb6a60c7e0f6cb16954aa764b874aac2c2fad3b.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"></p>", "<p>There you can remove vertices $$$7$$$, $$$8$$$ and $$$9$$$ during the first move, then vertices $$$5$$$, $$$6$$$ and $$$10$$$ during the second move and vertices $$$1$$$, $$$3$$$ and $$$4$$$ during the third move.</p>", "<p>The picture corresponding to the third test case of the example:</p>", "<p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/0b9706f8a0726debc42a044a46f0e4f5b98ab39f.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"></p>", "<p>There you can remove vertices $$$5$$$ and $$$7$$$ during the first move, then vertices $$$2$$$ and $$$4$$$ during the second move and vertices $$$1$$$ and $$$6$$$ during the third move.</p>"]},
{"p_id": "1386", "p_index": "B", "p_title": "B. Mixture", "p_time_limit": "2.5 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Serge, the chef of the famous restaurant \"Salt, Pepper &amp; Garlic\" is trying to obtain his first Michelin star. He has been informed that a secret expert plans to visit his restaurant this evening.</p><p>Even though the expert's name hasn't been disclosed, Serge is certain he knows which dish from the menu will be ordered as well as what the taste preferences of the expert are. Namely, the expert requires an extremely precise proportion of salt, pepper and garlic powder in his dish.</p><p>Serge keeps a set of bottles with mixtures of salt, pepper and garlic powder on a special shelf in the kitchen. For each bottle, he knows the exact amount of each of the ingredients in kilograms. Serge can combine any number of bottled mixtures (or just use one of them directly) to get a mixture of particular proportions needed for a certain dish.</p><p>Luckily, the absolute amount of a mixture that needs to be added to a dish is so small that you can assume that the amounts in the bottles will always be sufficient. However, the numeric values describing the proportions may be quite large.</p><p>Serge would like to know whether it is possible to obtain the expert's favourite mixture from the available bottles, and if so\u2014what is the smallest possible number of bottles needed to achieve that.</p><p>Furthermore, the set of bottles on the shelf may change over time as Serge receives new ones or lends his to other chefs. So he would like to answer this question after each such change.</p><p>For example, assume that expert's favorite mixture is $$$1:1:1$$$ and there are three bottles of mixtures on the shelf:</p><center> $$$$$$ \\begin{array}{cccc} \\hline \\text{Mixture} &amp; \\text{Salt} &amp; \\text{Pepper} &amp; \\text{Garlic powder} \\\\ \\hline 1 &amp; 10 &amp; 20 &amp; 30 \\\\ 2 &amp; 300 &amp; 200 &amp; 100 \\\\ 3 &amp; 12 &amp; 15 &amp; 27 \\\\ \\hline \\end{array} $$$$$$ Amount of ingredient in the bottle, kg </center><p>To obtain the desired mixture it is enough to use an equivalent amount of mixtures from bottles 1 and 2. If bottle 2 is removed, then it is no longer possible to obtain it.</p><p>Write a program that helps Serge to solve this task!</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first row contains three non-negative integers $$$S_f$$$, $$$P_f$$$ and $$$G_f$$$ ($$$0 \\leq S_f, P_f, G_f$$$; $$$0 &lt; S_f+P_f+G_f \\leq 10^6$$$) describing the amount of salt, pepper and garlic powder in the expert's favourite mixture. For any real $$$\\alpha&gt;0$$$, $$$(\\alpha{S_f}, \\alpha{P_f}, \\alpha{G_f})$$$ also is an expert's favourite mixture.</p><p>In the second row, there is a positive integer $$$N$$$ (number of changes on the shelf, $$$N \\leq 100\\,000$$$). You should assume that initially the shelf is empty.</p><p>Each of the next $$$N$$$ rows describes a single change on the shelf: </p><ul> <li> If a new bottle is added, the row contains capital letter $$$A$$$ followed by three non-negative integers $$$S_i$$$, $$$P_i$$$ and $$$G_i$$$ ($$$0 \\leq S_i, P_i, G_i$$$; $$$0 &lt; S_i+P_i+G_i \\leq 10^6$$$) describing the amount of salt, pepper and garlic powder in the added bottle. Added bottles are numbered consecutively by unique integers starting from $$$1$$$, that is, the $$$i$$$-th bottle corresponds to the $$$i$$$-th added bottle in the input data. </li><li> If a particular bottle is removed from the shelf, the row contains capital letter $$$R$$$ followed by the integer\u2014the bottle number $$$r_i$$$. All values $$$r_i$$$ in the removals are unique, $$$r_i$$$ never exceeds total number of bottles added thus far. </li></ul></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output $$$N$$$ rows. The $$$j$$$-th row ($$$1 \\leq j \\leq N$$$) should contain the number $$$x_j$$$, the smallest number of bottles needed to prepare a mixture with the expert's favourite proportions of salt, pepper and garlic powder using the bottles available after the first $$$j$$$ changes on the shelf, or $$$0$$$ if it is not possible.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n1 2 3\n6\nA 5 6 7\nA 3 10 17\nR 1\nA 15 18 21\nA 5 10 15\nR 3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0\n2\n0\n2\n1\n1\n</pre></div>"], "p_note": ["<p>Pay attention that in the example, bottles $$$1$$$ and $$$3$$$ contain the same proportions of salt, pepper and garlic powder.</p>"]},
{"p_id": "1385", "p_index": "G", "p_title": "G. Columns Swaps", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given a table $$$a$$$ of size $$$2 \\times n$$$ (i.e. two rows and $$$n$$$ columns) consisting of integers from $$$1$$$ to $$$n$$$.</p><p>In one move, you can choose some <span class=\"tex-font-style-bf\">column</span> $$$j$$$ ($$$1 \\le j \\le n$$$) and swap values $$$a_{1, j}$$$ and $$$a_{2, j}$$$ in it. Each column can be chosen <span class=\"tex-font-style-bf\">no more than once</span>.</p><p>Your task is to find the <span class=\"tex-font-style-bf\">minimum</span> number of moves required to obtain permutations of size $$$n$$$ in both first and second rows of the table or determine if it is impossible to do that.</p><p>You have to answer $$$t$$$ independent test cases.</p><p>Recall that the permutation of size $$$n$$$ is such an array of size $$$n$$$ that contains <span class=\"tex-font-style-it\">each integer</span> from $$$1$$$ to $$$n$$$ exactly once (the order of elements doesn't matter).</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^4$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The first line of the test case contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) \u2014 the number of columns in the table. The second line of the test case contains $$$n$$$ integers $$$a_{1, 1}, a_{1, 2}, \\dots, a_{1, n}$$$ ($$$1 \\le a_{1, i} \\le n$$$), where $$$a_{1, i}$$$ is the $$$i$$$-th element of the first row of the table. The third line of the test case contains $$$n$$$ integers $$$a_{2, 1}, a_{2, 2}, \\dots, a_{2, n}$$$ ($$$1 \\le a_{2, i} \\le n$$$), where $$$a_{2, i}$$$ is the $$$i$$$-th element of the second row of the table.</p><p>It is guaranteed that the sum of $$$n$$$ does not exceed $$$2 \\cdot 10^5$$$ ($$$\\sum n \\le 2 \\cdot 10^5$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case print the answer: <span class=\"tex-font-style-tt\">-1</span> if it is impossible to obtain permutation of size $$$n$$$ in both first and the second rows of the table, or one integer $$$k$$$ in the first line, where $$$k$$$ is the <span class=\"tex-font-style-bf\">minimum</span> number of moves required to obtain permutations in both rows, and $$$k$$$ <span class=\"tex-font-style-it\">distinct</span> integers $$$pos_1, pos_2, \\dots, pos_k$$$ in the second line ($$$1 \\le pos_i \\le n$$$) in <span class=\"tex-font-style-it\">any order</span> \u2014 indices of columns in which you need to swap values to obtain permutations in both rows. If there are several answers, you can print any.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n6\n4\n1 2 3 4\n2 3 1 4\n5\n5 3 5 1 4\n1 2 3 2 4\n3\n1 2 1\n3 3 2\n4\n1 2 2 1\n3 4 3 4\n4\n4 3 1 4\n3 2 2 1\n3\n1 1 2\n3 2 2\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0\n\n2\n2 3 \n1\n1 \n2\n3 4 \n2\n3 4 \n-1\n</pre></div>"], "p_note": []},
{"p_id": "1386", "p_index": "C", "p_title": "C. Joker", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Joker returns to Gotham City to execute another evil plan. In Gotham City, there are $$$N$$$ street junctions (numbered from $$$1$$$ to $$$N$$$) and $$$M$$$ streets (numbered from $$$1$$$ to $$$M$$$). Each street connects two distinct junctions, and two junctions are connected by at most one street.</p><p>For his evil plan, Joker needs to use an odd number of streets that together form a cycle. That is, for a junction $$$S$$$ and an <span class=\"tex-font-style-bf\">even</span> positive integer $$$k$$$, there is a sequence of junctions $$$S, s_1, \\ldots, s_k, S$$$ such that there are streets connecting (a) $$$S$$$ and $$$s_1$$$, (b) $$$s_k$$$ and $$$S$$$, and (c) $$$s_{i-1}$$$ and $$$s_i$$$ for each $$$i = 2, \\ldots, k$$$.</p><p>However, the police are controlling the streets of Gotham City. On each day $$$i$$$, they monitor a different subset of all streets with consecutive numbers $$$j$$$: $$$l_i \\leq j \\leq r_i$$$. These monitored streets cannot be a part of Joker's plan, of course. Unfortunately for the police, Joker has spies within the Gotham City Police Department; they tell him which streets are monitored on which day. Now Joker wants to find out, for some given number of days, whether he can execute his evil plan. On such a day there must be a cycle of streets, consisting of an odd number of streets which are not monitored on that day.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains three integers $$$N$$$, $$$M$$$, and $$$Q$$$ ($$$1 \\leq N, M, Q \\leq 200\\,000$$$): the number of junctions, the number of streets, and the number of days to be investigated. The following $$$M$$$ lines describe the streets. The $$$j$$$-th of these lines ($$$1 \\le j \\le M$$$) contains two junction numbers $$$u$$$ and $$$v$$$ ($$$u \\neq v$$$), saying that street $$$j$$$ connects these two junctions. It is guaranteed that any two junctions are connected by at most one street. The following $$$Q$$$ lines contain two integers $$$l_i$$$ and $$$r_i$$$, saying that all streets $$$j$$$ with $$$l_i \\leq j \\leq r_i$$$ are checked by the police on day $$$i$$$ ($$$1 \\leq i \\leq Q$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Your output is to contain $$$Q$$$ lines. Line $$$i$$$ ($$$1 \\leq i \\leq Q$$$) contains \"<span class=\"tex-font-style-tt\">YES</span>\" if Joker can execute his plan on day $$$i$$$, or \"<span class=\"tex-font-style-tt\">NO</span>\" otherwise.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n6 8 2\n1 3\n1 5\n1 6\n2 5\n2 6\n3 4\n3 5\n5 6\n4 8\n4 7\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nNO\nYES\n</pre></div>"], "p_note": ["<p>The graph in the example test: </p>"]},
{"p_id": "1387", "p_index": "A", "p_title": "A. Graph", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given an undirected graph where each edge has one of two colors: black or red.</p><p>Your task is to assign a real number to each node so that: </p><ul> <li> for each black edge the sum of values at its endpoints is $$$1$$$; </li><li> for each red edge the sum of values at its endpoints is $$$2$$$; </li><li> the sum of the absolute values of all assigned numbers is the smallest possible. </li></ul><p>Otherwise, if it is not possible, report that there is no feasible assignment of the numbers.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains two integers $$$N$$$ ($$$1 \\leq N \\leq 100\\,000$$$) and $$$M$$$ ($$$0 \\leq M \\leq 200\\,000$$$): the number of nodes and the number of edges, respectively. The nodes are numbered by consecutive integers: $$$1, 2, \\ldots, N$$$.</p><p>The next $$$M$$$ lines describe the edges. Each line contains three integers $$$a$$$, $$$b$$$ and $$$c$$$ denoting that there is an edge between nodes $$$a$$$ and $$$b$$$ ($$$1 \\leq a, b \\leq N$$$) with color $$$c$$$ ($$$1$$$ denotes black, $$$2$$$ denotes red).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>If there is a solution, the first line should contain the word \"<span class=\"tex-font-style-tt\">YES</span>\" and the second line should contain $$$N$$$ space-separated numbers. For each $$$i$$$ ($$$1 \\le i \\le N$$$), the $$$i$$$-th number should be the number assigned to the node $$$i$$$.</p><p>Output should be such that: </p><ul> <li> the sum of the numbers at the endpoints of each edge differs from the precise value by less than $$$10^{-6}$$$; </li><li> the sum of the absolute values of all assigned numbers differs from the smallest possible by less than $$$10^{-6}$$$. </li></ul><p>If there are several valid solutions, output any of them.</p><p>If there is no solution, the only line should contain the word \"<span class=\"tex-font-style-tt\">NO</span>\".</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4 4\n1 2 1\n2 3 2\n1 3 2\n3 4 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nYES\n0.5 0.5 1.5 -0.5\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n2 1\n1 2 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nYES\n0.3 0.7</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n3 2\n1 2 2\n2 3 2\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nYES\n0 2 0\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n3 4\n1 2 2\n2 2 1\n2 1 1\n1 2 2\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nNO\n</pre></div>"], "p_note": ["<p>Note that in the second example the solution is not unique.</p>"]},
{"p_id": "1387", "p_index": "B1", "p_title": "B1. Village (Minimum)", "p_time_limit": "0.75 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-bf\">This problem is split into two tasks. In this task, you are required to find the <span class=\"tex-font-style-it\">minimum</span> possible answer. In the task Village (Maximum) you are required to find the <span class=\"tex-font-style-it\">maximum</span> possible answer. Each task is worth $$$50$$$ points.</span></p><p>There are $$$N$$$ houses in a certain village. A single villager lives in each of the houses. The houses are connected by roads. Each road connects two houses and is exactly $$$1$$$ kilometer long. From each house it is possible to reach any other using one or several consecutive roads. In total there are $$$N-1$$$ roads in the village.</p><p>One day all villagers decided to move to different houses \u2014 that is, after moving each house should again have a single villager living in it, but no villager should be living in the same house as before. We would like to know the smallest possible total length in kilometers of the shortest paths between the old and the new houses for all villagers.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/dde7d9ac9e668121cdfc76f7d4e0a33ebc1152e5.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"><p>Example village with seven houses </p></center><p>For example, if there are seven houses connected by roads as shown on the figure, the smallest total length is $$$8$$$ km (this can be achieved by moving $$$1 \\to 6$$$, $$$2 \\to 4$$$, $$$3 \\to 1$$$, $$$4 \\to 2$$$, $$$5 \\to 7$$$, $$$6 \\to 3$$$, $$$7 \\to 5$$$).</p><p>Write a program that finds the smallest total length of the shortest paths in kilometers and an example assignment of the new houses to the villagers.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains an integer $$$N$$$ ($$$1 &lt; N \\le 10^5$$$). Houses are numbered by consecutive integers $$$1, 2, \\ldots, N$$$.</p><p>Then $$$N-1$$$ lines follow that describe the roads. Each line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le N$$$, $$$a \\neq b$$$) denoting that there is a road connecting houses $$$a$$$ and $$$b$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>In the first line output the smallest total length of the shortest paths in kilometers.</p><p>In the second line describe one valid assignment of the new houses with the smallest total length: $$$N$$$ space-separated distinct integers $$$v_1, v_2, \\ldots, v_N$$$. For each $$$i$$$, $$$v_i$$$ is the house number where the villager from the house $$$i$$$ should move ($$$v_i \\neq i$$$). If there are several valid assignments, output any of those.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n1 2\n2 3\n3 4\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n4\n2 1 4 3\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n7\n4 2\n5 7\n3 4\n6 3\n1 3\n4 5\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n8\n3 4 6 2 7 1 5\n</pre></div>"], "p_note": []},
{"p_id": "1387", "p_index": "B2", "p_title": "B2. Village (Maximum)", "p_time_limit": "0.75 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-bf\">This problem is split into two tasks. In this task, you are required to find the <span class=\"tex-font-style-it\">maximum</span> possible answer. In the task Village (Minimum) you are required to find the <span class=\"tex-font-style-it\">minimum</span> possible answer. Each task is worth $$$50$$$ points.</span></p><p>There are $$$N$$$ houses in a certain village. A single villager lives in each of the houses. The houses are connected by roads. Each road connects two houses and is exactly $$$1$$$ kilometer long. From each house it is possible to reach any other using one or several consecutive roads. In total there are $$$N-1$$$ roads in the village.</p><p>One day all villagers decided to move to different houses \u2014 that is, after moving each house should again have a single villager living in it, but no villager should be living in the same house as before. We would like to know the largest possible total length in kilometers of the shortest paths between the old and the new houses for all villagers.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/dde7d9ac9e668121cdfc76f7d4e0a33ebc1152e5.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"><p>Example village with seven houses </p></center><p>For example, if there are seven houses connected by roads as shown on the figure, the largest total length is $$$18$$$ km (this can be achieved by moving $$$1 \\to 7$$$, $$$2 \\to 3$$$, $$$3 \\to 4$$$, $$$4 \\to 1$$$, $$$5 \\to 2$$$, $$$6 \\to 5$$$, $$$7 \\to 6$$$).</p><p>Write a program that finds the largest total length of the shortest paths in kilometers and an example assignment of the new houses to the villagers.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains an integer $$$N$$$ ($$$1 &lt; N \\le 10^5$$$). Houses are numbered by consecutive integers $$$1, 2, \\ldots, N$$$.</p><p>Then $$$N-1$$$ lines follow that describe the roads. Each line contains two integers $$$a$$$ and $$$b$$$ ($$$1 \\le a, b \\le N$$$, $$$a \\neq b$$$) denoting that there is a road connecting houses $$$a$$$ and $$$b$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>In the first line output the largest total length of the shortest paths in kilometers.</p><p>In the second line describe one valid assignment of the new houses with the largest total length: $$$N$$$ space-separated distinct integers $$$v_1, v_2, \\ldots, v_N$$$. For each $$$i$$$, $$$v_i$$$ is the house number where villager from the house $$$i$$$ should move ($$$v_i \\neq i$$$). If there are several valid assignments, output any of those.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n1 2\n2 3\n3 4\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n8\n4 3 2 1\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n7\n4 2\n5 7\n3 4\n6 3\n1 3\n4 5\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n18\n2 7 4 1 3 5 6\n</pre></div>"], "p_note": []},
{"p_id": "1387", "p_index": "C", "p_title": "C. Viruses", "p_time_limit": "0.75 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>The Committee for Research on Binary Viruses discovered a method of replication for a large family of viruses whose genetic codes are sequences of zeros and ones. Each virus originates from a single gene; for simplicity genes are denoted by integers from $$$0$$$ to $$$G - 1$$$. At each moment in time a virus is a sequence of genes. When mutation occurs, one of the genes from the sequence is replaced by a certain sequence of genes, according to the mutation table. The virus stops mutating when it consists only of genes $$$0$$$ and $$$1$$$.</p><p>For instance, for the following mutation table: $$$$$$ 2 \\to \\langle 0\\ 1 \\rangle \\\\ 3 \\to \\langle 2\\ 0\\ 0\\rangle\\\\ 3 \\to \\langle 1\\ 3\\rangle\\\\ 4 \\to \\langle 0\\ 3\\ 1\\ 2\\rangle\\\\ 5 \\to \\langle 2\\ 1\\rangle\\\\ 5 \\to \\langle 5\\rangle $$$$$$ a virus that initially consisted of a single gene $$$4$$$, could have mutated as follows: $$$$$$ \\langle 4 \\rangle \\to \\langle \\underline{0\\ 3\\ 1\\ 2} \\rangle \\to \\langle 0\\ \\underline{2\\ 0\\ 0}\\ 1\\ 2 \\rangle \\to \\langle 0\\ \\underline{0\\ 1}\\ 0\\ 0\\ 1\\ 2 \\rangle \\to \\langle 0\\ 0\\ 1\\ 0\\ 0\\ 1\\ \\underline{0\\ 1} \\rangle $$$$$$ or in another way: $$$$$$ \\langle 4 \\rangle \\to \\langle \\underline{0\\ 3\\ 1\\ 2} \\rangle \\to \\langle 0\\ \\underline{1\\ 3}\\ 1\\ 2 \\rangle \\to \\langle 0\\ 1\\ 3\\ 1\\ \\underline{0\\ 1} \\rangle \\to \\langle 0\\ 1\\ \\underline{2\\ 0\\ 0}\\ 1\\ 0\\ 1 \\rangle \\to \\langle 0\\ 1\\ \\underline{0\\ 1}\\ 0\\ 0\\ 1\\ 0\\ 1 \\rangle $$$$$$</p><p>Viruses are detected by antibodies that identify the presence of specific continuous fragments of zeros and ones in the viruses' codes. For example, an antibody reacting to a fragment $$$\\langle 0\\ 0\\ 1\\ 0\\ 0 \\rangle$$$ will detect a virus $$$\\langle 0\\ 0\\ 1\\ 0\\ 0\\ 1\\ 0\\ 1 \\rangle$$$, but it will not detect a virus $$$\\langle 0\\ 1\\ 0\\ 1\\ 0\\ 0\\ 1\\ 0\\ 1 \\rangle$$$.</p><p>For each gene from $$$2$$$ to $$$G-1$$$, the scientists are wondering whether a given set of antibodies is enough to detect all viruses that can emerge through mutations from this gene. If not, they want to know the length of the shortest virus that cannot be detected.</p><p>It may happen that sometimes scientists don't have any antibodies. Then of course no virus can be detected, so the scientists are only interested in the length of the shortest possible virus that can emerge from the gene mutations.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input will contain three integers $$$G$$$, $$$N$$$ and $$$M$$$ ($$$G &gt; 2$$$, $$$N \\geq G - 2$$$, $$$M \\geq 0$$$) specifying the number of genes, the number of rows in the mutation table, and the number of antibodies.</p><p>The following $$$N$$$ lines contain descriptions of rows of the mutation table; each line begins with two integers $$$a$$$ and $$$k$$$ ($$$2 \\leq a &lt; G$$$, $$$k \\geq 1$$$), followed by a sequence of $$$k$$$ integers $$$b_1, b_2, \\ldots, b_k$$$ ($$$0 \\leq b_i &lt; G$$$), that encode the row $$$$$$ a \\to \\langle b_1\\ b_2\\ \\ldots\\ b_k \\rangle $$$$$$</p><p>The sum of all values $$$k$$$ does not exceed $$$100$$$. <span class=\"tex-font-style-bf\">Every integer from $$$2$$$ to $$$G - 1$$$ appears in the table as $$$a$$$ at least once.</span></p><p>The next $$$M$$$ lines contain descriptions of the antibodies; each such line begins with an integer $$$\\ell$$$ ($$$\\ell \\geq 1$$$), followed by a sequence of $$$\\ell$$$ integers $$$c_1, c_2, \\ldots, c_\\ell$$$ ($$$0 \\leq c_i \\leq 1$$$), describing the antibody. The sum of all values $$$\\ell$$$ does not exceed $$$50$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Your program needs to output exactly $$$G - 2$$$ lines, containing the answers for the subsequent genes from $$$2$$$ to $$$G - 1$$$.</p><p>If all viruses that can mutate from this single gene can be detected by the given set of antibodies, you need to print the word \"<span class=\"tex-font-style-tt\">YES</span>\". You also need to print this if there are no viruses that could originate from this gene (it can happen when the sequences never stop mutating).</p><p>Otherwise you need to print the word \"<span class=\"tex-font-style-tt\">NO</span>\", followed by an integer denoting the minimal length of the undetectable virus. You can assume that for all the prepared input data this value will be smaller than $$$2^{63}$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n6 6 2\n2 2 0 1\n3 3 2 0 0\n3 2 1 3\n4 4 0 3 1 2\n5 2 2 1\n5 1 5\n2 1 1\n5 0 0 1 0 0\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nNO 2\nNO 4\nNO 9\nYES\n</pre></div>"], "p_note": []},
{"p_id": "1388", "p_index": "A", "p_title": "A. Captain Flint and Crew Recruitment", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">Despite his bad reputation, Captain Flint is a friendly person (at least, friendly to animals). Now Captain Flint is searching worthy sailors to join his new crew (solely for peaceful purposes). A sailor is considered as worthy if he can solve Flint's task.</span></p><p>Recently, out of blue Captain Flint has been interested in math and even defined a new class of integers. Let's define a positive integer $$$x$$$ as <span class=\"tex-font-style-bf\">nearly prime</span> if it can be represented as $$$p \\cdot q$$$, where $$$1 &lt; p &lt; q$$$ and $$$p$$$ and $$$q$$$ are prime numbers. For example, integers $$$6$$$ and $$$10$$$ are nearly primes (since $$$2 \\cdot 3 = 6$$$ and $$$2 \\cdot 5 = 10$$$), but integers $$$1$$$, $$$3$$$, $$$4$$$, $$$16$$$, $$$17$$$ or $$$44$$$ are not.</p><p>Captain Flint guessed an integer $$$n$$$ and asked you: can you represent it as <span class=\"tex-font-style-it\">the sum of $$$4$$$ <span class=\"tex-font-style-bf\">different positive</span> integers</span> where <span class=\"tex-font-style-bf\">at least $$$3$$$</span> of them should be <span class=\"tex-font-style-it\">nearly prime</span>.</p><p>Uncle Bogdan easily solved the task and joined the crew. Can you do the same?</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$)\u00a0\u2014 the number of test cases.</p><p>Next $$$t$$$ lines contain test cases\u00a0\u2014 one per line. The first and only line of each test case contains the single integer $$$n$$$ $$$(1 \\le n \\le 2 \\cdot 10^5)$$$\u00a0\u2014 the number Flint guessed.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case print: </p><ul> <li> <span class=\"tex-font-style-tt\">YES</span> and $$$4$$$ <span class=\"tex-font-style-bf\">different</span> positive integers such that at least $$$3$$$ of them are nearly prime and their sum is equal to $$$n$$$ (if there are multiple answers print any of them); </li><li> <span class=\"tex-font-style-tt\">NO</span> if there is no way to represent $$$n$$$ as <span class=\"tex-font-style-it\">the sum of $$$4$$$ <span class=\"tex-font-style-bf\">different positive</span> integers</span> where at least $$$3$$$ of them are nearly prime. </li></ul> You can print each character of <span class=\"tex-font-style-tt\">YES</span> or <span class=\"tex-font-style-tt\">NO</span> in any case.</div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n7\n7\n23\n31\n36\n44\n100\n258\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nNO\nNO\nYES\n14 10 6 1\nYES\n5 6 10 15\nYES\n6 7 10 21\nYES\n2 10 33 55\nYES\n10 21 221 6</pre></div>"], "p_note": ["<p>In the first and second test cases, it can be proven that there are no four different positive integers such that at least three of them are nearly prime.</p>", "<p>In the third test case, $$$n=31=2 \\cdot 7 + 2 \\cdot 5 + 2 \\cdot 3 + 1$$$: integers $$$14$$$, $$$10$$$, $$$6$$$ are nearly prime.</p>", "<p>In the fourth test case, $$$n=36=5 + 2 \\cdot 3 + 2 \\cdot 5 + 3 \\cdot 5$$$: integers $$$6$$$, $$$10$$$, $$$15$$$ are nearly prime.</p>", "<p>In the fifth test case, $$$n=44=2 \\cdot 3 + 7 + 2 \\cdot 5 + 3 \\cdot 7$$$: integers $$$6$$$, $$$10$$$, $$$21$$$ are nearly prime.</p>", "<p>In the sixth test case, $$$n=100=2 + 2 \\cdot 5 + 3 \\cdot 11 + 5 \\cdot 11$$$: integers $$$10$$$, $$$33$$$, $$$55$$$ are nearly prime.</p>", "<p>In the seventh test case, $$$n=258=2 \\cdot 5 + 3 \\cdot 7 + 13 \\cdot 17 + 2 \\cdot 3$$$: integers $$$10$$$, $$$21$$$, $$$221$$$, $$$6$$$ are nearly prime.</p>"]},
{"p_id": "1388", "p_index": "B", "p_title": "B. Captain Flint and a Long Voyage", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">Captain Flint and his crew keep heading to a savage shore of Byteland for several months already, drinking rum and telling stories. In such moments uncle Bogdan often remembers his nephew Denis. Today, he has told a story about how Denis helped him to come up with an interesting problem and asked the crew to solve it.</span></p><p>In the beginning, uncle Bogdan wrote on a board a positive integer $$$x$$$ consisting of $$$n$$$ digits. After that, he wiped out $$$x$$$ and wrote integer $$$k$$$ instead, which was the concatenation of binary representations of digits $$$x$$$ consists of (without leading zeroes). For example, let $$$x = 729$$$, then $$$k = 111101001$$$ (since $$$7 = 111$$$, $$$2 = 10$$$, $$$9 = 1001$$$).</p><p>After some time, uncle Bogdan understood that he doesn't know what to do with $$$k$$$ and asked Denis to help. Denis decided to wipe last $$$n$$$ digits of $$$k$$$ and named the new number as $$$r$$$.</p><p>As a result, Denis proposed to find such integer $$$x$$$ of length $$$n$$$ that $$$r$$$ (as number) is maximum possible. If there are multiple valid $$$x$$$ then Denis is interested in the minimum one.</p><p>All crew members, including captain Flint himself, easily solved the task. All, except cabin boy Kostya, who was too drunk to think straight. But what about you?</p><p>Note: in this task, we compare integers ($$$x$$$ or $$$k$$$) as numbers (despite what representations they are written in), so $$$729 &lt; 1999$$$ or $$$111 &lt; 1000$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$)\u00a0\u2014 the number of test cases.</p><p>Next $$$t$$$ lines contain test cases\u00a0\u2014 one per test case. The one and only line of each test case contains the single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$)\u00a0\u2014 the length of the integer $$$x$$$ you need to find.</p><p>It's guaranteed that the sum of $$$n$$$ from all test cases doesn't exceed $$$2 \\cdot 10^5$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print the minimum integer $$$x$$$ of length $$$n$$$ such that obtained by Denis number $$$r$$$ is maximum possible.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n1\n3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n8\n998\n</pre></div>"], "p_note": ["<p>In the second test case (with $$$n = 3$$$), if uncle Bogdan had $$$x = 998$$$ then $$$k = 100110011000$$$. Denis (by wiping last $$$n = 3$$$ digits) will obtain $$$r = 100110011$$$.</p>", "<p>It can be proved that the $$$100110011$$$ is the maximum possible $$$r$$$ Denis can obtain and $$$998$$$ is the minimum $$$x$$$ to obtain it.</p>"]},
{"p_id": "1388", "p_index": "C", "p_title": "C. Uncle Bogdan and Country Happiness", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">Uncle Bogdan is in captain Flint's crew for a long time and sometimes gets nostalgic for his homeland. Today he told you how his country introduced a happiness index.</span></p><p>There are $$$n$$$ cities and $$$n\u22121$$$ undirected roads connecting pairs of cities. Citizens of any city can reach any other city traveling by these roads. Cities are numbered from $$$1$$$ to $$$n$$$ and the city $$$1$$$ is a capital. In other words, the country has a tree structure.</p><p>There are $$$m$$$ citizens living in the country. A $$$p_i$$$ people live in the $$$i$$$-th city but all of them are working in the capital. At evening all citizens return to their home cities using the shortest paths. </p><p>Every person has its own mood: somebody leaves his workplace in good mood but somebody are already in bad mood. Moreover any person can ruin his mood on the way to the hometown. <span class=\"tex-font-style-bf\">If person is in bad mood he won't improve it</span>.</p><p>Happiness detectors are installed in each city to monitor the happiness of <span class=\"tex-font-style-bf\">each</span> person who visits the city. The detector in the $$$i$$$-th city calculates a happiness index $$$h_i$$$ as the number of people in good mood minus the number of people in bad mood. Let's say for the simplicity that <span class=\"tex-font-style-it\">mood of a person doesn't change inside the city</span>.</p><p>Happiness detector is still in development, so there is a probability of a mistake in judging a person's happiness. One late evening, when all citizens successfully returned home, the government asked uncle Bogdan (the best programmer of the country) to check the correctness of the collected happiness indexes.</p><p>Uncle Bogdan successfully solved the problem. Can you do the same?</p><p>More formally, <span class=\"tex-font-style-it\">You need to check: \"Is it possible that, after all people return home, for each city $$$i$$$ the happiness index will be equal exactly to $$$h_i$$$\".</span></p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10000$$$)\u00a0\u2014 the number of test cases.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n \\le 10^5$$$; $$$0 \\le m \\le 10^9$$$)\u00a0\u2014 the number of cities and citizens.</p><p>The second line of each test case contains $$$n$$$ integers $$$p_1, p_2, \\ldots, p_{n}$$$ ($$$0 \\le p_i \\le m$$$; $$$p_1 + p_2 + \\ldots + p_{n} = m$$$), where $$$p_i$$$ is the number of people living in the $$$i$$$-th city.</p><p>The third line contains $$$n$$$ integers $$$h_1, h_2, \\ldots, h_{n}$$$ ($$$-10^9 \\le h_i \\le 10^9$$$), where $$$h_i$$$ is the calculated happiness index of the $$$i$$$-th city.</p><p>Next $$$n \u2212 1$$$ lines contain description of the roads, one per line. Each line contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \\le x_i, y_i \\le n$$$; $$$x_i \\neq y_i$$$), where $$$x_i$$$ and $$$y_i$$$ are cities connected by the $$$i$$$-th road.</p><p>It's guaranteed that the sum of $$$n$$$ from all test cases doesn't exceed $$$2 \\cdot 10^5$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print <span class=\"tex-font-style-tt\">YES</span>, if the collected data is correct, or <span class=\"tex-font-style-tt\">NO</span>\u00a0\u2014 otherwise. You can print characters in <span class=\"tex-font-style-tt\">YES</span> or <span class=\"tex-font-style-tt\">NO</span> in any case.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n7 4\n1 0 1 1 0 1 0\n4 0 0 -1 0 -1 0\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n5 11\n1 2 5 2 1\n-11 -2 -6 -2 -1\n1 2\n1 3\n1 4\n3 5\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nYES\nYES\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n4 4\n1 1 1 1\n4 1 -3 -1\n1 2\n1 3\n1 4\n3 13\n3 3 7\n13 1 4\n1 2\n1 3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nNO\nNO\n</pre></div>"], "p_note": ["<p>Let's look at the first test case of the first sample: </p>", "<p>At first, all citizens are in the capital. Let's describe one of possible scenarios: </p>", "<p>The second case of the first test: </p>", "<p>All people have already started in bad mood in the capital\u00a0\u2014 this is the only possible scenario.</p>", "<p>The first case of the second test: </p>", "<p>The second case of the second test: </p>", "<p>It can be proven that there is no way to achieve given happiness indexes in both cases of the second test. </p>"]},
{"p_id": "1388", "p_index": "E", "p_title": "E. Uncle Bogdan and Projections", "p_time_limit": "4 seconds", "p_memory_limit": "512 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">After returning to shore, uncle Bogdan usually visits the computer club \"The Rock\", to solve tasks in a pleasant company. One day, uncle Bogdan met his good old friend who told him one unusual task...</span></p><p>There are $$$n$$$ non-intersecting horizontal segments with ends in integers points on the plane with the standard cartesian coordinate system. All segments are strictly above the $$$OX$$$ axis. You can choose an arbitrary vector ($$$a$$$, $$$b$$$), where $$$b &lt; 0$$$ and coordinates are real numbers, and project all segments to $$$OX$$$ axis along this vector. <span class=\"tex-font-style-it\">The projections shouldn't intersect but may touch each other.</span></p><p>Find the minimum possible difference between $$$x$$$ coordinate of the right end of the rightmost projection and $$$x$$$ coordinate of the left end of the leftmost projection.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains the single integer $$$n$$$ ($$$1 \\le n \\le 2000$$$)\u00a0\u2014 the number of segments.</p><p>The $$$i$$$-th of the next $$$n$$$ lines contains three integers $$$xl_i$$$, $$$xr_i$$$ and $$$y_i$$$ ($$$-10^6 \\le xl_i &lt; xr_i \\le 10^6$$$; $$$1 \\le y_i \\le 10^6$$$)\u00a0\u2014 coordinates of the corresponding segment.</p><p>It's guaranteed that the segments don't intersect or touch.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print the minimum possible difference you can get.</p><p>Your answer will be considered correct if its absolute or relative error doesn't exceed $$$10^{-6}$$$.</p><p>Formally, if your answer is $$$a$$$ and jury's answer is $$$b$$$ then your answer will be considered correct if $$$\\frac{|a - b|}{\\max{(1, |b|)}} \\le 10^{-6}$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n1 6 2\n4 6 4\n4 6 6\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n9.000000000\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n2 5 1\n4 6 4\n7 8 2\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n6.333333333\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n1 3 1\n4 7 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n6.000000000\n</pre></div>"], "p_note": ["<p>In the first example if we project segments along the vector $$$(1, -1)$$$ then we get an answer $$$12-3=9$$$ and (it can be proven) it is impossible to get less. </p>", "<p>It is optimal to project along the vector $$$(1, -3)$$$ in the second example. The answer is $$$8\\frac{2}{3}-2\\frac{1}{3}=6\\frac{1}{3}$$$ </p>"]},
{"p_id": "1388", "p_index": "D", "p_title": "D. Captain Flint and Treasure", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">Captain Fint is involved in another treasure hunt, but have found only one strange problem. The problem may be connected to the treasure's location or may not. That's why captain Flint decided to leave the solving the problem to his crew and offered an absurdly high reward: one day off. The problem itself sounds like this...</span></p><p>There are two arrays $$$a$$$ and $$$b$$$ of length $$$n$$$. Initially, an $$$ans$$$ is equal to $$$0$$$ and the following operation is defined: </p><ol> <li> Choose position $$$i$$$ ($$$1 \\le i \\le n$$$); </li><li> Add $$$a_i$$$ to $$$ans$$$; </li><li> If $$$b_i \\neq -1$$$ then add $$$a_i$$$ to $$$a_{b_i}$$$. </li></ol><p>What is the maximum $$$ans$$$ you can get by performing the operation on each $$$i$$$ ($$$1 \\le i \\le n$$$) <span class=\"tex-font-style-it\">exactly once</span>?</p><p>Uncle Bogdan is eager to get the reward, so he is asking your help to find the optimal order of positions to perform the operation on them.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains the integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the length of arrays $$$a$$$ and $$$b$$$.</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$\u221210^6 \\le a_i \\le 10^6$$$).</p><p>The third line contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$1 \\le b_i \\le n$$$ or $$$b_i = -1$$$).</p><p><span class=\"tex-font-style-bf\">Additional constraint: it's guaranteed that for any $$$i$$$ ($$$1 \\le i \\le n$$$) the sequence $$$b_i, b_{b_i}, b_{b_{b_i}}, \\ldots$$$ is not cyclic, in other words it will always end with $$$-1$$$.</span></p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>In the first line, print the maximum $$$ans$$$ you can get.</p><p>In the second line, print the order of operations: $$$n$$$ different integers $$$p_1, p_2, \\ldots, p_n$$$ ($$$1 \\le p_i \\le n$$$). The $$$p_i$$$ is the position which should be chosen at the $$$i$$$-th step. If there are multiple orders, print any of them.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n1 2 3\n2 3 -1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n10\n1 2 3 \n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n-1 100\n2 -1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n99\n2 1 \n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n-9\n3 5 6 1 9 4 10 7 8 2\n</pre></div>"], "p_note": []},
{"p_id": "1389", "p_index": "B", "p_title": "B. Array Walk", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given an array $$$a_1, a_2, \\dots, a_n$$$, consisting of $$$n$$$ <span class=\"tex-font-style-bf\">positive</span> integers. </p><p>Initially you are standing at index $$$1$$$ and have a score equal to $$$a_1$$$. You can perform two kinds of moves: </p><ol> <li> move right\u00a0\u2014 go from your current index $$$x$$$ to $$$x+1$$$ and add $$$a_{x+1}$$$ to your score. This move can only be performed if $$$x&lt;n$$$. </li><li> move left\u00a0\u2014 go from your current index $$$x$$$ to $$$x-1$$$ and add $$$a_{x-1}$$$ to your score. This move can only be performed if $$$x&gt;1$$$. <span class=\"tex-font-style-bf\">Also, you can't perform two or more moves to the left in a row.</span> </li></ol><p>You want to perform <span class=\"tex-font-style-bf\">exactly</span> $$$k$$$ moves. Also, there should be no more than $$$z$$$ moves to the left among them.</p><p>What is the maximum score you can achieve?</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of testcases.</p><p>The first line of each testcase contains three integers $$$n, k$$$ and $$$z$$$ ($$$2 \\le n \\le 10^5$$$, $$$1 \\le k \\le n - 1$$$, $$$0 \\le z \\le min(5, k)$$$)\u00a0\u2014 the number of elements in the array, the total number of moves you should perform and the maximum number of moves to the left you can perform.</p><p>The second line of each testcase contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^4$$$)\u00a0\u2014 the given array.</p><p>The sum of $$$n$$$ over all testcases does not exceed $$$3 \\cdot 10^5$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print $$$t$$$ integers\u00a0\u2014 for each testcase output the maximum score you can achieve if you make exactly $$$k$$$ moves in total, no more than $$$z$$$ of them are to the left and there are no two or more moves to the left in a row.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n5 4 0\n1 5 4 3 2\n5 4 1\n1 5 4 3 2\n5 4 4\n10 20 30 40 50\n10 7 3\n4 6 8 2 9 9 7 4 10 9\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n15\n19\n150\n56\n</pre></div>"], "p_note": ["<p>In the first testcase you are not allowed to move left at all. So you make four moves to the right and obtain the score $$$a_1 + a_2 + a_3 + a_4 + a_5$$$.</p>", "<p>In the second example you can move one time to the left. So we can follow these moves: right, right, left, right. The score will be $$$a_1 + a_2 + a_3 + a_2 + a_3$$$.</p>", "<p>In the third example you can move four times to the left but it's not optimal anyway, you can just move four times to the right and obtain the score $$$a_1 + a_2 + a_3 + a_4 + a_5$$$.</p>"]},
{"p_id": "1389", "p_index": "A", "p_title": "A. LCM Problem", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Let $$$LCM(x, y)$$$ be the minimum positive integer that is divisible by both $$$x$$$ and $$$y$$$. For example, $$$LCM(13, 37) = 481$$$, $$$LCM(9, 6) = 18$$$.</p><p>You are given two integers $$$l$$$ and $$$r$$$. Find two integers $$$x$$$ and $$$y$$$ such that $$$l \\le x &lt; y \\le r$$$ and $$$l \\le LCM(x, y) \\le r$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10000$$$) \u2014 the number of test cases.</p><p>Each test case is represented by one line containing two integers $$$l$$$ and $$$r$$$ ($$$1 \\le l &lt; r \\le 10^9$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print two integers:</p><ul> <li> if it is impossible to find integers $$$x$$$ and $$$y$$$ meeting the constraints in the statement, print two integers equal to $$$-1$$$; </li><li> otherwise, print the values of $$$x$$$ and $$$y$$$ (if there are multiple valid answers, you may print any of them). </li></ul></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n1 1337\n13 69\n2 4\n88 89\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n6 7\n14 21\n2 4\n-1 -1\n</pre></div>"], "p_note": []},
{"p_id": "1389", "p_index": "C", "p_title": "C. Good String", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Let's call <span class=\"tex-font-style-it\">left cyclic shift</span> of some string $$$t_1 t_2 t_3 \\dots t_{n - 1} t_n$$$ as string $$$t_2 t_3 \\dots t_{n - 1} t_n t_1$$$.</p><p>Analogically, let's call <span class=\"tex-font-style-it\">right cyclic shift</span> of string $$$t$$$ as string $$$t_n t_1 t_2 t_3 \\dots t_{n - 1}$$$.</p><p>Let's say string $$$t$$$ is <span class=\"tex-font-style-bf\">good</span> if its left cyclic shift is equal to its right cyclic shift.</p><p>You are given string $$$s$$$ which consists of digits <span class=\"tex-font-style-tt\">0</span>\u2013<span class=\"tex-font-style-tt\">9</span>.</p><p>What is the minimum number of characters you need to erase from $$$s$$$ to make it good?</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$)\u00a0\u2014 the number of test cases.</p><p>Next $$$t$$$ lines contains test cases\u00a0\u2014 one per line. The first and only line of each test case contains string $$$s$$$ ($$$2 \\le |s| \\le 2 \\cdot 10^5$$$). Each character $$$s_i$$$ is digit <span class=\"tex-font-style-tt\">0</span>\u2013<span class=\"tex-font-style-tt\">9</span>.</p><p>It's guaranteed that the total length of strings doesn't exceed $$$2 \\cdot 10^5$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print the minimum number of characters you need to erase from $$$s$$$ to make it good.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n95831\n100120013\n252525252525\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n3\n5\n0\n</pre></div>"], "p_note": ["<p>In the first test case, you can erase any $$$3$$$ characters, for example, the $$$1$$$-st, the $$$3$$$-rd, and the $$$4$$$-th. You'll get string <span class=\"tex-font-style-tt\">51</span> and it is good.</p>", "<p>In the second test case, we can erase all characters except <span class=\"tex-font-style-tt\">0</span>: the remaining string is <span class=\"tex-font-style-tt\">0000</span> and it's good.</p>", "<p>In the third test case, the given string $$$s$$$ is already good.</p>"]},
{"p_id": "1389", "p_index": "D", "p_title": "D. Segment Intersections", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given two lists of segments $$$[al_1, ar_1], [al_2, ar_2], \\dots, [al_n, ar_n]$$$ and $$$[bl_1, br_1], [bl_2, br_2], \\dots, [bl_n, br_n]$$$.</p><p>Initially, all segments $$$[al_i, ar_i]$$$ are equal to $$$[l_1, r_1]$$$ and all segments $$$[bl_i, br_i]$$$ are equal to $$$[l_2, r_2]$$$.</p><p>In one step, you can choose one segment (either from the first or from the second list) and extend it by $$$1$$$. In other words, suppose you've chosen segment $$$[x, y]$$$ then you can transform it either into $$$[x - 1, y]$$$ or into $$$[x, y + 1]$$$.</p><p>Let's define a total intersection $$$I$$$ as the sum of lengths of intersections of the corresponding pairs of segments, i.e. $$$\\sum\\limits_{i=1}^{n}{\\text{intersection_length}([al_i, ar_i], [bl_i, br_i])}$$$. Empty intersection has length $$$0$$$ and length of a segment $$$[x, y]$$$ is equal to $$$y - x$$$.</p><p>What is the minimum number of steps you need to make $$$I$$$ greater or equal to $$$k$$$?</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains the single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$)\u00a0\u2014 the number of test cases.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$; $$$1 \\le k \\le 10^9$$$)\u00a0\u2014 the length of lists and the minimum required total intersection.</p><p>The second line of each test case contains two integers $$$l_1$$$ and $$$r_1$$$ ($$$1 \\le l_1 \\le r_1 \\le 10^9$$$)\u00a0\u2014 the segment all $$$[al_i, ar_i]$$$ are equal to initially.</p><p>The third line of each test case contains two integers $$$l_2$$$ and $$$r_2$$$ ($$$1 \\le l_2 \\le r_2 \\le 10^9$$$)\u00a0\u2014 the segment all $$$[bl_i, br_i]$$$ are equal to initially.</p><p>It's guaranteed that the sum of $$$n$$$ doesn't exceed $$$2 \\cdot 10^5$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print $$$t$$$ integers\u00a0\u2014 one per test case. For each test case, print the minimum number of step you need to make $$$I$$$ greater or equal to $$$k$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n3 5\n1 2\n3 4\n2 1000000000\n1 1\n999999999 999999999\n10 3\n5 10\n7 8\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n7\n2000000000\n0\n</pre></div>"], "p_note": ["<p>In the first test case, we can achieve total intersection $$$5$$$, for example, using next strategy: </p>", "<p>In the second test case, we can make $$$[al_1, ar_1] = [0, 1000000000]$$$ in $$$1000000000$$$ steps and $$$[bl_1, br_1] = [0, 1000000000]$$$ in $$$1000000000$$$ steps.</p>", "<p>In the third test case, the total intersection $$$I$$$ is already equal to $$$10 &gt; 3$$$, so we don't need to do any steps.</p>"]},
{"p_id": "1389", "p_index": "E", "p_title": "E. Calendar Ambiguity", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Berland year consists of $$$m$$$ months with $$$d$$$ days each. Months are numbered from $$$1$$$ to $$$m$$$. Berland week consists of $$$w$$$ days. The first day of the year is also the first day of the week. Note that the last week of the year might be shorter than $$$w$$$ days.</p><p>A pair $$$(x, y)$$$ such that $$$x &lt; y$$$ is ambiguous if day $$$x$$$ of month $$$y$$$ is the same day of the week as day $$$y$$$ of month $$$x$$$.</p><p>Count the number of ambiguous pairs.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$)\u00a0\u2014 the number of testcases.</p><p>Each of the next $$$t$$$ lines contains three integers $$$m$$$, $$$d$$$ and $$$w$$$ ($$$1 \\le m, d, w \\le 10^9$$$)\u00a0\u2014 the number of months in a year, the number of days in a month and the number of days in a week.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print $$$t$$$ integers\u00a0\u2014 for each testcase output the number of pairs $$$(x, y)$$$ such that $$$x &lt; y$$$ and day $$$x$$$ of month $$$y$$$ is the same day of the week as day $$$y$$$ of month $$$x$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n5\n6 7 4\n10 7 12\n12 30 7\n1 1 1\n3247834 10298779 625324\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n6\n9\n5\n0\n116461800\n</pre></div>"], "p_note": ["<p>Here are the pairs for the first test case: </p>"]},
{"p_id": "1389", "p_index": "F", "p_title": "F. Bicolored Segments", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given $$$n$$$ segments $$$[l_1, r_1], [l_2, r_2], \\dots, [l_n, r_n]$$$. Each segment has one of two colors: the $$$i$$$-th segment's color is $$$t_i$$$.</p><p>Let's call a pair of segments $$$i$$$ and $$$j$$$ <span class=\"tex-font-style-it\">bad</span> if the following two conditions are met:</p><ul> <li> $$$t_i \\ne t_j$$$; </li><li> the segments $$$[l_i, r_i]$$$ and $$$[l_j, r_j]$$$ intersect, embed or touch, i.\u2009e. there exists an integer $$$x$$$ such that $$$x \\in [l_i, r_i]$$$ and $$$x \\in [l_j, r_j]$$$. </li></ul><p>Calculate the maximum number of segments that can be selected from the given ones, so that there is no <span class=\"tex-font-style-it\">bad</span> pair among the selected ones.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$)\u00a0\u2014 number of segments.</p><p>The next $$$n$$$ lines contains three integers $$$l_i, r_i, t_i$$$ ($$$1 \\le l_i \\le r_i \\le 10^9; t_i \\in \\{1, 2\\}$$$)\u00a0\u2014 description of the $$$i$$$-th segment.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print the maximum number of segments that can be selected, so that there is no <span class=\"tex-font-style-it\">bad</span> pair among the selected segments.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n1 3 1\n4 6 2\n2 5 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n5\n5 8 1\n1 3 2\n3 4 2\n6 6 1\n2 10 2\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n4\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n7\n19 20 1\n13 15 2\n6 11 2\n4 10 1\n14 17 1\n13 13 2\n5 9 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n5\n</pre></div>"], "p_note": []},
{"p_id": "1389", "p_index": "G", "p_title": "G. Directing Edges", "p_time_limit": "4 seconds", "p_memory_limit": "512 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given an undirected connected graph consisting of $$$n$$$ vertices and $$$m$$$ edges. $$$k$$$ vertices of this graph are special.</p><p>You have to direct each edge of this graph or leave it undirected. If you leave the $$$i$$$-th edge undirected, you pay $$$w_i$$$ coins, and if you direct it, you don't have to pay for it.</p><p>Let's call a vertex <span class=\"tex-font-style-it\">saturated</span> if it is reachable from each special vertex along the edges of the graph (if an edge is undirected, it can be traversed in both directions). After you direct the edges of the graph (possibly leaving some of them undirected), you receive $$$c_i$$$ coins for each saturated vertex $$$i$$$. Thus, your total profit can be calculated as $$$\\sum \\limits_{i \\in S} c_i - \\sum \\limits_{j \\in U} w_j$$$, where $$$S$$$ is the set of saturated vertices, and $$$U$$$ is the set of edges you leave undirected.</p><p>For each vertex $$$i$$$, calculate the maximum possible profit you can get if you have to make the vertex $$$i$$$ saturated.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains three integers $$$n$$$, $$$m$$$ and $$$k$$$ ($$$2 \\le n \\le 3 \\cdot 10^5$$$, $$$n - 1 \\le m \\le \\min(3 \\cdot 10^5, \\frac{n(n-1)}{2})$$$, $$$1 \\le k \\le n$$$).</p><p>The second line contains $$$k$$$ pairwise distinct integers $$$v_1$$$, $$$v_2$$$, ..., $$$v_k$$$ ($$$1 \\le v_i \\le n$$$) \u2014 the indices of the special vertices.</p><p>The third line contains $$$n$$$ integers $$$c_1$$$, $$$c_2$$$, ..., $$$c_n$$$ ($$$0 \\le c_i \\le 10^9$$$).</p><p>The fourth line contains $$$m$$$ integers $$$w_1$$$, $$$w_2$$$, ..., $$$w_m$$$ ($$$0 \\le w_i \\le 10^9$$$).</p><p>Then $$$m$$$ lines follow, the $$$i$$$-th line contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \\le x_i, y_i \\le n$$$, $$$x_i \\ne y_i$$$) \u2014 the endpoints of the $$$i$$$-th edge.</p><p>There is at most one edge between each pair of vertices.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print $$$n$$$ integers, where the $$$i$$$-th integer is the maximum profit you can get if you have to make the vertex $$$i$$$ saturated.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3 2 2\n1 3\n11 1 5\n10 10\n1 2\n2 3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n11 2 5 \n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n4 4 4\n1 2 3 4\n1 5 7 8\n100 100 100 100\n1 2\n2 3\n3 4\n1 4\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n21 21 21 21 \n</pre></div>"], "p_note": ["<p>Consider the first example:</p>", "<p>The best course of action in the second example is to direct the edges along the cycle: $$$1 \\to 2$$$, $$$2 \\to 3$$$, $$$3 \\to 4$$$ and $$$4 \\to 1$$$. That way, all vertices are saturated.</p>"]},
{"p_id": "1391", "p_index": "A", "p_title": "A. Suborrays", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array) and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).</p><p>For a positive integer $$$n$$$, we call a permutation $$$p$$$ of length $$$n$$$ <span class=\"tex-font-style-bf\">good</span> if the following condition holds for every pair $$$i$$$ and $$$j$$$ ($$$1 \\le i \\le j \\le n$$$)\u00a0\u2014 </p><ul> <li> $$$(p_i \\text{ OR } p_{i+1} \\text{ OR } \\ldots \\text{ OR } p_{j-1} \\text{ OR } p_{j}) \\ge j-i+1$$$, where $$$\\text{OR}$$$ denotes the <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#OR\">bitwise OR operation.</a> </li></ul><p>In other words, a permutation $$$p$$$ is <span class=\"tex-font-style-bf\">good</span> if for every subarray of $$$p$$$, the $$$\\text{OR}$$$ of all elements in it is not less than the number of elements in that subarray. </p><p>Given a positive integer $$$n$$$, output any <span class=\"tex-font-style-bf\">good</span> permutation of length $$$n$$$. We can show that for the given constraints such a permutation always exists.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 100$$$). Description of the test cases follows.</p><p>The first and only line of every test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 100$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For every test, output any <span class=\"tex-font-style-bf\">good</span> permutation of length $$$n$$$ on a separate line. </p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n1\n3\n7\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1\n3 1 2\n4 3 5 2 7 1 6\n</pre></div>"], "p_note": ["<p>For $$$n = 3$$$, $$$[3,1,2]$$$ is a good permutation. Some of the subarrays are listed below. </p>", "<p>Similarly, you can verify that $$$[4,3,5,2,7,1,6]$$$ is also good.</p>"]},
{"p_id": "1391", "p_index": "B", "p_title": "B. Fix You", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Consider a conveyor belt represented using a grid consisting of $$$n$$$ rows and $$$m$$$ columns. The cell in the $$$i$$$-th row from the top and the $$$j$$$-th column from the left is labelled $$$(i,j)$$$. </p><p>Every cell, except $$$(n,m)$$$, has a direction <span class=\"tex-font-style-tt\">R</span> (Right) or <span class=\"tex-font-style-tt\">D</span> (Down) assigned to it. If the cell $$$(i,j)$$$ is assigned direction <span class=\"tex-font-style-tt\">R</span>, any luggage kept on that will move to the cell $$$(i,j+1)$$$. Similarly, if the cell $$$(i,j)$$$ is assigned direction <span class=\"tex-font-style-tt\">D</span>, any luggage kept on that will move to the cell $$$(i+1,j)$$$. If at any moment, the luggage moves out of the grid, it is considered to be lost. </p><p>There is a counter at the cell $$$(n,m)$$$ from where all luggage is picked. A conveyor belt is called <span class=\"tex-font-style-bf\">functional</span> if and only if any luggage reaches the counter regardless of which cell it is placed in initially. More formally, for every cell $$$(i,j)$$$, any luggage placed in this cell should eventually end up in the cell $$$(n,m)$$$. </p><p>This may not hold initially; you are, however, allowed to <span class=\"tex-font-style-bf\">change</span> the directions of some cells to make the conveyor belt functional. Please determine the minimum amount of cells you have to change.</p><p>Please note that it is always possible to make any conveyor belt functional by changing the directions of some set of cells.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10$$$). Description of the test cases follows.</p><p>The first line of each test case contains two integers $$$n, m$$$ ($$$1 \\le n \\le 100$$$, $$$1 \\le m \\le 100$$$) \u00a0\u2014 the number of rows and columns, respectively.</p><p>The following $$$n$$$ lines each contain $$$m$$$ characters. The $$$j$$$-th character in the $$$i$$$-th line, $$$a_{i,j}$$$ is the initial direction of the cell $$$(i, j)$$$. Please note that $$$a_{n,m}=$$$ <span class=\"tex-font-style-tt\">C</span>.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each case, output in a new line the minimum number of cells that you have to change to make the conveyor belt functional. </p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n3 3\nRRD\nDDR\nRRC\n1 4\nDDDC\n6 9\nRDDDDDRRR\nRRDDRRDDD\nRRDRDRRDR\nDDDDRDDRR\nDRRDRDDDR\nDDRDRRDDC\n1 1\nC\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1\n3\n9\n0\n</pre></div>"], "p_note": ["<p>In the first case, just changing the direction of $$$(2,3)$$$ to <span class=\"tex-font-style-tt\">D</span> is enough.</p>", "<p>You can verify that the resulting belt is functional. For example, if we place any luggage at $$$(2,2)$$$, it first moves to $$$(3,2)$$$ and then to $$$(3,3)$$$. </p>", "<p>In the second case, we have no option but to change the first $$$3$$$ cells from <span class=\"tex-font-style-tt\">D</span> to <span class=\"tex-font-style-tt\">R</span> making the grid equal to <span class=\"tex-font-style-tt\">RRRC</span>.</p>"]},
{"p_id": "1385", "p_index": "E", "p_title": "E. Directing Edges", "p_time_limit": "3 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given a graph consisting of $$$n$$$ vertices and $$$m$$$ edges. It is not guaranteed that the given graph is connected. Some edges are already directed and you can't change their direction. Other edges are undirected and you have to choose some direction for all these edges.</p><p>You have to direct undirected edges in such a way that the resulting graph is directed and acyclic (i.e. the graph with all edges directed and having no directed cycles). Note that you have to direct <span class=\"tex-font-style-bf\">all</span> undirected edges.</p><p>You have to answer $$$t$$$ independent test cases.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 2 \\cdot 10^4$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The first line of the test case contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$, $$$1 \\le m \\le min(2 \\cdot 10^5, \\frac{n(n-1)}{2})$$$) \u2014 the number of vertices and the number of edges in the graph, respectively.</p><p>The next $$$m$$$ lines describe edges of the graph. The $$$i$$$-th edge is described with three integers $$$t_i$$$, $$$x_i$$$ and $$$y_i$$$ ($$$t_i \\in [0; 1]$$$, $$$1 \\le x_i, y_i \\le n$$$) \u2014 the type of the edge ($$$t_i = 0$$$ if the edge is undirected and $$$t_i = 1$$$ if the edge is directed) and vertices this edge connects (the undirected edge connects vertices $$$x_i$$$ and $$$y_i$$$ and directed edge is going from the vertex $$$x_i$$$ to the vertex $$$y_i$$$). It is guaranteed that the graph do not contain self-loops (i.e. edges from the vertex to itself) and multiple edges (i.e. for each pair ($$$x_i, y_i$$$) there are no other pairs ($$$x_i, y_i$$$) or ($$$y_i, x_i$$$)).</p><p>It is guaranteed that both sum $$$n$$$ and sum $$$m$$$ do not exceed $$$2 \\cdot 10^5$$$ ($$$\\sum n \\le 2 \\cdot 10^5$$$; $$$\\sum m \\le 2 \\cdot 10^5$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case print the answer \u2014 \"<span class=\"tex-font-style-tt\">NO</span>\" if it is impossible to direct undirected edges in such a way that the resulting graph is directed and acyclic, otherwise print \"<span class=\"tex-font-style-tt\">YES</span>\" on the first line and $$$m$$$ lines describing edges of the resulted directed acyclic graph (<span class=\"tex-font-style-bf\">in any order</span>). Note that you cannot change the direction of the already directed edges. If there are several answers, you can print any.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n3 1\n0 1 3\n5 5\n0 2 1\n1 1 5\n1 5 4\n0 5 2\n1 3 5\n4 5\n1 1 2\n0 4 3\n1 3 1\n0 2 3\n1 2 4\n4 5\n1 4 1\n1 1 3\n0 1 2\n1 2 4\n1 3 2\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nYES\n3 1\nYES\n2 1\n1 5\n5 4\n2 5\n3 5\nYES\n1 2\n3 4\n3 1\n3 2\n2 4\nNO\n</pre></div>"], "p_note": ["<p>Explanation of the second test case of the example:</p>", "<p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/3649fca14c0a11a6d8b2410b5b6e6486a81d6b08.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"></p>", "<p>Explanation of the third test case of the example:</p>", "<p><img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/8219abab3d0d76d481cce1e950b695c2dbc844a4.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"></p>"]},
{"p_id": "1391", "p_index": "C", "p_title": "C. Cyclic Permutations ", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array) and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).</p><p>Consider a permutation $$$p$$$ of length $$$n$$$, we build a graph of size $$$n$$$ using it as follows: </p><ul> <li> For every $$$1 \\leq i \\leq n$$$, find the <span class=\"tex-font-style-bf\">largest</span> $$$j$$$ such that $$$1 \\leq j &lt; i$$$ and $$$p_j &gt; p_i$$$, and add an undirected edge between node $$$i$$$ and node $$$j$$$ </li><li> For every $$$1 \\leq i \\leq n$$$, find the <span class=\"tex-font-style-bf\">smallest</span> $$$j$$$ such that $$$i &lt; j \\leq n$$$ and $$$p_j &gt; p_i$$$, and add an undirected edge between node $$$i$$$ and node $$$j$$$ </li></ul><p>In cases where no such $$$j$$$ exists, we make no edges. Also, note that we make edges between the corresponding indices, not the values at those indices.</p><p>For clarity, consider as an example $$$n = 4$$$, and $$$p = [3,1,4,2]$$$; here, the edges of the graph are $$$(1,3),(2,1),(2,3),(4,3)$$$.</p><p>A permutation $$$p$$$ is <span class=\"tex-font-style-bf\">cyclic</span> if the graph built using $$$p$$$ has at least one simple cycle. </p><p>Given $$$n$$$, find the number of cyclic permutations of length $$$n$$$. Since the number may be very large, output it modulo $$$10^9+7$$$.</p><p>Please refer to the Notes section for the formal definition of a simple cycle</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first and only line contains a single integer $$$n$$$ ($$$3 \\le n \\le 10^6$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output a single integer $$$0 \\leq x &lt; 10^9+7$$$, the number of cyclic permutations of length $$$n$$$ modulo $$$10^9+7$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n16</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n583291\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n135712853</pre></div>"], "p_note": ["<p>There are $$$16$$$ cyclic permutations for $$$n = 4$$$. $$$[4,2,1,3]$$$ is one such permutation, having a cycle of length four: $$$4 \\rightarrow 3 \\rightarrow 2 \\rightarrow 1 \\rightarrow 4$$$.</p>", "<p>Nodes $$$v_1$$$, $$$v_2$$$, $$$\\ldots$$$, $$$v_k$$$ form a simple cycle if the following conditions hold: </p>"]},
{"p_id": "1391", "p_index": "D", "p_title": "D. 505", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>A binary matrix is called <span class=\"tex-font-style-bf\">good</span> if every <span class=\"tex-font-style-bf\">even</span> length square sub-matrix has an <span class=\"tex-font-style-bf\">odd</span> number of ones. </p><p>Given a binary matrix $$$a$$$ consisting of $$$n$$$ rows and $$$m$$$ columns, determine the minimum number of cells you need to change to make it good, or report that there is no way to make it good at all. </p><p>All the terms above have their usual meanings\u00a0\u2014 refer to the Notes section for their formal definitions. </p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of input contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n \\leq m \\leq 10^6$$$ and $$$n\\cdot m \\leq 10^6$$$) \u00a0\u2014 the number of rows and columns in $$$a$$$, respectively. </p><p>The following $$$n$$$ lines each contain $$$m$$$ characters, each of which is one of <span class=\"tex-font-style-tt\">0</span> and <span class=\"tex-font-style-tt\">1</span>. If the $$$j$$$-th character on the $$$i$$$-th line is <span class=\"tex-font-style-tt\">1</span>, then $$$a_{i,j} = 1$$$. Similarly, if the $$$j$$$-th character on the $$$i$$$-th line is <span class=\"tex-font-style-tt\">0</span>, then $$$a_{i,j} = 0$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output the minimum number of cells you need to change to make $$$a$$$ good, or output $$$-1$$$ if it's not possible at all.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3 3\n101\n001\n110\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n7 15\n000100001010010\n100111010110001\n101101111100100\n010000111111010\n111010010100001\n000011001111101\n111111011010011\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n-1</pre></div>"], "p_note": ["<p>In the first case, changing $$$a_{1,1}$$$ to $$$0$$$ and $$$a_{2,2}$$$ to $$$1$$$ is enough. </p>", "<p>You can verify that there is no way to make the matrix in the second case good. </p>", "<p>Some definitions\u00a0\u2014 </p>"]},
{"p_id": "1367", "p_index": "B", "p_title": "B. Even Array", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given an array $$$a[0 \\ldots n-1]$$$ of length $$$n$$$ which consists of non-negative integers. <span class=\"tex-font-style-bf\">Note that array indices start from zero.</span></p><p>An array is called <span class=\"tex-font-style-it\">good</span> if the parity of each index matches the parity of the element at that index. More formally, an array is good if for all $$$i$$$ ($$$0 \\le i \\le n - 1$$$) the equality $$$i \\bmod 2 = a[i] \\bmod 2$$$ holds, where $$$x \\bmod 2$$$ is the remainder of dividing $$$x$$$ by 2.</p><p>For example, the arrays [$$$0, 5, 2, 1$$$] and [$$$0, 17, 0, 3$$$] are good, and the array [$$$2, 4, 6, 7$$$] is bad, because for $$$i=1$$$, the parities of $$$i$$$ and $$$a[i]$$$ are different: $$$i \\bmod 2 = 1 \\bmod 2 = 1$$$, but $$$a[i] \\bmod 2 = 4 \\bmod 2 = 0$$$.</p><p>In one move, you can take <span class=\"tex-font-style-bf\">any</span> two elements of the array and swap them (these elements are not necessarily adjacent).</p><p>Find the minimum number of moves in which you can make the array $$$a$$$ good, or say that this is not possible.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$)\u00a0\u2014 the number of test cases in the test. Then $$$t$$$ test cases follow.</p><p>Each test case starts with a line containing an integer $$$n$$$ ($$$1 \\le n \\le 40$$$)\u00a0\u2014 the length of the array $$$a$$$.</p><p>The next line contains $$$n$$$ integers $$$a_0, a_1, \\ldots, a_{n-1}$$$ ($$$0 \\le a_i \\le 1000$$$)\u00a0\u2014 the initial array.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, output a single integer\u00a0\u2014 the minimum number of moves to make the given array $$$a$$$ good, or <span class=\"tex-font-style-tt\">-1</span> if this is not possible.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2\n1\n-1\n0\n</pre></div>"], "p_note": ["<p>In the first test case, in the first move, you can swap the elements with indices $$$0$$$ and $$$1$$$, and in the second move, you can swap the elements with indices $$$2$$$ and $$$3$$$.</p>", "<p>In the second test case, in the first move, you need to swap the elements with indices $$$0$$$ and $$$1$$$.</p>", "<p>In the third test case, you cannot make the array good.</p>"]},
{"p_id": "1367", "p_index": "C", "p_title": "C. Social Distance", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Polycarp and his friends want to visit a new restaurant. The restaurant has $$$n$$$ tables arranged along a straight line. People are already sitting at some tables. The tables are numbered from $$$1$$$ to $$$n$$$ in the order from left to right. The state of the restaurant is described by a string of length $$$n$$$ which contains characters \"<span class=\"tex-font-style-tt\">1</span>\" (the table is occupied) and \"<span class=\"tex-font-style-tt\">0</span>\" (the table is empty).</p><p>Restaurant rules prohibit people to sit at a distance of $$$k$$$ or less from each other. That is, if a person sits at the table number $$$i$$$, then all tables with numbers from $$$i-k$$$ to $$$i+k$$$ (except for the $$$i$$$-th) should be free. In other words, the absolute difference of the numbers of any two occupied tables must be strictly greater than $$$k$$$.</p><p>For example, if $$$n=8$$$ and $$$k=2$$$, then:</p><ul> <li> strings \"<span class=\"tex-font-style-tt\">10010001</span>\", \"<span class=\"tex-font-style-tt\">10000010</span>\", \"<span class=\"tex-font-style-tt\">00000000</span>\", \"<span class=\"tex-font-style-tt\">00100000</span>\" satisfy the rules of the restaurant; </li><li> strings \"<span class=\"tex-font-style-tt\">10100100</span>\", \"<span class=\"tex-font-style-tt\">10011001</span>\", \"<span class=\"tex-font-style-tt\">11111111</span>\" do not satisfy to the rules of the restaurant, since each of them has a pair of \"<span class=\"tex-font-style-tt\">1</span>\" with a distance less than or equal to $$$k=2$$$. </li></ul><p>In particular, if the state of the restaurant is described by a string without \"<span class=\"tex-font-style-tt\">1</span>\" or a string with one \"<span class=\"tex-font-style-tt\">1</span>\", then the requirement of the restaurant is satisfied.</p><p>You are given a binary string $$$s$$$ that describes the current state of the restaurant. It is guaranteed that the rules of the restaurant are satisfied for the string $$$s$$$.</p><p>Find the maximum number of free tables that you can occupy so as not to violate the rules of the restaurant. Formally, what is the maximum number of \"<span class=\"tex-font-style-tt\">0</span>\" that can be replaced by \"<span class=\"tex-font-style-tt\">1</span>\" such that the requirement will still be satisfied?</p><p>For example, if $$$n=6$$$, $$$k=1$$$, $$$s=$$$\u00a0\"<span class=\"tex-font-style-tt\">100010</span>\", then the answer to the problem will be $$$1$$$, since only the table at position $$$3$$$ can be occupied such that the rules are still satisfied.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases in the test. Then $$$t$$$ test cases follow.</p><p>Each test case starts with a line containing two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 2\\cdot 10^5$$$)\u00a0\u2014 the number of tables in the restaurant and the minimum allowed distance between two people.</p><p>The second line of each test case contains a binary string $$$s$$$ of length $$$n$$$ consisting of \"<span class=\"tex-font-style-tt\">0</span>\" and \"<span class=\"tex-font-style-tt\">1</span>\"\u00a0\u2014 a description of the free and occupied tables in the restaurant. The given string satisfy to the rules of the restaurant\u00a0\u2014 the difference between indices of any two \"<span class=\"tex-font-style-tt\">1</span>\" is more than $$$k$$$.</p><p>The sum of $$$n$$$ for all test cases in one test does not exceed $$$2\\cdot 10^5$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case output one integer\u00a0\u2014 the number of tables that you can occupy so as not to violate the rules of the restaurant. If additional tables cannot be taken, then, obviously, you need to output $$$0$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n6\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1\n2\n0\n1\n1\n1\n</pre></div>"], "p_note": ["<p>The first test case is explained in the statement.</p>", "<p>In the second test case, the answer is $$$2$$$, since you can choose the first and the sixth table.</p>", "<p>In the third test case, you cannot take any free table without violating the rules of the restaurant.</p>"]},
{"p_id": "1367", "p_index": "E", "p_title": "E. Necklace Assembly", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>The store sells $$$n$$$ beads. The color of each bead is described by a lowercase letter of the English alphabet (\"<span class=\"tex-font-style-tt\">a</span>\"\u2013\"<span class=\"tex-font-style-tt\">z</span>\"). You want to buy some beads to assemble a necklace from them.</p><p>A necklace is a set of beads connected in a circle.</p><p>For example, if the store sells beads \"<span class=\"tex-font-style-tt\">a</span>\", \"<span class=\"tex-font-style-tt\">b</span>\", \"<span class=\"tex-font-style-tt\">c</span>\", \"<span class=\"tex-font-style-tt\">a</span>\", \"<span class=\"tex-font-style-tt\">c</span>\", \"<span class=\"tex-font-style-tt\">c</span>\", then you can assemble the following necklaces (these are not all possible options):</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/489ef8e534a70fc3e0e5051863a91dd875fce89a.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"> </center><p>And the following necklaces cannot be assembled from beads sold in the store:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/35fbf7bd3f4923b6d7a03918403df2c496864799.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"> <span class=\"tex-font-size-small\">The first necklace cannot be assembled because it has three beads \"<span class=\"tex-font-style-tt\">a</span>\" (of the two available). The second necklace cannot be assembled because it contains a bead \"<span class=\"tex-font-style-tt\">d</span>\", which is not sold in the store.</span> </center><p>We call a necklace $$$k$$$-beautiful if, when it is turned clockwise by $$$k$$$ beads, the necklace remains unchanged. For example, here is a sequence of three turns of a necklace. </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/d00132704b1299bdef457071855b4150205c2447.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"> </center> As you can see, this necklace is, for example, $$$3$$$-beautiful, $$$6$$$-beautiful, $$$9$$$-beautiful, and so on, but it is not $$$1$$$-beautiful or $$$2$$$-beautiful.<p>In particular, a necklace of length $$$1$$$ is $$$k$$$-beautiful for any integer $$$k$$$. A necklace that consists of beads of the same color is also beautiful for any $$$k$$$.</p><p>You are given the integers $$$n$$$ and $$$k$$$, and also the string $$$s$$$ containing $$$n$$$ lowercase letters of the English alphabet\u00a0\u2014 each letter defines a bead in the store. You can buy any subset of beads and connect them in any order. Find the maximum length of a $$$k$$$-beautiful necklace you can assemble.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$)\u00a0\u2014 the number of test cases in the test. Then $$$t$$$ test cases follow.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n, k \\le 2000$$$).</p><p>The second line of each test case contains the string $$$s$$$ containing $$$n$$$ lowercase English letters\u00a0\u2014 the beads in the store.</p><p>It is guaranteed that the sum of $$$n$$$ for all test cases does not exceed $$$2000$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output $$$t$$$ answers to the test cases. Each answer is a positive integer\u00a0\u2014 the maximum length of the $$$k$$$-beautiful necklace you can assemble.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n6\n6 3\nabcbac\n3 6\naaa\n7 1000\nabczgyo\n5 4\nababa\n20 10\naaebdbabdbbddaadaadc\n20 5\necbedececacbcbccbdec\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n6\n3\n5\n4\n15\n10\n</pre></div>"], "p_note": ["<p>The first test case is explained in the statement.</p>", "<p>In the second test case, a $$$6$$$-beautiful necklace can be assembled from all the letters.</p>", "<p>In the third test case, a $$$1000$$$-beautiful necklace can be assembled, for example, from beads \"<span class=\"tex-font-style-tt\">abzyo</span>\".</p>"]},
{"p_id": "1367", "p_index": "F1", "p_title": "F1. Flying Sort (Easy Version)", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-bf\">This is an easy version of the problem. In this version, all numbers in the given array are distinct and the constraints on $$$n$$$ are less than in the hard version of the problem.</span></p><p>You are given an array $$$a$$$ of $$$n$$$ integers <span class=\"tex-font-style-bf\">(there are no equals elements in the array)</span>. You can perform the following operations on array elements:</p><ol> <li> choose any index $$$i$$$ ($$$1 \\le i \\le n$$$) and move the element $$$a[i]$$$ to the <span class=\"tex-font-style-bf\">begin</span> of the array; </li><li> choose any index $$$i$$$ ($$$1 \\le i \\le n$$$) and move the element $$$a[i]$$$ to the <span class=\"tex-font-style-bf\">end</span> of the array. </li></ol><p>For example, if $$$n = 5$$$, $$$a = [4, 7, 2, 3, 9]$$$, then the following sequence of operations can be performed: </p><ul> <li> after performing the operation of the first type to the second element, the array $$$a$$$ will become $$$[7, 4, 2, 3, 9]$$$; </li><li> after performing the operation of the second type to the second element, the array $$$a$$$ will become $$$[7, 2, 3, 9, 4]$$$. </li></ul><p>You can perform operations of any type any number of times in any order.</p><p>Find the minimum total number of operations of the first and second type that will make the $$$a$$$ array sorted in non-decreasing order. In other words, what is the minimum number of operations that must be performed so the array satisfies the inequalities $$$a[1] \\le a[2] \\le \\ldots \\le a[n]$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 100$$$)\u00a0\u2014 the number of test cases in the test. Then $$$t$$$ test cases follow.</p><p>Each test case starts with a line containing an integer $$$n$$$ ($$$1 \\le n \\le 3000$$$)\u00a0\u2014 length of the array $$$a$$$.</p><p>Then follow $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i \\le 10^9$$$)\u00a0\u2014 an array that needs to be sorted by the given operations. <span class=\"tex-font-style-bf\">All numbers in the given array are distinct</span>.</p><p>The sum of $$$n$$$ for all test cases in one test does not exceed $$$3000$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case output one integer\u00a0\u2014 the minimum total number of operations of the first and second type, which will make the array sorted in non-decreasing order.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n5\n4 7 2 3 9\n5\n3 5 8 1 7\n5\n1 4 5 7 12\n4\n0 2 1 3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2\n2\n0\n2\n</pre></div>"], "p_note": ["<p>In the first test case, you first need to move <span class=\"tex-font-style-tt\">3</span>, and then <span class=\"tex-font-style-tt\">2</span> to the beginning of the array. Therefore, the desired sequence of operations: $$$[4, 7, 2, 3, 9] \\rightarrow [3, 4, 7, 2, 9] \\rightarrow [2, 3, 4, 7, 9]$$$.</p>", "<p>In the second test case, you need to move the <span class=\"tex-font-style-tt\">1</span> to the beginning of the array, and the <span class=\"tex-font-style-tt\">8</span>\u00a0\u2014 to the end. Therefore, the desired sequence of operations: $$$[3, 5, 8, 1, 7] \\rightarrow [1, 3, 5, 8, 7] \\rightarrow [1, 3, 5, 7, 8]$$$.</p>", "<p>In the third test case, the array is already sorted.</p>"]},
{"p_id": "1367", "p_index": "F2", "p_title": "F2. Flying Sort (Hard Version)", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-bf\">This is a hard version of the problem. In this version, the given array can contain equal elements and the constraints on $$$n$$$ are greater than in the easy version of the problem.</span></p><p>You are given an array $$$a$$$ of $$$n$$$ integers <span class=\"tex-font-style-bf\">(the given array can contain equal elements)</span>. You can perform the following operations on array elements:</p><ol> <li> choose any index $$$i$$$ ($$$1 \\le i \\le n$$$) and move the element $$$a[i]$$$ to the <span class=\"tex-font-style-bf\">begin</span> of the array; </li><li> choose any index $$$i$$$ ($$$1 \\le i \\le n$$$) and move the element $$$a[i]$$$ to the <span class=\"tex-font-style-bf\">end</span> of the array. </li></ol><p>For example, if $$$n = 5$$$, $$$a = [4, 7, 2, 2, 9]$$$, then the following sequence of operations can be performed: </p><ul> <li> after performing the operation of the first type to the second element, the array $$$a$$$ will become $$$[7, 4, 2, 2, 9]$$$; </li><li> after performing the operation of the second type to the second element, the array $$$a$$$ will become $$$[7, 2, 2, 9, 4]$$$. </li></ul><p>You can perform operations of any type any number of times in any order.</p><p>Find the minimum total number of operations of the first and second type that will make the $$$a$$$ array sorted in non-decreasing order. In other words, what is the minimum number of operations must be performed so the array satisfies the inequalities $$$a[1] \\le a[2] \\le \\ldots \\le a[n]$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases in the test. Then $$$t$$$ test cases follow.</p><p>Each test case starts with a line containing an integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the size of the array $$$a$$$.</p><p>Then follow $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$0 \\le a_i \\le 10^9$$$)\u00a0\u2014 an array that needs to be sorted by the given operations. <span class=\"tex-font-style-bf\">The given array can contain equal elements</span>.</p><p>The sum of $$$n$$$ for all test cases in one test does not exceed $$$2 \\cdot 10^5$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case output one integer\u00a0\u2014 the minimum total number of operations of the first and second type, which will make the array sorted in non-decreasing order.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n9\n5\n4 7 2 2 9\n5\n3 5 8 1 7\n5\n1 2 2 4 5\n2\n0 1\n3\n0 1 0\n4\n0 1 0 0\n4\n0 1 0 1\n4\n0 1 0 2\n20\n16 15 1 10 0 14 0 10 3 9 2 5 4 5 17 9 10 20 0 9\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2\n2\n0\n0\n1\n1\n1\n1\n16\n</pre></div>"], "p_note": ["<p>In the first test case, you first need to move two <span class=\"tex-font-style-tt\">2</span>, to the beginning of the array. Therefore, the desired sequence of operations: $$$[4, 7, 2, 2, 9] \\rightarrow [2, 4, 7, 2, 9] \\rightarrow [2, 2, 4, 7, 9]$$$.</p>", "<p>In the second test case, you need to move the <span class=\"tex-font-style-tt\">1</span> to the beginning of the array, and the <span class=\"tex-font-style-tt\">8</span>\u00a0\u2014 to the end. Therefore, the desired sequence of operations: $$$[3, 5, 8, 1, 7] \\rightarrow [1, 3, 5, 8, 7] \\rightarrow [1, 3, 5, 7, 8]$$$.</p>", "<p>In the third test case, the array is already sorted.</p>"]},
{"p_id": "1368", "p_index": "A", "p_title": "A. C+=", "p_time_limit": "2 seconds", "p_memory_limit": "512 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Leo has developed a new programming language C+=. In C+=, integer variables can only be changed with a \"<span class=\"tex-font-style-tt\">+=</span>\" operation that adds the right-hand side value to the left-hand side variable. For example, performing \"<span class=\"tex-font-style-tt\">a += b</span>\" when <span class=\"tex-font-style-tt\">a = </span>$$$2$$$, <span class=\"tex-font-style-tt\">b = </span>$$$3$$$ changes the value of <span class=\"tex-font-style-tt\">a</span> to $$$5$$$ (the value of <span class=\"tex-font-style-tt\">b</span> does not change).</p><p>In a prototype program Leo has two integer variables <span class=\"tex-font-style-tt\">a</span> and <span class=\"tex-font-style-tt\">b</span>, initialized with some positive values. He can perform any number of operations \"<span class=\"tex-font-style-tt\">a += b</span>\" or \"<span class=\"tex-font-style-tt\">b += a</span>\". Leo wants to test handling large integers, so he wants to make the value of either <span class=\"tex-font-style-tt\">a</span> or <span class=\"tex-font-style-tt\">b</span> <span class=\"tex-font-style-bf\">strictly greater</span> than a given value $$$n$$$. What is the smallest number of operations he has to perform?</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$T$$$ ($$$1 \\leq T \\leq 100$$$)\u00a0\u2014 the number of test cases.</p><p>Each of the following $$$T$$$ lines describes a single test case, and contains three integers $$$a, b, n$$$ ($$$1 \\leq a, b \\leq n \\leq 10^9$$$)\u00a0\u2014 initial values of <span class=\"tex-font-style-tt\">a</span> and <span class=\"tex-font-style-tt\">b</span>, and the value one of the variables has to exceed, respectively.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case print a single integer\u00a0\u2014 the smallest number of operations needed. Separate answers with line breaks.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n1 2 3\n5 4 100\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2\n7\n</pre></div>"], "p_note": ["<p>In the first case we cannot make a variable exceed $$$3$$$ in one operation. One way of achieving this in two operations is to perform \"<span class=\"tex-font-style-tt\">b += a</span>\" twice.</p>"]},
{"p_id": "1367", "p_index": "D", "p_title": "D. Task On The Board", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Polycarp wrote on the board a string $$$s$$$ containing only lowercase Latin letters ('<span class=\"tex-font-style-tt\">a</span>'-'<span class=\"tex-font-style-tt\">z</span>'). This string is known for you and given in the input.</p><p>After that, he erased some letters from the string $$$s$$$, and he rewrote the remaining letters in <span class=\"tex-font-style-bf\">any</span> order. As a result, he got some new string $$$t$$$. You have to find it with some additional information.</p><p>Suppose that the string $$$t$$$ has length $$$m$$$ and the characters are numbered from left to right from $$$1$$$ to $$$m$$$. You are given a sequence of $$$m$$$ integers: $$$b_1, b_2, \\ldots, b_m$$$, where $$$b_i$$$ is the sum of the distances $$$|i-j|$$$ from the index $$$i$$$ to all such indices $$$j$$$ that $$$t_j &gt; t_i$$$ (consider that '<span class=\"tex-font-style-tt\">a</span>'&lt;'<span class=\"tex-font-style-tt\">b</span>'&lt;...&lt;'<span class=\"tex-font-style-tt\">z</span>'). In other words, to calculate $$$b_i$$$, Polycarp finds all such indices $$$j$$$ that the index $$$j$$$ contains a letter that is later in the alphabet than $$$t_i$$$ and sums all the values $$$|i-j|$$$.</p><p>For example, if $$$t$$$ = \"<span class=\"tex-font-style-tt\">abzb</span>\", then:</p><ul> <li> since $$$t_1$$$='<span class=\"tex-font-style-tt\">a</span>', all other indices contain letters which are later in the alphabet, that is: $$$b_1=|1-2|+|1-3|+|1-4|=1+2+3=6$$$; </li><li> since $$$t_2$$$='<span class=\"tex-font-style-tt\">b</span>', only the index $$$j=3$$$ contains the letter, which is later in the alphabet, that is: $$$b_2=|2-3|=1$$$; </li><li> since $$$t_3$$$='<span class=\"tex-font-style-tt\">z</span>', then there are no indexes $$$j$$$ such that $$$t_j&gt;t_i$$$, thus $$$b_3=0$$$; </li><li> since $$$t_4$$$='<span class=\"tex-font-style-tt\">b</span>', only the index $$$j=3$$$ contains the letter, which is later in the alphabet, that is: $$$b_4=|4-3|=1$$$. </li></ul><p>Thus, if $$$t$$$ = \"<span class=\"tex-font-style-tt\">abzb</span>\", then $$$b=[6,1,0,1]$$$.</p><p>Given the string $$$s$$$ and the array $$$b$$$, find any possible string $$$t$$$ for which the following two requirements are fulfilled simultaneously:</p><ul> <li> $$$t$$$ is obtained from $$$s$$$ by erasing some letters (possibly zero) and then writing the rest in <span class=\"tex-font-style-bf\">any</span> order; </li><li> the array, constructed from the string $$$t$$$ according to the rules above, equals to the array $$$b$$$ specified in the input data. </li></ul></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains an integer $$$q$$$ ($$$1 \\le q \\le 100$$$)\u00a0\u2014 the number of test cases in the test. Then $$$q$$$ test cases follow.</p><p>Each test case consists of three lines:</p><ul> <li> the first line contains string $$$s$$$, which has a length from $$$1$$$ to $$$50$$$ and consists of lowercase English letters; </li><li> the second line contains positive integer $$$m$$$ ($$$1 \\le m \\le |s|$$$), where $$$|s|$$$ is the length of the string $$$s$$$, and $$$m$$$ is the length of the array $$$b$$$; </li><li> the third line contains the integers $$$b_1, b_2, \\dots, b_m$$$ ($$$0 \\le b_i \\le 1225$$$). </li></ul><p>It is guaranteed that in each test case an answer exists.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output $$$q$$$ lines: the $$$k$$$-th of them should contain the answer (string $$$t$$$) to the $$$k$$$-th test case. It is guaranteed that an answer to each test case exists. If there are several answers, output any.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\naac\nb\naba\ncodeforces\n</pre></div>"], "p_note": ["<p>In the first test case, such strings $$$t$$$ are suitable: \"<span class=\"tex-font-style-tt\">aac</span>', \"<span class=\"tex-font-style-tt\">aab</span>\".</p>", "<p>In the second test case, such trings $$$t$$$ are suitable: \"<span class=\"tex-font-style-tt\">a</span>\", \"<span class=\"tex-font-style-tt\">b</span>\", \"<span class=\"tex-font-style-tt\">c</span>\".</p>", "<p>In the third test case, only the string $$$t$$$ equals to \"<span class=\"tex-font-style-tt\">aba</span>\" is suitable, but the character '<span class=\"tex-font-style-tt\">b</span>' can be from the second or third position.</p>"]},
{"p_id": "1368", "p_index": "B", "p_title": "B. Codeforces Subsequences", "p_time_limit": "2 seconds", "p_memory_limit": "512 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Karl likes Codeforces and subsequences. He wants to find a string of lowercase English letters that contains at least $$$k$$$ subsequences <span class=\"tex-font-style-tt\">codeforces</span>. Out of all possible strings, Karl wants to find a shortest one.</p><p>Formally, a <span class=\"tex-font-style-tt\">codeforces</span> subsequence of a string $$$s$$$ is a subset of ten characters of $$$s$$$ that read <span class=\"tex-font-style-tt\">codeforces</span> from left to right. For example, <span class=\"tex-font-style-tt\">codeforces</span> contains <span class=\"tex-font-style-tt\">codeforces</span> a single time, while <span class=\"tex-font-style-tt\">codeforcesisawesome</span> contains <span class=\"tex-font-style-tt\">codeforces</span> four times: <span class=\"tex-font-style-tt\"><span class=\"tex-font-style-bf\">codeforces</span>isawesome</span>, <span class=\"tex-font-style-tt\"><span class=\"tex-font-style-bf\">codeforce</span>si<span class=\"tex-font-style-bf\">s</span>awesome</span>, <span class=\"tex-font-style-tt\"><span class=\"tex-font-style-bf\">codeforce</span>sisawe<span class=\"tex-font-style-bf\">s</span>ome</span>, <span class=\"tex-font-style-tt\"><span class=\"tex-font-style-bf\">codeforc</span>esisaw<span class=\"tex-font-style-bf\">es</span>ome</span>.</p><p>Help Karl find any shortest string that contains at least $$$k$$$ <span class=\"tex-font-style-tt\">codeforces</span> subsequences.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The only line contains a single integer $$$k$$$ ($$$1 \\leq k \\leq 10^{16})$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a shortest string of lowercase English letters that contains at least $$$k$$$ <span class=\"tex-font-style-tt\">codeforces</span> subsequences. If there are several such strings, print any of them.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\ncodeforces\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\ncodeforcesss</pre></div>"], "p_note": []},
{"p_id": "1368", "p_index": "C", "p_title": "C. Even Picture", "p_time_limit": "2 seconds", "p_memory_limit": "512 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Leo Jr. draws pictures in his notebook with checkered sheets (that is, each sheet has a regular square grid printed on it). We can assume that the sheets are infinitely large in any direction.</p><p>To draw a picture, Leo Jr. colors some of the cells on a sheet gray. He considers the resulting picture <span class=\"tex-font-style-it\">beautiful</span> if the following conditions are satisfied:</p><ul><li> The picture is <span class=\"tex-font-style-bf\">connected</span>, that is, it is possible to get from any gray cell to any other by following a chain of gray cells, with each pair of adjacent cells in the path being neighbours (that is, sharing a side).</li><li> Each gray cell has an <span class=\"tex-font-style-bf\">even number of gray neighbours</span>.</li><li> There are <span class=\"tex-font-style-bf\">exactly $$$n$$$ gray cells with all gray neighbours</span>. The number of other gray cells can be arbitrary <span class=\"tex-font-style-it\">(but reasonable, so that they can all be listed)</span>.</li></ul><p>Leo Jr. is now struggling to draw a beautiful picture with a particular choice of $$$n$$$. Help him, and provide any example of a beautiful picture.</p><p>To output cell coordinates in your answer, assume that the sheet is provided with a Cartesian coordinate system such that one of the cells is chosen to be the origin $$$(0, 0)$$$, axes $$$0x$$$ and $$$0y$$$ are orthogonal and parallel to grid lines, and a unit step along any axis in any direction takes you to a neighbouring cell.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The only line contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 500$$$)\u00a0\u2014 the number of gray cells with all gray neighbours in a beautiful picture.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>In the first line, print a single integer $$$k$$$\u00a0\u2014 the number of gray cells in your picture. For technical reasons, $$$k$$$ should not exceed $$$5 \\cdot 10^5$$$.</p><p>Each of the following $$$k$$$ lines should contain two integers\u00a0\u2014 coordinates of a gray cell in your picture. All listed cells should be distinct, and the picture should satisdfy all the properties listed above. All coordinates should not exceed $$$10^9$$$ by absolute value.</p><p>One can show that there exists an answer satisfying all requirements with a small enough $$$k$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n12\n1 0\n2 0\n0 1\n1 1\n2 1\n3 1\n0 2\n1 2\n2 2\n3 2\n1 3\n2 3\n</pre></div>"], "p_note": ["<p>The answer for the sample is pictured below:</p>"]},
{"p_id": "1368", "p_index": "D", "p_title": "D. AND, OR and square sum", "p_time_limit": "2 seconds", "p_memory_limit": "512 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Gottfried learned about binary number representation. He then came up with this task and presented it to you.</p><p>You are given a collection of $$$n$$$ non-negative integers $$$a_1, \\ldots, a_n$$$. You are allowed to perform the following operation: choose two distinct indices $$$1 \\leq i, j \\leq n$$$. If before the operation $$$a_i = x$$$, $$$a_j = y$$$, then after the operation $$$a_i = x~\\mathsf{AND}~y$$$, $$$a_j = x~\\mathsf{OR}~y$$$, where $$$\\mathsf{AND}$$$ and $$$\\mathsf{OR}$$$ are bitwise AND and OR respectively (refer to the Notes section for formal description). The operation may be performed any number of times (possibly zero).</p><p>After all operations are done, compute $$$\\sum_{i=1}^n a_i^2$$$\u00a0\u2014 the sum of squares of all $$$a_i$$$. What is the largest sum of squares you can achieve?</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$).</p><p>The second line contains $$$n$$$ integers $$$a_1, \\ldots, a_n$$$ ($$$0 \\leq a_i &lt; 2^{20}$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a single integer\u00a0\u2014 the largest possible sum of squares that can be achieved after several (possibly zero) operations.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n1\n123\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n15129\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n1 3 5\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n51\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n349525 699050\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1099509530625\n</pre></div>"], "p_note": ["<p>In the first sample no operation can be made, thus the answer is $$$123^2$$$.</p>", "<p>In the second sample we can obtain the collection $$$1, 1, 7$$$, and $$$1^2 + 1^2 + 7^2 = 51$$$.</p>", "<p>If $$$x$$$ and $$$y$$$ are represented in binary with equal number of bits (possibly with leading zeros), then each bit of $$$x~\\mathsf{AND}~y$$$ is set to $$$1$$$ if and only if both corresponding bits of $$$x$$$ and $$$y$$$ are set to $$$1$$$. Similarly, each bit of $$$x~\\mathsf{OR}~y$$$ is set to $$$1$$$ if and only if at least one of the corresponding bits of $$$x$$$ and $$$y$$$ are set to $$$1$$$. For example, $$$x = 3$$$ and $$$y = 5$$$ are represented as $$$011_2$$$ and $$$101_2$$$ (highest bit first). Then, $$$x~\\mathsf{AND}~y = 001_2 = 1$$$, and $$$x~\\mathsf{OR}~y = 111_2 = 7$$$.</p>"]},
{"p_id": "1368", "p_index": "E", "p_title": "E. Ski Accidents", "p_time_limit": "2 seconds", "p_memory_limit": "512 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Arthur owns a ski resort on a mountain. There are $$$n$$$ landing spots on the mountain numbered from $$$1$$$ to $$$n$$$ from the top to the foot of the mountain. The spots are connected with one-directional ski tracks. All tracks go towards the foot of the mountain, so there are <span class=\"tex-font-style-bf\">no directed cycles</span> formed by the tracks. There are <span class=\"tex-font-style-bf\">at most two tracks leaving each spot</span>, but many tracks may enter the same spot.</p><p>A skier can start skiing from one spot and stop in another spot if there is a sequence of tracks that lead from the starting spot and end in the ending spot. Unfortunately, recently there were many accidents, because the structure of the resort allows a skier to go through dangerous paths, by reaching high speed and endangering himself and the other customers. Here, a path is called dangerous, if it consists of at least two tracks.</p><p>Arthur wants to secure his customers by closing some of the spots in a way that there are no dangerous paths in the resort. When a spot is closed, all tracks entering and leaving that spot become unusable. </p><p>Formally, after closing some of the spots, <span class=\"tex-font-style-bf\">there should not be a path that consists of two or more tracks</span>.</p><p>Arthur doesn't want to close too many spots. He will be happy to find any way to close <span class=\"tex-font-style-bf\">at most $$$\\frac{4}{7}n$$$ spots</span> so that the remaining part is safe. Help him find any suitable way to do so.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single positive integer $$$T$$$\u00a0\u2014 the number of test cases. $$$T$$$ test case description follows.</p><p>The first line of each description contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n \\leq 2 \\cdot 10^5$$$)\u00a0\u2014 the number of landing spots and tracks respectively.</p><p>The following $$$m$$$ lines describe the tracks. Each of these lines contains two integers $$$x$$$ and $$$y$$$ ($$$1 \\leq x &lt; y \\leq n$$$)\u00a0\u2014 indices of the starting and finishing spots for the respective track. It is guaranteed that at most two tracks start at each spot. There may be tracks in which starting and finishing spots both coincide.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print a single integer $$$k$$$ ($$$0 \\leq k \\leq \\frac{4}{7}n$$$)\u00a0\u2014 the number of spots to be closed. In the next line, print $$$k$$$ distinct integers\u00a0\u2014 indices of all spots to be closed, in any order.</p><p>If there are several answers, you may output any of them. Note that you <span class=\"tex-font-style-bf\">don't have to minimize $$$k$$$</span>. It can be shown that a suitable answer always exists.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n4 6\n1 2\n1 3\n2 3\n2 4\n3 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n2\n3 4 \n4\n4 5 6 7 \n</pre></div>"], "p_note": ["<p>In the first sample case, closing any two spots is suitable.</p>", "<p>In the second sample case, closing only the spot $$$1$$$ is also suitable.</p>"]},
{"p_id": "1368", "p_index": "G", "p_title": "G. Shifting Dominoes", "p_time_limit": "2 seconds", "p_memory_limit": "512 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Bill likes to play with dominoes. He took an $$$n \\times m$$$ board divided into equal square cells, and covered it with dominoes. Each domino covers two adjacent cells of the board either horizontally or vertically, and each cell is covered exactly once with a half of one domino (that is, there are no uncovered cells, and no two dominoes cover the same cell twice).</p><p>After that Bill decided to play with the covered board and share some photos of it on social media. First, he removes exactly one domino from the board, freeing two of the cells. Next, he moves dominoes around. A domino can only be moved <span class=\"tex-font-style-bf\">along the line parallel to its longer side</span>. A move in the chosen direction is possible if the next cell in this direction is currently free. Bill doesn't want to lose track of what the original tiling looks like, so he makes sure that at any point each domino <span class=\"tex-font-style-bf\">shares at least one cell with its original position</span>.</p><p>After removing a domino and making several (possibly, zero) moves Bill takes a photo of the board and posts it. However, with the amount of filters Bill is using, domino borders are not visible, so <span class=\"tex-font-style-bf\">only the two free cells of the board</span> can be identified. When the photo is posted, Bill reverts the board to its original state and starts the process again.</p><p>Bill wants to post as many photos as possible, but he will not post any photo twice. How many distinct photos can he take? Recall that photos are different if the pairs of free cells in the photos are different.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains two positive integers $$$n$$$ and $$$m$$$ ($$$nm \\leq 2 \\cdot 10^5$$$)\u00a0\u2014 height and width of the board respectively.</p><p>The next $$$n$$$ lines describe the tiling of the board, row by row from top to bottom. Each of these lines contains $$$m$$$ characters, describing the cells in the corresponding row left to right. Each character is one of <span class=\"tex-font-style-tt\">U</span>, <span class=\"tex-font-style-tt\">D</span>, <span class=\"tex-font-style-tt\">L</span>, or <span class=\"tex-font-style-tt\">R</span>, meaning that the cell is covered with a top, bottom, left, or right half of a domino respectively.</p><p>It is guaranteed that the described tiling is valid, that is, each half-domino has a counterpart in the relevant location. In particular, since tiling is possible, the number of cells in the board is even.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a single integer\u00a0\u2014 the number of distinct photos Bill can take.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n2 4\nUUUU\nDDDD\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n4\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n2 3\nULR\nDLR\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n6\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n6 6\nULRUUU\nDUUDDD\nUDDLRU\nDLRLRD\nULRULR\nDLRDLR\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n133\n</pre></div>"], "p_note": ["<p>In the first sample case, no moves are possible after removing any domino, thus there are four distinct photos.</p>", "<p>In the second sample case, four photos are possible after removing the leftmost domino by independently moving/not moving the remaining two dominoes. Two more different photos are obtained by removing one of the dominoes on the right.</p>"]},
{"p_id": "1368", "p_index": "H1", "p_title": "H1. Breadboard Capacity (easy version)", "p_time_limit": "2 seconds", "p_memory_limit": "512 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">This is an easier version of the problem H without modification queries.</span></p><p>Lester and Delbert work at an electronics company. They are currently working on a microchip component serving to connect two independent parts of a large supercomputer.</p><p>The component is built on top of a <span class=\"tex-font-style-it\">breadboard</span>\u00a0\u2014 a grid-like base for a microchip. The breadboard has $$$n$$$ rows and $$$m$$$ columns, and each row-column intersection contains a node. Also, on each side of the breadboard there are ports that can be attached to adjacent nodes. Left and right side have $$$n$$$ ports each, and top and bottom side have $$$m$$$ ports each. Each of the ports is connected on the outside to one of the parts bridged by the breadboard, and is colored red or blue respectively.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/e6a12a78bc56706cf5c95fdc316ea249219fb133.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"> </center><p>Ports can be connected by wires going inside the breadboard. However, there are a few rules to follow:</p><ul><li> Each wire should connect a red port with a blue port, and each port should be connected to at most one wire.</li><li> Each part of the wire should be horizontal or vertical, and turns are only possible at one of the nodes.</li><li> To avoid interference, wires can not have common parts of non-zero length (but may have common nodes). Also, a wire can not cover the same segment of non-zero length twice.</li></ul><p>The <span class=\"tex-font-style-it\">capacity</span> of the breadboard is the largest number of red-blue wire connections that can be made subject to the rules above. For example, the breadboard above has capacity $$$7$$$, and one way to make seven connections is pictured below.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/529a6ec6323f826da5a530372962049e6cb652a8.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"> </center><p><span class=\"tex-font-style-it\">Up to this point statements of both versions are identical. Differences follow below.</span></p><p>Given the current breadboard configuration, help Lester and Delbert find its capacity efficiently.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains three integers $$$n, m, q$$$ ($$$1 \\leq n, m \\leq 10^5$$$, $$$\\pmb{q = 0}$$$). $$$n$$$ and $$$m$$$ are the number of rows and columns of the breadboard respectively. <span class=\"tex-font-style-it\">In this version $$$q$$$ is always zero, and is only present for consistency with the harder version.</span></p><p>The next four lines describe initial coloring of the ports. Each character in these lines is either <span class=\"tex-font-style-tt\">R</span> or <span class=\"tex-font-style-tt\">B</span>, depending on the coloring of the respective port. The first two of these lines contain $$$n$$$ characters each, and describe ports on the left and right sides respectively from top to bottom. The last two lines contain $$$m$$$ characters each, and describe ports on the top and bottom sides respectively from left to right.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print a single integer\u00a0\u2014 the given breadboard capacity.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4 5 0\nBBRR\nRBBR\nBBBBB\nRRRRR\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n7\n</pre></div>"], "p_note": []},
{"p_id": "1369", "p_index": "A", "p_title": "A. FashionabLee", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">Lee is going to fashionably decorate his house for a party, using some regular convex polygons...</span></p><p>Lee thinks a regular $$$n$$$-sided (convex) polygon is <span class=\"tex-font-style-it\">beautiful</span> if and only if he can rotate it in such a way that at least one of its edges is parallel to the $$$OX$$$-axis and at least one of its edges is parallel to the $$$OY$$$-axis at the same time.</p><p>Recall that a regular $$$n$$$-sided polygon is a convex polygon with $$$n$$$ vertices such that all the edges and angles are equal.</p><p>Now he is shopping: the market has $$$t$$$ regular polygons. For each of them print <span class=\"tex-font-style-tt\">YES</span> if it is beautiful and <span class=\"tex-font-style-tt\">NO</span> otherwise.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of polygons in the market. </p><p>Each of the next $$$t$$$ lines contains a single integer $$$n_i$$$ ($$$3 \\le n_i \\le 10^9$$$): it means that the $$$i$$$-th polygon is a regular $$$n_i$$$-sided polygon. </p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each polygon, print <span class=\"tex-font-style-tt\">YES</span> if it's beautiful or <span class=\"tex-font-style-tt\">NO</span> otherwise (case insensitive).</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n3\n4\n12\n1000000000\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nNO\nYES\nYES\nYES\n</pre></div>"], "p_note": ["<p>In the example, there are $$$4$$$ polygons in the market. It's easy to see that an equilateral triangle (a regular $$$3$$$-sided polygon) is not beautiful, a square (a regular $$$4$$$-sided polygon) is beautiful and a regular $$$12$$$-sided polygon (is shown below) is beautiful as well.</p>"]},
{"p_id": "1369", "p_index": "C", "p_title": "C. RationalLee", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">Lee just became Master in Codeforces, and so, he went out to buy some gifts for his friends. He bought $$$n$$$ integers, now it's time to distribute them between his friends rationally...</span></p><p>Lee has $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ in his backpack and he has $$$k$$$ friends. Lee would like to distribute <span class=\"tex-font-style-bf\">all</span> integers in his backpack between his friends, such that the $$$i$$$-th friend will get exactly $$$w_i$$$ integers and each integer will be handed over to exactly one friend.</p><p>Let's define the <span class=\"tex-font-style-it\">happiness</span> of a friend as the sum of the maximum and the minimum integer he'll get.</p><p>Lee would like to make his friends as happy as possible, in other words, he'd like to maximize the sum of friends' happiness. Now he asks you to calculate the maximum sum of friends' happiness.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases.</p><p>Next $$$3t$$$ lines contain test cases\u00a0\u2014 one per three lines.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$; $$$1 \\le k \\le n$$$)\u00a0\u2014 the number of integers Lee has and the number of Lee's friends.</p><p>The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$-10^9 \\le a_i \\le 10^9$$$)\u00a0\u2014 the integers Lee has.</p><p>The third line contains $$$k$$$ integers $$$w_1, w_2, \\ldots, w_k$$$ ($$$1 \\le w_i \\le n$$$; $$$w_1 + w_2 + \\ldots + w_k = n$$$)\u00a0\u2014 the number of integers Lee wants to give to each friend. </p><p>It's guaranteed that the sum of $$$n$$$ over test cases is less than or equal to $$$2 \\cdot 10^5$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print a single integer\u00a0\u2014 the maximum sum of happiness Lee can achieve.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n4 2\n1 13 7 17\n1 3\n6 2\n10 10 10 10 11 11\n3 3\n4 4\n1000000000 1000000000 1000000000 1000000000\n1 1 1 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n48\n42\n8000000000\n</pre></div>"], "p_note": ["<p>In the first test case, Lee should give the greatest integer to the first friend (his happiness will be $$$17 + 17$$$) and remaining integers to the second friend (his happiness will be $$$13 + 1$$$).</p>", "<p>In the second test case, Lee should give $$$\\{10, 10, 11\\}$$$ to the first friend and to the second friend, so the total happiness will be equal to $$$(11 + 10) + (11 + 10)$$$</p>", "<p>In the third test case, Lee has four friends and four integers, it doesn't matter how he distributes the integers between his friends.</p>"]},
{"p_id": "1369", "p_index": "D", "p_title": "D. TediousLee", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">Lee tried so hard to make a good div.2 D problem to balance his recent contest, but it still doesn't feel good at all. Lee invented it so tediously slow that he managed to develop a phobia about div.2 D problem setting instead. And now he is hiding behind the bushes...</span></p><p>Let's define a <span class=\"tex-font-style-it\">Rooted Dead Bush</span> (RDB) of level $$$n$$$ as a rooted tree constructed as described below.</p><p>A rooted dead bush of level $$$1$$$ is a single vertex. To construct an RDB of level $$$i$$$ we, at first, construct an RDB of level $$$i-1$$$, then for each vertex $$$u$$$: </p><ul> <li> if $$$u$$$ has no children then we will add a single child to it; </li><li> if $$$u$$$ has one child then we will add two children to it; </li><li> if $$$u$$$ has more than one child, then we will skip it. </li></ul><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/bc12fd72ff405f3dcf8fe43f587b14f1c73980df.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"> <span class=\"tex-font-size-small\">Rooted Dead Bushes of level $$$1$$$, $$$2$$$ and $$$3$$$.</span> </center><p>Let's define a <span class=\"tex-font-style-it\">claw</span> as a rooted tree with four vertices: one root vertex (called also as center) with three children. It looks like a claw:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/2fa28290a38e1783879aa47b2d323f1eef3d32cc.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"> <span class=\"tex-font-size-small\">The center of the claw is the vertex with label $$$1$$$.</span> </center><p>Lee has a Rooted Dead Bush of level $$$n$$$. Initially, all vertices of his RDB are green.</p><p>In one move, he can choose a claw in his RDB, if all vertices in the claw are <span class=\"tex-font-style-it\">green</span> and all vertices of the claw are children of its center, then he colors the claw's vertices in yellow.</p><p>He'd like to know the maximum number of yellow vertices he can achieve. Since the answer might be very large, print it modulo $$$10^9+7$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases.</p><p>Next $$$t$$$ lines contain test cases\u00a0\u2014 one per line.</p><p>The first line of each test case contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^6$$$)\u00a0\u2014 the level of Lee's RDB.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print a single integer\u00a0\u2014 the maximum number of yellow vertices Lee can make modulo $$$10^9 + 7$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n7\n1\n2\n3\n4\n5\n100\n2000000\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0\n0\n4\n4\n12\n990998587\n804665184\n</pre></div>"], "p_note": ["<p>It's easy to see that the answer for RDB of level $$$1$$$ or $$$2$$$ is $$$0$$$.</p>", "<p>The answer for RDB of level $$$3$$$ is $$$4$$$ since there is only one claw we can choose: $$$\\{1, 2, 3, 4\\}$$$.</p>", "<p>The answer for RDB of level $$$4$$$ is $$$4$$$ since we can choose either single claw $$$\\{1, 3, 2, 4\\}$$$ or single claw $$$\\{2, 7, 5, 6\\}$$$. There are no other claws in the RDB of level $$$4$$$ (for example, we can't choose $$$\\{2, 1, 7, 6\\}$$$, since $$$1$$$ is not a child of center vertex $$$2$$$).</p>"]},
{"p_id": "1368", "p_index": "H2", "p_title": "H2. Breadboard Capacity (hard version)", "p_time_limit": "2 seconds", "p_memory_limit": "512 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">This is a harder version of the problem H with modification queries.</span></p><p>Lester and Delbert work at an electronics company. They are currently working on a microchip component serving to connect two independent parts of a large supercomputer.</p><p>The component is built on top of a <span class=\"tex-font-style-it\">breadboard</span>\u00a0\u2014 a grid-like base for a microchip. The breadboard has $$$n$$$ rows and $$$m$$$ columns, and each row-column intersection contains a node. Also, on each side of the breadboard there are ports that can be attached to adjacent nodes. Left and right side have $$$n$$$ ports each, and top and bottom side have $$$m$$$ ports each. Each of the ports is connected on the outside to one of the parts bridged by the breadboard, and is colored red or blue respectively.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/e6a12a78bc56706cf5c95fdc316ea249219fb133.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"> </center><p>Ports can be connected by wires going inside the breadboard. However, there are a few rules to follow:</p><ul><li> Each wire should connect a red port with a blue port, and each port should be connected to at most one wire.</li><li> Each part of the wire should be horizontal or vertical, and turns are only possible at one of the nodes.</li><li> To avoid interference, wires can not have common parts of non-zero length (but may have common nodes). Also, a wire can not cover the same segment of non-zero length twice.</li></ul><p>The <span class=\"tex-font-style-it\">capacity</span> of the breadboard is the largest number of red-blue wire connections that can be made subject to the rules above. For example, the breadboard above has capacity $$$7$$$, and one way to make seven connections is pictured below.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/529a6ec6323f826da5a530372962049e6cb652a8.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"> </center><p><span class=\"tex-font-style-it\">Up to this point statements of both versions are identical. Differences follow below.</span></p><p>As is common, specifications of the project change a lot during development, so coloring of the ports is not yet fixed. There are $$$q$$$ modifications to process, each of them has the form of \"colors of all ports in a contiguous range along one of the sides are switched (red become blue, and blue become red)\". All modifications are persistent, that is, the previous modifications are not undone before the next one is made.</p><p>To estimate how bad the changes are, Lester and Delbert need to find the breadboard capacity after each change. Help them do this efficiently.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains three integers $$$n, m, q$$$ ($$$1 \\leq n, m \\leq 10^5$$$, $$$0 \\leq q \\leq 10^5$$$)\u00a0\u2014 the number of rows and columns of the breadboard, and the number of modifications respectively.</p><p>The next four lines describe initial coloring of the ports. Each character in these lines is either <span class=\"tex-font-style-tt\">R</span> or <span class=\"tex-font-style-tt\">B</span>, depending on the coloring of the respective port. The first two of these lines contain $$$n$$$ characters each, and describe ports on the left and right sides respectively from top to bottom. The last two lines contain $$$m$$$ characters each, and describe ports on the top and bottom sides respectively from left to right.</p><p>The next $$$q$$$ lines describe modifications. Each of these lines contains a character $$$s$$$, followed by two integers $$$l$$$ and $$$r$$$. If $$$s$$$ is <span class=\"tex-font-style-tt\">L</span> or <span class=\"tex-font-style-tt\">R</span>, the modification is concerned with ports on the left/right side respectively, $$$l$$$ and $$$r$$$ satisfy $$$1 \\leq l \\leq r \\leq n$$$, and ports in rows between $$$l$$$ and $$$r$$$ (inclusive) on the side switch colors. Similarly, if $$$s$$$ is <span class=\"tex-font-style-tt\">U</span> or <span class=\"tex-font-style-tt\">D</span>, then $$$1 \\leq l \\leq r \\leq m$$$, and ports in columns between $$$l$$$ and $$$r$$$ (inclusive) on the top/bottom side respectively switch colors.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print $$$q + 1$$$ integers, one per line\u00a0\u2014 the breadboard capacity after $$$0, \\ldots, q$$$ modifications have been made to the initial coloring.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4 5 4\nBBRR\nRBBR\nBBBBB\nRRRRR\nL 2 3\nR 3 4\nU 1 5\nD 1 5\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n7\n7\n9\n4\n9\n</pre></div>"], "p_note": []},
{"p_id": "1369", "p_index": "B", "p_title": "B. AccurateLee", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">Lee was cleaning his house for the party when he found a messy string under the carpets. Now he'd like to make it clean accurately and in a stylish way...</span></p><p>The string $$$s$$$ he found is a binary string of length $$$n$$$ (i. e. string consists only of <span class=\"tex-font-style-tt\">0</span>-s and <span class=\"tex-font-style-tt\">1</span>-s).</p><p>In one move he can choose two consecutive characters $$$s_i$$$ and $$$s_{i+1}$$$, and if $$$s_i$$$ is <span class=\"tex-font-style-tt\">1</span> and $$$s_{i + 1}$$$ is <span class=\"tex-font-style-tt\">0</span>, he can erase <span class=\"tex-font-style-bf\">exactly one of them</span> (he can choose which one to erase but he can't erase both characters simultaneously). The string shrinks after erasing.</p><p>Lee can make an arbitrary number of moves (possibly zero) and he'd like to make the string $$$s$$$ as <span class=\"tex-font-style-it\">clean</span> as possible. He thinks for two different strings $$$x$$$ and $$$y$$$, the <span class=\"tex-font-style-bf\">shorter</span> string is cleaner, and if they are the same length, then the <span class=\"tex-font-style-it\">lexicographically smaller</span> string is cleaner.</p><p>Now you should answer $$$t$$$ test cases: for the $$$i$$$-th test case, print the cleanest possible string that Lee can get by doing some number of moves.</p><p>Small reminder: if we have two strings $$$x$$$ and $$$y$$$ of the same length then $$$x$$$ is lexicographically smaller than $$$y$$$ if there is a position $$$i$$$ such that $$$x_1 = y_1$$$, $$$x_2 = y_2$$$,..., $$$x_{i - 1} = y_{i - 1}$$$ and $$$x_i &lt; y_i$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains the integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases. </p><p>Next $$$2t$$$ lines contain test cases\u00a0\u2014 one per two lines.</p><p>The first line of each test case contains the integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$)\u00a0\u2014 the length of the string $$$s$$$.</p><p>The second line contains the binary string $$$s$$$. The string $$$s$$$ is a string of length $$$n$$$ which consists only of zeroes and ones.</p><p>It's guaranteed that sum of $$$n$$$ over test cases doesn't exceed $$$10^5$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print $$$t$$$ answers\u00a0\u2014 one per test case.</p><p>The answer to the $$$i$$$-th test case is the cleanest string Lee can get after doing some number of moves (possibly zero).</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n5\n10\n0001111111\n4\n0101\n8\n11001101\n10\n1110000000\n1\n1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0001111111\n001\n01\n0\n1\n</pre></div>"], "p_note": ["<p>In the first test case, Lee can't perform any moves.</p>", "<p>In the second test case, Lee should erase $$$s_2$$$.</p>", "<p>In the third test case, Lee can make moves, for example, in the following order: 11001<span class=\"tex-font-style-underline\">10</span>1\u00a0$$$\\rightarrow$$$ 1<span class=\"tex-font-style-underline\">10</span>0101\u00a0$$$\\rightarrow$$$ 1<span class=\"tex-font-style-underline\">10</span>101\u00a0$$$\\rightarrow$$$ <span class=\"tex-font-style-underline\">10</span>101\u00a0$$$\\rightarrow$$$ 1<span class=\"tex-font-style-underline\">10</span>1\u00a0$$$\\rightarrow$$$ <span class=\"tex-font-style-underline\">10</span>1\u00a0$$$\\rightarrow$$$ 01.</p>"]},
{"p_id": "1369", "p_index": "E", "p_title": "E. DeadLee", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">Lee bought some food for dinner time, but Lee's friends eat dinner in a deadly way. Lee is so scared, he doesn't want to die, at least not before seeing Online IOI 2020...</span></p><p>There are $$$n$$$ different types of food and $$$m$$$ Lee's best friends. Lee has $$$w_i$$$ plates of the $$$i$$$-th type of food and each friend has two different favorite types of food: the $$$i$$$-th friend's favorite types of food are $$$x_i$$$ and $$$y_i$$$ ($$$x_i \\ne y_i$$$).</p><p>Lee will start calling his friends one by one. Whoever is called will go to the kitchen and will try to eat <span class=\"tex-font-style-bf\">one plate of each of his favorite food types</span>. Each of the friends will go to the kitchen exactly once.</p><p>The only problem is the following: if a friend will eat at least one plate of food (in total) then he will be harmless. But if there is nothing left for him to eat (neither $$$x_i$$$ nor $$$y_i$$$), he will eat Lee instead $$$\\times\\_\\times$$$.</p><p>Lee can choose the order of friends to call, so he'd like to determine if he can survive dinner or not. Also, he'd like to know the order itself.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le 10^5$$$; $$$1 \\le m \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the number of different food types and the number of Lee's friends. </p><p>The second line contains $$$n$$$ integers $$$w_1, w_2, \\ldots, w_n$$$ ($$$0 \\le w_i \\le 10^6$$$)\u00a0\u2014 the number of plates of each food type.</p><p>The $$$i$$$-th line of the next $$$m$$$ lines contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$1 \\le x_i, y_i \\le n$$$; $$$x_i \\ne y_i$$$)\u00a0\u2014 the favorite types of food of the $$$i$$$-th friend. </p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>If Lee can survive the dinner then print <span class=\"tex-font-style-tt\">ALIVE</span> (case insensitive), otherwise print <span class=\"tex-font-style-tt\">DEAD</span> (case insensitive).</p><p>Also, if he can survive the dinner, print the order Lee should call friends. If there are multiple valid orders, print any of them.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3 3\n1 2 1\n1 2\n2 3\n1 3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nALIVE\n3 2 1 \n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n3 2\n1 1 0\n1 2\n1 3\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nALIVE\n2 1 \n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n4 4\n1 2 0 1\n1 3\n1 2\n2 3\n2 4\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nALIVE\n1 3 2 4 \n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n5 5\n1 1 1 2 1\n3 4\n1 2\n2 3\n4 5\n4 5\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nALIVE\n5 4 1 3 2 \n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n4 10\n2 4 1 4\n3 2\n4 2\n4 1\n3 1\n4 1\n1 3\n3 2\n2 1\n3 1\n2 4\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nDEAD\n</pre></div>"], "p_note": ["<p>In the first example, any of the following orders of friends are correct : $$$[1, 3, 2]$$$, $$$[3, 1, 2]$$$, $$$[2, 3, 1]$$$, $$$[3, 2, 1]$$$.</p>", "<p>In the second example, Lee should call the second friend first (the friend will eat a plate of food $$$1$$$) and then call the first friend (the friend will eat a plate of food $$$2$$$). If he calls the first friend sooner than the second one, then the first friend will eat one plate of food $$$1$$$ and food $$$2$$$ and there will be no food left for the second friend to eat.</p>"]},
{"p_id": "1369", "p_index": "F", "p_title": "F. BareLee", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-it\">Lee is used to finish his stories in a stylish way, this time he barely failed it, but Ice Bear came and helped him. Lee is so grateful for it, so he decided to show Ice Bear his new game called \"Critic\"...</span></p><p>The game is a one versus one game. It has $$$t$$$ rounds, each round has two integers $$$s_i$$$ and $$$e_i$$$ (which are determined and are known before the game begins, $$$s_i$$$ and $$$e_i$$$ may differ from round to round). The integer $$$s_i$$$ is written on the board at the beginning of the corresponding round. </p><p>The players will take turns. Each player will erase the number on the board (let's say it was $$$a$$$) and will choose to write either $$$2 \\cdot a$$$ or $$$a + 1$$$ instead. Whoever writes a number strictly greater than $$$e_i$$$ loses that round and the other one wins that round.</p><p>Now Lee wants to play \"Critic\" against Ice Bear, for each round he has chosen the round's $$$s_i$$$ and $$$e_i$$$ in advance. Lee will start the first round, the loser of each round will start the next round.</p><p>The winner of the last round is the winner of the game, and the loser of the last round is the loser of the game.</p><p>Determine if Lee can be the winner independent of Ice Bear's moves or not. Also, determine if Lee can be the loser independent of Ice Bear's moves or not.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains the integer $$$t$$$ ($$$1 \\le t \\le 10^5$$$)\u00a0\u2014 the number of rounds the game has. </p><p>Then $$$t$$$ lines follow, each contains two integers $$$s_i$$$ and $$$e_i$$$ ($$$1 \\le s_i \\le e_i \\le 10^{18}$$$)\u00a0\u2014 the $$$i$$$-th round's information.</p><p>The rounds are played in the same order as given in input, $$$s_i$$$ and $$$e_i$$$ for all rounds are known to everyone before the game starts.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print two integers.</p><p>The first one should be <span class=\"tex-font-style-tt\">1</span> if Lee can be the winner independent of Ice Bear's moves, and <span class=\"tex-font-style-tt\">0</span> otherwise.</p><p>The second one should be <span class=\"tex-font-style-tt\">1</span> if Lee can be the loser independent of Ice Bear's moves, and <span class=\"tex-font-style-tt\">0</span> otherwise.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n5 8\n1 4\n3 10\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1 1\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n1 2\n2 3\n3 4\n4 5\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0 0\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n1\n1 1\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0 1\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n1 9\n4 5\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n0 0\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n1 2\n2 8\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1 0\n</pre></div>", "<div class=\"input\"><div class=\"title\">Input</div><pre>\n6\n216986951114298167 235031205335543871\n148302405431848579 455670351549314242\n506251128322958430 575521452907339082\n1 768614336404564650\n189336074809158272 622104412002885672\n588320087414024192 662540324268197150\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1 0\n</pre></div>"], "p_note": ["<p>Remember, whoever writes an integer greater than $$$e_i$$$ loses.</p>"]},
{"p_id": "1367", "p_index": "A", "p_title": "A. Short Substrings", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Alice guesses the strings that Bob made for her.</p><p>At first, Bob came up with the secret string $$$a$$$ consisting of lowercase English letters. The string $$$a$$$ has a length of $$$2$$$ or more characters. Then, from string $$$a$$$ he builds a new string $$$b$$$ and offers Alice the string $$$b$$$ so that she can guess the string $$$a$$$.</p><p>Bob builds $$$b$$$ from $$$a$$$ as follows: he writes all the substrings of length $$$2$$$ of the string $$$a$$$ in the order from left to right, and then joins them in the same order into the string $$$b$$$.</p><p>For example, if Bob came up with the string $$$a$$$=\"<span class=\"tex-font-style-tt\">abac</span>\", then all the substrings of length $$$2$$$ of the string $$$a$$$ are: \"<span class=\"tex-font-style-tt\">ab</span>\", \"<span class=\"tex-font-style-tt\">ba</span>\", \"<span class=\"tex-font-style-tt\">ac</span>\". Therefore, the string $$$b$$$=\"<span class=\"tex-font-style-tt\">abbaac</span>\".</p><p>You are given the string $$$b$$$. Help Alice to guess the string $$$a$$$ that Bob came up with. It is guaranteed that $$$b$$$ was built according to the algorithm given above. It can be proved that the answer to the problem is unique.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single positive integer $$$t$$$ ($$$1 \\le t \\le 1000$$$)\u00a0\u2014 the number of test cases in the test. Then $$$t$$$ test cases follow.</p><p>Each test case consists of one line in which the string $$$b$$$ is written, consisting of lowercase English letters ($$$2 \\le |b| \\le 100$$$)\u00a0\u2014 the string Bob came up with, where $$$|b|$$$ is the length of the string $$$b$$$. It is guaranteed that $$$b$$$ was built according to the algorithm given above.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Output $$$t$$$ answers to test cases. Each answer is the secret string $$$a$$$, consisting of lowercase English letters, that Bob came up with.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\nabbaac\nac\nbccddaaf\nzzzzzzzzzz\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\nabac\nac\nbcdaf\nzzzzzz\n</pre></div>"], "p_note": ["<p>The first test case is explained in the statement.</p>", "<p>In the second test case, Bob came up with the string $$$a$$$=\"<span class=\"tex-font-style-tt\">ac</span>\", the string $$$a$$$ has a length $$$2$$$, so the string $$$b$$$ is equal to the string $$$a$$$.</p>", "<p>In the third test case, Bob came up with the string $$$a$$$=\"<span class=\"tex-font-style-tt\">bcdaf</span>\", substrings of length $$$2$$$ of string $$$a$$$ are: \"<span class=\"tex-font-style-tt\">bc</span>\", \"<span class=\"tex-font-style-tt\">cd</span>\", \"<span class=\"tex-font-style-tt\">da</span>\", \"<span class=\"tex-font-style-tt\">af</span>\", so the string $$$b$$$=\"<span class=\"tex-font-style-tt\">bccddaaf</span>\".</p>"]},
{"p_id": "1370", "p_index": "A", "p_title": "A. Maximum GCD", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Let's consider all integers in the range from $$$1$$$ to $$$n$$$ (inclusive).</p><p>Among all pairs of <span class=\"tex-font-style-bf\">distinct</span> integers in this range, find the maximum possible greatest common divisor of integers in pair. Formally, find the maximum value of $$$\\mathrm{gcd}(a, b)$$$, where $$$1 \\leq a &lt; b \\leq n$$$.</p><p>The greatest common divisor, $$$\\mathrm{gcd}(a, b)$$$, of two positive integers $$$a$$$ and $$$b$$$ is the biggest integer that is a divisor of both $$$a$$$ and $$$b$$$.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\leq t \\leq 100$$$) \u00a0\u2014 the number of test cases. The description of the test cases follows.</p><p>The only line of each test case contains a single integer $$$n$$$ ($$$2 \\leq n \\leq 10^6$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, output the maximum value of $$$\\mathrm{gcd}(a, b)$$$ among all $$$1 \\leq a &lt; b \\leq n$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n2\n3\n5\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1\n2\n</pre></div>"], "p_note": ["<p>In the first test case, $$$\\mathrm{gcd}(1, 2) = \\mathrm{gcd}(2, 3) = \\mathrm{gcd}(1, 3) = 1$$$.</p>", "<p>In the second test case, $$$2$$$ is the maximum possible value, corresponding to $$$\\mathrm{gcd}(2, 4)$$$.</p>"]},
{"p_id": "1359", "p_index": "A", "p_title": "A. Berland Poker", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>The game of Berland poker is played with a deck of $$$n$$$ cards, $$$m$$$ of which are jokers. $$$k$$$ players play this game ($$$n$$$ is divisible by $$$k$$$).</p><p>At the beginning of the game, each player takes $$$\\frac{n}{k}$$$ cards from the deck (so each card is taken by exactly one player). The player who has the maximum number of jokers is the winner, and he gets the number of points equal to $$$x - y$$$, where $$$x$$$ is the number of jokers in the winner's hand, and $$$y$$$ is the maximum number of jokers among all other players. If there are two or more players with maximum number of jokers, all of them are winners and they get $$$0$$$ points.</p><p>Here are some examples:</p><ul> <li> $$$n = 8$$$, $$$m = 3$$$, $$$k = 2$$$. If one player gets $$$3$$$ jokers and $$$1$$$ plain card, and another player gets $$$0$$$ jokers and $$$4$$$ plain cards, then the first player is the winner and gets $$$3 - 0 = 3$$$ points; </li><li> $$$n = 4$$$, $$$m = 2$$$, $$$k = 4$$$. Two players get plain cards, and the other two players get jokers, so both of them are winners and get $$$0$$$ points; </li><li> $$$n = 9$$$, $$$m = 6$$$, $$$k = 3$$$. If the first player gets $$$3$$$ jokers, the second player gets $$$1$$$ joker and $$$2$$$ plain cards, and the third player gets $$$2$$$ jokers and $$$1$$$ plain card, then the first player is the winner, and he gets $$$3 - 2 = 1$$$ point; </li><li> $$$n = 42$$$, $$$m = 0$$$, $$$k = 7$$$. Since there are no jokers, everyone gets $$$0$$$ jokers, everyone is a winner, and everyone gets $$$0$$$ points. </li></ul><p>Given $$$n$$$, $$$m$$$ and $$$k$$$, calculate the maximum number of points a player can get for winning the game.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 500$$$) \u2014 the number of test cases.</p><p>Then the test cases follow. Each test case contains three integers $$$n$$$, $$$m$$$ and $$$k$$$ ($$$2 \\le n \\le 50$$$, $$$0 \\le m \\le n$$$, $$$2 \\le k \\le n$$$, $$$k$$$ is a divisors of $$$n$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print one integer \u2014 the maximum number of points a player can get for winning the game.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n8 3 2\n4 2 4\n9 6 3\n42 0 7\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n3\n0\n1\n0\n</pre></div>"], "p_note": ["<p>Test cases of the example are described in the statement.</p>"]},
{"p_id": "1362", "p_index": "B", "p_title": "B. Johnny and His Hobbies", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>Among Johnny's numerous hobbies, there are two seemingly harmless ones: applying bitwise operations and sneaking into his dad's office. As it is usually the case with small children, Johnny is unaware that combining these two activities can get him in a lot of trouble.</p><p>There is a set $$$S$$$ containing very important numbers on his dad's desk. The minute Johnny heard about it, he decided that it's a good idea to choose a <span class=\"tex-font-style-bf\">positive</span> integer $$$k$$$ and replace each element $$$s$$$ of the set $$$S$$$ with $$$s \\oplus k$$$ ($$$\\oplus$$$ denotes the <a href=\"https://en.wikipedia.org/wiki/Exclusive_or#Computer_science\">exclusive or</a> operation). </p><p>Help him choose such $$$k$$$ that Johnny's dad will not see any difference after his son is done playing (i.e. Johnny will get the same set as before playing). It is possible that no such number exists. It is also possible that there are many of them. In such a case, output the smallest one. Note that the order of elements in a set doesn't matter, i.e. set $$$\\{1, 2, 3\\}$$$ equals to set $$$\\{2, 1, 3\\}$$$.</p><p>Formally, find the smallest positive integer $$$k$$$ such that $$$\\{s \\oplus k | s \\in S\\} = S$$$ or report that there is no such number.</p><p>For example, if $$$S = \\{1, 3, 4\\}$$$ and $$$k = 2$$$, new set will be equal to $$$\\{3, 1, 6\\}$$$. If $$$S = \\{0, 1, 2, 3\\}$$$ and $$$k = 1$$$, after playing set will stay the same.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>In the first line of input, there is a single integer $$$t$$$ ($$$1 \\leq t \\leq 1024$$$), the number of test cases. In the next lines, $$$t$$$ test cases follow. Each of them consists of two lines. </p><p>In the first line there is a single integer $$$n$$$ ($$$1 \\leq n \\leq 1024$$$) denoting the number of elements in set $$$S$$$. Second line consists of $$$n$$$ <span class=\"tex-font-style-bf\">distinct</span> integers $$$s_i$$$ ($$$0 \\leq s_i &lt; 1024$$$), elements of $$$S$$$.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases will not exceed $$$1024$$$.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print $$$t$$$ lines; $$$i$$$-th line should contain the answer to the $$$i$$$-th test case, the minimal positive integer $$$k$$$ satisfying the conditions or $$$-1$$$ if no such $$$k$$$ exists.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n6\n4\n1 0 2 3\n6\n10 7 14 8 3 12\n2\n0 2\n3\n1 2 3\n6\n1 4 6 10 11 12\n2\n0 1023\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1\n4\n2\n-1\n-1\n1023\n</pre></div>"], "p_note": ["<p>In the first test case, the answer is $$$1$$$ because it is a minimum positive integer and it satisfies all the conditions.</p>"]},
{"p_id": "1359", "p_index": "B", "p_title": "B. New Theatre Square", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You might have remembered Theatre square from the <a href=\"https://codeforces.com/problemset/problem/1/A\">problem 1A</a>. Now it's finally getting repaved.</p><p>The square still has a rectangular shape of $$$n \\times m$$$ meters. However, the picture is about to get more complicated now. Let $$$a_{i,j}$$$ be the $$$j$$$-th square in the $$$i$$$-th row of the pavement.</p><p>You are given the picture of the squares:</p><ul> <li> if $$$a_{i,j} = $$$ \"<span class=\"tex-font-style-tt\">*</span>\", then the $$$j$$$-th square in the $$$i$$$-th row should be <span class=\"tex-font-style-bf\">black</span>; </li><li> if $$$a_{i,j} = $$$ \"<span class=\"tex-font-style-tt\">.</span>\", then the $$$j$$$-th square in the $$$i$$$-th row should be <span class=\"tex-font-style-bf\">white</span>. </li></ul><p>The black squares are paved already. You have to pave the white squares. There are two options for pavement tiles:</p><ul> <li> $$$1 \\times 1$$$ tiles\u00a0\u2014 each tile costs $$$x$$$ burles and covers exactly $$$1$$$ square; </li><li> $$$1 \\times 2$$$ tiles\u00a0\u2014 each tile costs $$$y$$$ burles and covers exactly $$$2$$$ adjacent squares of the <span class=\"tex-font-style-bf\">same row</span>. <span class=\"tex-font-style-bf\">Note that you are not allowed to rotate these tiles or cut them into $$$1 \\times 1$$$ tiles.</span> </li></ul><p><span class=\"tex-font-style-bf\">You should cover all the white squares, no two tiles should overlap and no black squares should be covered by tiles.</span></p><p>What is the smallest total price of the tiles needed to cover all the white squares?</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 500$$$)\u00a0\u2014 the number of testcases. Then the description of $$$t$$$ testcases follow.</p><p>The first line of each testcase contains four integers $$$n$$$, $$$m$$$, $$$x$$$ and $$$y$$$ ($$$1 \\le n \\le 100$$$; $$$1 \\le m \\le 1000$$$; $$$1 \\le x, y \\le 1000$$$)\u00a0\u2014 the size of the Theatre square, the price of the $$$1 \\times 1$$$ tile and the price of the $$$1 \\times 2$$$ tile.</p><p>Each of the next $$$n$$$ lines contains $$$m$$$ characters. The $$$j$$$-th character in the $$$i$$$-th line is $$$a_{i,j}$$$. If $$$a_{i,j} = $$$ \"<span class=\"tex-font-style-tt\">*</span>\", then the $$$j$$$-th square in the $$$i$$$-th row should be black, and if $$$a_{i,j} = $$$ \"<span class=\"tex-font-style-tt\">.</span>\", then the $$$j$$$-th square in the $$$i$$$-th row should be white.</p><p><span class=\"tex-font-style-bf\">It's guaranteed that the sum of $$$n \\times m$$$ over all testcases doesn't exceed $$$10^5$$$.</span></p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each testcase print a single integer\u00a0\u2014 the smallest total price of the tiles needed to cover all the white squares in burles.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n4\n1 1 10 1\n.\n1 2 10 1\n..\n2 1 10 1\n.\n.\n3 3 3 7\n..*\n*..\n.*.\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n10\n1\n20\n18\n</pre></div>"], "p_note": ["<p>In the first testcase you are required to use a single $$$1 \\times 1$$$ tile, even though $$$1 \\times 2$$$ tile is cheaper. So the total price is $$$10$$$ burles.</p>", "<p>In the second testcase you can either use two $$$1 \\times 1$$$ tiles and spend $$$20$$$ burles or use a single $$$1 \\times 2$$$ tile and spend $$$1$$$ burle. The second option is cheaper, thus the answer is $$$1$$$.</p>", "<p>The third testcase shows that you can't rotate $$$1 \\times 2$$$ tiles. You still have to use two $$$1 \\times 1$$$ tiles for the total price of $$$20$$$.</p>", "<p>In the fourth testcase the cheapest way is to use $$$1 \\times 1$$$ tiles everywhere. The total cost is $$$6 \\cdot 3 = 18$$$.</p>"]},
{"p_id": "1354", "p_index": "C2", "p_title": "C2. Not So Simple Polygon Embedding", "p_time_limit": "2 seconds", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p><span class=\"tex-font-style-bf\">The statement of this problem is the same as the statement of problem C1. The only difference is that, in problem C1, $$$n$$$ is always even, and in C2, $$$n$$$ is always odd.</span></p><p>You are given a regular polygon with $$$2 \\cdot n$$$ vertices (it's convex and has equal sides and equal angles) and all its sides have length $$$1$$$. Let's name it as $$$2n$$$-gon.</p><p>Your task is to find the square of the minimum size such that you can embed $$$2n$$$-gon in the square. Embedding $$$2n$$$-gon in the square means that you need to place $$$2n$$$-gon in the square in such way that each point which lies inside or on a border of $$$2n$$$-gon should also lie inside or on a border of the square.</p><p>You can rotate $$$2n$$$-gon and/or the square.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line contains a single integer $$$T$$$ ($$$1 \\le T \\le 200$$$)\u00a0\u2014 the number of test cases.</p><p>Next $$$T$$$ lines contain descriptions of test cases\u00a0\u2014 one per line. Each line contains single <span class=\"tex-font-style-bf\">odd</span> integer $$$n$$$ ($$$3 \\le n \\le 199$$$). Don't forget you need to embed $$$2n$$$-gon, not an $$$n$$$-gon.</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>Print $$$T$$$ real numbers\u00a0\u2014 one per test case. For each test case, print the minimum length of a side of the square $$$2n$$$-gon can be embedded in. Your answer will be considered correct if its absolute or relative error doesn't exceed $$$10^{-6}$$$.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n3\n3\n5\n199\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1.931851653\n3.196226611\n126.687663595\n</pre></div>"], "p_note": []},
{"p_id": "1353", "p_index": "D", "p_title": "D. Constructing the Array", "p_time_limit": "1 second", "p_memory_limit": "256 megabytes", "p_input_file": "standard input", "p_output_file": "standard output", "p_statement": "<div><p>You are given an array $$$a$$$ of length $$$n$$$ consisting of zeros. You perform $$$n$$$ actions with this array: during the $$$i$$$-th action, the following sequence of operations appears:</p><ol> <li> Choose the maximum by length subarray (<span class=\"tex-font-style-bf\">continuous subsegment</span>) consisting <span class=\"tex-font-style-bf\">only</span> of zeros, among all such segments choose the <span class=\"tex-font-style-bf\">leftmost</span> one; </li><li> Let this segment be $$$[l; r]$$$. If $$$r-l+1$$$ is odd (not divisible by $$$2$$$) then assign (set) $$$a[\\frac{l+r}{2}] := i$$$ (where $$$i$$$ is the number of the current action), otherwise (if $$$r-l+1$$$ is even) assign (set) $$$a[\\frac{l+r-1}{2}] := i$$$. </li></ol><p>Consider the array $$$a$$$ of length $$$5$$$ (initially $$$a=[0, 0, 0, 0, 0]$$$). Then it changes as follows:</p><ol> <li> Firstly, we choose the segment $$$[1; 5]$$$ and assign $$$a[3] := 1$$$, so $$$a$$$ becomes $$$[0, 0, 1, 0, 0]$$$; </li><li> then we choose the segment $$$[1; 2]$$$ and assign $$$a[1] := 2$$$, so $$$a$$$ becomes $$$[2, 0, 1, 0, 0]$$$; </li><li> then we choose the segment $$$[4; 5]$$$ and assign $$$a[4] := 3$$$, so $$$a$$$ becomes $$$[2, 0, 1, 3, 0]$$$; </li><li> then we choose the segment $$$[2; 2]$$$ and assign $$$a[2] := 4$$$, so $$$a$$$ becomes $$$[2, 4, 1, 3, 0]$$$; </li><li> and at last we choose the segment $$$[5; 5]$$$ and assign $$$a[5] := 5$$$, so $$$a$$$ becomes $$$[2, 4, 1, 3, 5]$$$. </li></ol><p>Your task is to find the array $$$a$$$ of length $$$n$$$ after performing all $$$n$$$ actions. <span class=\"tex-font-style-bf\">Note that the answer exists and unique</span>.</p><p>You have to answer $$$t$$$ independent test cases.</p></div>", "p_input_specification": "<div class=\"input-specification\"><div class=\"section-title\">Input</div><p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>The only line of the test case contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) \u2014 the length of $$$a$$$.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$ ($$$\\sum n \\le 2 \\cdot 10^5$$$).</p></div>", "p_output_specification": "<div class=\"output-specification\"><div class=\"section-title\">Output</div><p>For each test case, print the answer \u2014 the array $$$a$$$ of length $$$n$$$ after performing $$$n$$$ actions described in the problem statement. <span class=\"tex-font-style-bf\">Note that the answer exists and unique</span>.</p></div>", "p_sample_tests": ["<div class=\"input\"><div class=\"title\">Input</div><pre>\n6\n1\n2\n3\n4\n5\n6\n</pre></div>", "<div class=\"output\"><div class=\"title\">Output</div><pre>\n1 \n1 2 \n2 1 3 \n3 1 2 4 \n2 4 1 3 5 \n3 4 1 5 2 6 \n</pre></div>"], "p_note": []}
]